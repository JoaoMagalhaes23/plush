
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'leftPLUSMINUSleftMULTIPLYDIVIDEMODrightPOWERnonassocLESSGREATERLESS_EQUALGREATER_EQUALEQUALSDIFFERENTleftANDleftORrightNOTrightUMINUSAND BOOLEAN BOOLEAN_LITERAL CHAR CHAR_LITERAL COLON COLON_EQUALS COMMA DIFFERENT DIVIDE DOUBLE DOUBLE_LITERAL ELSE EQUALS FLOAT FLOAT_LITERAL FUNCTION GREATER GREATER_EQUAL ID IF IMMUTABLE_VARIABLE INT INT_LITERAL LESS LESS_EQUAL L_BRACKET L_PAREN L_S_BRACKET MINUS MOD MULTIPLY MUTABLE_VARIABLE NOT OR PLUS POWER R_BRACKET R_PAREN R_S_BRACKET SEMICOLON STRING STRING_LITERAL VOID WHILE\n    start : top_level_declarations\n    \n    top_level_declarations  : top_level_declaration top_level_declarations\n                            | top_level_declaration\n    \n    top_level_declaration   : create_variable SEMICOLON\n                            | assign SEMICOLON\n                            | function\n    \n    create_variable : MUTABLE_VARIABLE ID COLON type COLON_EQUALS expression\n                    | IMMUTABLE_VARIABLE ID COLON type COLON_EQUALS expression\n    \n    assign : ID COLON_EQUALS expression\n    \n    function : FUNCTION ID L_PAREN parameter_list R_PAREN COLON type L_BRACKET block R_BRACKET\n    \n    parameter_list  : parameter COMMA parameter_list\n                    | parameter\n    \n    parameter   : IMMUTABLE_VARIABLE ID COLON type\n                | MUTABLE_VARIABLE ID COLON type\n     \n    block   : statement block \n            | statement\n    \n    statement   : if_statement\n                | while_statement\n                | assign SEMICOLON\n                | create_variable SEMICOLON\n                | function_call SEMICOLON\n    \n    if_statement    : IF expression L_BRACKET block R_BRACKET ELSE L_BRACKET block R_BRACKET\n                    | IF expression L_BRACKET block R_BRACKET\n    \n    while_statement : WHILE expression L_BRACKET block R_BRACKET\n    \n    expression  : expression MULTIPLY expression\n                | expression DIVIDE expression\n                | expression MOD expression\n                | expression POWER expression\n                | expression PLUS expression\n                | expression MINUS expression\n                | expression LESS expression\n                | expression GREATER expression\n                | expression GREATER_EQUAL expression\n                | expression LESS_EQUAL expression\n                | expression EQUALS expression\n                | expression DIFFERENT expression\n                | expression AND expression\n                | expression OR expression\n                | L_PAREN expression R_PAREN\n                | value\n    expression : MINUS expression %prec UMINUSexpression : NOT expression\n    type    : type_int\n            | type_double\n            | type_string\n            | type_boolean\n            | type_char\n            | type_float\n            | type_array\n    \n    type_int : INT\n    \n    type_double : DOUBLE\n    \n    type_string : STRING\n    \n    type_boolean : BOOLEAN\n    \n    type_char : CHAR\n    \n    type_float : FLOAT\n    \n    type_array : L_S_BRACKET type R_S_BRACKET\n    \n    value   : literal_int\n            | literal_double\n            | literal_string\n            | literal_boolean\n            | literal_char\n            | literal_float\n            | identifier\n            | function_call\n            | array\n    \n    literal_int : INT_LITERAL\n    \n    literal_double : DOUBLE_LITERAL\n    \n    literal_string : STRING_LITERAL\n    \n    literal_boolean : BOOLEAN_LITERAL\n    \n    literal_char : CHAR_LITERAL\n    \n    literal_float : FLOAT_LITERAL\n    \n    identifier : ID\n    \n    array   : L_S_BRACKET values_list R_S_BRACKET\n            | L_BRACKET R_BRACKET\n    \n    values_list : value COMMA values_list\n                | value\n                |\n    \n    function_call : ID L_PAREN arguments_list R_PAREN\n    \n    arguments_list  : expression COMMA arguments_list\n                    | expression\n                    |\n    '
    
_lr_action_items = {'MUTABLE_VARIABLE':([0,3,6,12,13,43,108,125,128,129,130,136,138,139,140,143,144,147,148,150,152,],[7,7,-6,-4,-5,84,84,7,7,-17,-18,-10,-19,-20,-21,7,7,-23,-24,7,-22,]),'IMMUTABLE_VARIABLE':([0,3,6,12,13,43,108,125,128,129,130,136,138,139,140,143,144,147,148,150,152,],[9,9,-6,-4,-5,83,83,9,9,-17,-18,-10,-19,-20,-21,9,9,-23,-24,9,-22,]),'ID':([0,3,6,7,9,10,12,13,15,21,22,24,40,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,83,84,85,105,106,114,125,128,129,130,134,135,136,138,139,140,143,144,147,148,150,152,],[8,8,-6,14,16,17,-4,-5,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,109,110,19,19,19,19,126,126,-17,-18,19,19,-10,-19,-20,-21,126,126,-23,-24,126,-22,]),'FUNCTION':([0,3,6,12,13,136,],[10,10,-6,-4,-5,-10,]),'$end':([1,2,3,6,11,12,13,136,],[0,-1,-3,-6,-2,-4,-5,-10,]),'SEMICOLON':([4,5,19,20,23,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,74,76,79,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,111,113,116,131,132,133,],[12,13,-72,-9,-40,-57,-58,-59,-60,-61,-62,-63,-64,-65,-66,-67,-68,-69,-70,-71,-41,-42,-74,-25,-26,-27,-28,-29,-30,-31,-32,-33,-34,-35,-36,-37,-38,-39,-73,-7,-78,-8,138,139,140,]),'COLON_EQUALS':([8,44,45,46,47,48,49,50,51,52,53,54,55,56,57,80,112,126,],[15,85,-43,-44,-45,-46,-47,-48,-49,-50,-51,-52,-53,-54,-55,106,-56,15,]),'COLON':([14,16,107,109,110,],[18,42,117,119,120,]),'L_PAREN':([15,17,19,21,22,24,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,85,106,114,126,134,135,],[22,43,59,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,59,22,22,]),'MINUS':([15,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,79,85,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,106,111,113,114,116,134,135,141,142,],[21,-72,65,21,21,-40,21,-57,-58,-59,-60,-61,-62,-63,-64,-65,-66,-67,-68,-69,-70,-71,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,-41,65,-42,-74,21,65,-25,-26,-27,-28,-29,-30,-31,-32,-33,-34,-35,-36,-37,-38,-39,-73,21,65,-78,21,65,21,21,65,65,]),'NOT':([15,21,22,24,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,85,106,114,134,135,],[24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,]),'INT_LITERAL':([15,21,22,24,40,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,85,105,106,114,134,135,],[34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,]),'DOUBLE_LITERAL':([15,21,22,24,40,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,85,105,106,114,134,135,],[35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,]),'STRING_LITERAL':([15,21,22,24,40,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,85,105,106,114,134,135,],[36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,]),'BOOLEAN_LITERAL':([15,21,22,24,40,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,85,105,106,114,134,135,],[37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,]),'CHAR_LITERAL':([15,21,22,24,40,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,85,105,106,114,134,135,],[38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,]),'FLOAT_LITERAL':([15,21,22,24,40,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,85,105,106,114,134,135,],[39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,]),'L_S_BRACKET':([15,18,21,22,24,40,42,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,85,105,106,114,117,119,120,134,135,],[40,58,40,40,40,40,58,58,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,58,58,58,40,40,]),'L_BRACKET':([15,19,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,45,46,47,48,49,50,51,52,53,54,55,56,57,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,76,79,85,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,112,113,114,122,134,135,141,142,149,],[41,-72,41,41,-40,41,-57,-58,-59,-60,-61,-62,-63,-64,-65,-66,-67,-68,-69,-70,-71,41,-43,-44,-45,-46,-47,-48,-49,-50,-51,-52,-53,-54,-55,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,-41,-42,-74,41,-25,-26,-27,-28,-29,-30,-31,-32,-33,-34,-35,-36,-37,-38,-39,-73,41,41,-56,-78,41,125,41,41,143,144,150,]),'INT':([18,42,58,117,119,120,],[52,52,52,52,52,52,]),'DOUBLE':([18,42,58,117,119,120,],[53,53,53,53,53,53,]),'STRING':([18,42,58,117,119,120,],[54,54,54,54,54,54,]),'BOOLEAN':([18,42,58,117,119,120,],[55,55,55,55,55,55,]),'CHAR':([18,42,58,117,119,120,],[56,56,56,56,56,56,]),'FLOAT':([18,42,58,117,119,120,],[57,57,57,57,57,57,]),'MULTIPLY':([19,20,23,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,74,75,76,79,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,111,113,116,141,142,],[-72,60,-40,-57,-58,-59,-60,-61,-62,-63,-64,-65,-66,-67,-68,-69,-70,-71,-41,60,-42,-74,60,-25,-26,-27,-28,60,60,-31,-32,-33,-34,-35,-36,-37,-38,-39,-73,60,-78,60,60,60,]),'DIVIDE':([19,20,23,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,74,75,76,79,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,111,113,116,141,142,],[-72,61,-40,-57,-58,-59,-60,-61,-62,-63,-64,-65,-66,-67,-68,-69,-70,-71,-41,61,-42,-74,61,-25,-26,-27,-28,61,61,-31,-32,-33,-34,-35,-36,-37,-38,-39,-73,61,-78,61,61,61,]),'MOD':([19,20,23,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,74,75,76,79,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,111,113,116,141,142,],[-72,62,-40,-57,-58,-59,-60,-61,-62,-63,-64,-65,-66,-67,-68,-69,-70,-71,-41,62,-42,-74,62,-25,-26,-27,-28,62,62,-31,-32,-33,-34,-35,-36,-37,-38,-39,-73,62,-78,62,62,62,]),'POWER':([19,20,23,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,74,75,76,79,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,111,113,116,141,142,],[-72,63,-40,-57,-58,-59,-60,-61,-62,-63,-64,-65,-66,-67,-68,-69,-70,-71,-41,63,-42,-74,63,63,63,63,63,63,63,-31,-32,-33,-34,-35,-36,-37,-38,-39,-73,63,-78,63,63,63,]),'PLUS':([19,20,23,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,74,75,76,79,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,111,113,116,141,142,],[-72,64,-40,-57,-58,-59,-60,-61,-62,-63,-64,-65,-66,-67,-68,-69,-70,-71,-41,64,-42,-74,64,-25,-26,-27,-28,-29,-30,-31,-32,-33,-34,-35,-36,-37,-38,-39,-73,64,-78,64,64,64,]),'LESS':([19,20,23,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,74,75,76,79,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,111,113,116,141,142,],[-72,66,-40,-57,-58,-59,-60,-61,-62,-63,-64,-65,-66,-67,-68,-69,-70,-71,-41,66,-42,-74,66,66,66,66,66,66,66,None,None,None,None,None,None,-37,-38,-39,-73,66,-78,66,66,66,]),'GREATER':([19,20,23,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,74,75,76,79,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,111,113,116,141,142,],[-72,67,-40,-57,-58,-59,-60,-61,-62,-63,-64,-65,-66,-67,-68,-69,-70,-71,-41,67,-42,-74,67,67,67,67,67,67,67,None,None,None,None,None,None,-37,-38,-39,-73,67,-78,67,67,67,]),'GREATER_EQUAL':([19,20,23,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,74,75,76,79,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,111,113,116,141,142,],[-72,68,-40,-57,-58,-59,-60,-61,-62,-63,-64,-65,-66,-67,-68,-69,-70,-71,-41,68,-42,-74,68,68,68,68,68,68,68,None,None,None,None,None,None,-37,-38,-39,-73,68,-78,68,68,68,]),'LESS_EQUAL':([19,20,23,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,74,75,76,79,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,111,113,116,141,142,],[-72,69,-40,-57,-58,-59,-60,-61,-62,-63,-64,-65,-66,-67,-68,-69,-70,-71,-41,69,-42,-74,69,69,69,69,69,69,69,None,None,None,None,None,None,-37,-38,-39,-73,69,-78,69,69,69,]),'EQUALS':([19,20,23,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,74,75,76,79,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,111,113,116,141,142,],[-72,70,-40,-57,-58,-59,-60,-61,-62,-63,-64,-65,-66,-67,-68,-69,-70,-71,-41,70,-42,-74,70,70,70,70,70,70,70,None,None,None,None,None,None,-37,-38,-39,-73,70,-78,70,70,70,]),'DIFFERENT':([19,20,23,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,74,75,76,79,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,111,113,116,141,142,],[-72,71,-40,-57,-58,-59,-60,-61,-62,-63,-64,-65,-66,-67,-68,-69,-70,-71,-41,71,-42,-74,71,71,71,71,71,71,71,None,None,None,None,None,None,-37,-38,-39,-73,71,-78,71,71,71,]),'AND':([19,20,23,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,74,75,76,79,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,111,113,116,141,142,],[-72,72,-40,-57,-58,-59,-60,-61,-62,-63,-64,-65,-66,-67,-68,-69,-70,-71,-41,72,-42,-74,72,72,72,72,72,72,72,72,72,72,72,72,72,-37,-38,-39,-73,72,-78,72,72,72,]),'OR':([19,20,23,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,74,75,76,79,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,111,113,116,141,142,],[-72,73,-40,-57,-58,-59,-60,-61,-62,-63,-64,-65,-66,-67,-68,-69,-70,-71,-41,73,-42,-74,73,73,73,73,73,73,73,73,73,73,73,73,73,73,-38,-39,-73,73,-78,73,73,73,]),'R_PAREN':([19,23,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,45,46,47,48,49,50,51,52,53,54,55,56,57,59,74,75,76,79,81,82,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,112,113,114,118,121,123,124,],[-72,-40,-57,-58,-59,-60,-61,-62,-63,-64,-65,-66,-67,-68,-69,-70,-71,-43,-44,-45,-46,-47,-48,-49,-50,-51,-52,-53,-54,-55,-81,-41,103,-42,-74,107,-12,113,-80,-25,-26,-27,-28,-29,-30,-31,-32,-33,-34,-35,-36,-37,-38,-39,-73,-56,-78,-81,-11,-79,-13,-14,]),'COMMA':([19,23,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,45,46,47,48,49,50,51,52,53,54,55,56,57,74,76,78,79,82,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,112,113,123,124,],[-72,-40,-57,-58,-59,-60,-61,-62,-63,-64,-65,-66,-67,-68,-69,-70,-71,-43,-44,-45,-46,-47,-48,-49,-50,-51,-52,-53,-54,-55,-41,-42,105,-74,108,114,-25,-26,-27,-28,-29,-30,-31,-32,-33,-34,-35,-36,-37,-38,-39,-73,-56,-78,-13,-14,]),'R_S_BRACKET':([19,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,45,46,47,48,49,50,51,52,53,54,55,56,57,77,78,79,86,104,105,112,113,115,],[-72,-57,-58,-59,-60,-61,-62,-63,-64,-65,-66,-67,-68,-69,-70,-71,-77,-43,-44,-45,-46,-47,-48,-49,-50,-51,-52,-53,-54,-55,104,-76,-74,112,-73,-77,-56,-78,-75,]),'R_BRACKET':([41,127,128,129,130,137,138,139,140,145,146,147,148,151,152,],[79,136,-16,-17,-18,-15,-19,-20,-21,147,148,-23,-24,152,-22,]),'IF':([125,128,129,130,138,139,140,143,144,147,148,150,152,],[134,134,-17,-18,-19,-20,-21,134,134,-23,-24,134,-22,]),'WHILE':([125,128,129,130,138,139,140,143,144,147,148,150,152,],[135,135,-17,-18,-19,-20,-21,135,135,-23,-24,135,-22,]),'ELSE':([147,],[149,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'start':([0,],[1,]),'top_level_declarations':([0,3,],[2,11,]),'top_level_declaration':([0,3,],[3,3,]),'create_variable':([0,3,125,128,143,144,150,],[4,4,132,132,132,132,132,]),'assign':([0,3,125,128,143,144,150,],[5,5,131,131,131,131,131,]),'function':([0,3,],[6,6,]),'expression':([15,21,22,24,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,85,106,114,134,135,],[20,74,75,76,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,111,116,88,141,142,]),'value':([15,21,22,24,40,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,85,105,106,114,134,135,],[23,23,23,23,78,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,78,23,23,23,23,]),'literal_int':([15,21,22,24,40,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,85,105,106,114,134,135,],[25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,]),'literal_double':([15,21,22,24,40,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,85,105,106,114,134,135,],[26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,]),'literal_string':([15,21,22,24,40,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,85,105,106,114,134,135,],[27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,]),'literal_boolean':([15,21,22,24,40,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,85,105,106,114,134,135,],[28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,]),'literal_char':([15,21,22,24,40,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,85,105,106,114,134,135,],[29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,]),'literal_float':([15,21,22,24,40,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,85,105,106,114,134,135,],[30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,]),'identifier':([15,21,22,24,40,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,85,105,106,114,134,135,],[31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,]),'function_call':([15,21,22,24,40,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,85,105,106,114,125,128,134,135,143,144,150,],[32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,133,133,32,32,133,133,133,]),'array':([15,21,22,24,40,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,85,105,106,114,134,135,],[33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,]),'type':([18,42,58,117,119,120,],[44,80,86,122,123,124,]),'type_int':([18,42,58,117,119,120,],[45,45,45,45,45,45,]),'type_double':([18,42,58,117,119,120,],[46,46,46,46,46,46,]),'type_string':([18,42,58,117,119,120,],[47,47,47,47,47,47,]),'type_boolean':([18,42,58,117,119,120,],[48,48,48,48,48,48,]),'type_char':([18,42,58,117,119,120,],[49,49,49,49,49,49,]),'type_float':([18,42,58,117,119,120,],[50,50,50,50,50,50,]),'type_array':([18,42,58,117,119,120,],[51,51,51,51,51,51,]),'values_list':([40,105,],[77,115,]),'parameter_list':([43,108,],[81,118,]),'parameter':([43,108,],[82,82,]),'arguments_list':([59,114,],[87,121,]),'block':([125,128,143,144,150,],[127,137,145,146,151,]),'statement':([125,128,143,144,150,],[128,128,128,128,128,]),'if_statement':([125,128,143,144,150,],[129,129,129,129,129,]),'while_statement':([125,128,143,144,150,],[130,130,130,130,130,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> start","S'",1,None,None,None),
  ('start -> top_level_declarations','start',1,'p_start','mparser.py',17),
  ('top_level_declarations -> top_level_declaration top_level_declarations','top_level_declarations',2,'p_top_level_declarations','mparser.py',23),
  ('top_level_declarations -> top_level_declaration','top_level_declarations',1,'p_top_level_declarations','mparser.py',24),
  ('top_level_declaration -> create_variable SEMICOLON','top_level_declaration',2,'p_top_level_declaration','mparser.py',34),
  ('top_level_declaration -> assign SEMICOLON','top_level_declaration',2,'p_top_level_declaration','mparser.py',35),
  ('top_level_declaration -> function','top_level_declaration',1,'p_top_level_declaration','mparser.py',36),
  ('create_variable -> MUTABLE_VARIABLE ID COLON type COLON_EQUALS expression','create_variable',6,'p_create_variable','mparser.py',42),
  ('create_variable -> IMMUTABLE_VARIABLE ID COLON type COLON_EQUALS expression','create_variable',6,'p_create_variable','mparser.py',43),
  ('assign -> ID COLON_EQUALS expression','assign',3,'p_assign','mparser.py',52),
  ('function -> FUNCTION ID L_PAREN parameter_list R_PAREN COLON type L_BRACKET block R_BRACKET','function',10,'p_function','mparser.py',58),
  ('parameter_list -> parameter COMMA parameter_list','parameter_list',3,'p_parameter_list','mparser.py',64),
  ('parameter_list -> parameter','parameter_list',1,'p_parameter_list','mparser.py',65),
  ('parameter -> IMMUTABLE_VARIABLE ID COLON type','parameter',4,'p_parameter','mparser.py',74),
  ('parameter -> MUTABLE_VARIABLE ID COLON type','parameter',4,'p_parameter','mparser.py',75),
  ('block -> statement block','block',2,'p_block','mparser.py',81),
  ('block -> statement','block',1,'p_block','mparser.py',82),
  ('statement -> if_statement','statement',1,'p_statement','mparser.py',91),
  ('statement -> while_statement','statement',1,'p_statement','mparser.py',92),
  ('statement -> assign SEMICOLON','statement',2,'p_statement','mparser.py',93),
  ('statement -> create_variable SEMICOLON','statement',2,'p_statement','mparser.py',94),
  ('statement -> function_call SEMICOLON','statement',2,'p_statement','mparser.py',95),
  ('if_statement -> IF expression L_BRACKET block R_BRACKET ELSE L_BRACKET block R_BRACKET','if_statement',9,'p_if_statement','mparser.py',101),
  ('if_statement -> IF expression L_BRACKET block R_BRACKET','if_statement',5,'p_if_statement','mparser.py',102),
  ('while_statement -> WHILE expression L_BRACKET block R_BRACKET','while_statement',5,'p_while_statement','mparser.py',111),
  ('expression -> expression MULTIPLY expression','expression',3,'p_expression','mparser.py',117),
  ('expression -> expression DIVIDE expression','expression',3,'p_expression','mparser.py',118),
  ('expression -> expression MOD expression','expression',3,'p_expression','mparser.py',119),
  ('expression -> expression POWER expression','expression',3,'p_expression','mparser.py',120),
  ('expression -> expression PLUS expression','expression',3,'p_expression','mparser.py',121),
  ('expression -> expression MINUS expression','expression',3,'p_expression','mparser.py',122),
  ('expression -> expression LESS expression','expression',3,'p_expression','mparser.py',123),
  ('expression -> expression GREATER expression','expression',3,'p_expression','mparser.py',124),
  ('expression -> expression GREATER_EQUAL expression','expression',3,'p_expression','mparser.py',125),
  ('expression -> expression LESS_EQUAL expression','expression',3,'p_expression','mparser.py',126),
  ('expression -> expression EQUALS expression','expression',3,'p_expression','mparser.py',127),
  ('expression -> expression DIFFERENT expression','expression',3,'p_expression','mparser.py',128),
  ('expression -> expression AND expression','expression',3,'p_expression','mparser.py',129),
  ('expression -> expression OR expression','expression',3,'p_expression','mparser.py',130),
  ('expression -> L_PAREN expression R_PAREN','expression',3,'p_expression','mparser.py',131),
  ('expression -> value','expression',1,'p_expression','mparser.py',132),
  ('expression -> MINUS expression','expression',2,'p_expression_uminus','mparser.py',142),
  ('expression -> NOT expression','expression',2,'p_expression_not','mparser.py',146),
  ('type -> type_int','type',1,'p_type','mparser.py',151),
  ('type -> type_double','type',1,'p_type','mparser.py',152),
  ('type -> type_string','type',1,'p_type','mparser.py',153),
  ('type -> type_boolean','type',1,'p_type','mparser.py',154),
  ('type -> type_char','type',1,'p_type','mparser.py',155),
  ('type -> type_float','type',1,'p_type','mparser.py',156),
  ('type -> type_array','type',1,'p_type','mparser.py',157),
  ('type_int -> INT','type_int',1,'p_type_int','mparser.py',163),
  ('type_double -> DOUBLE','type_double',1,'p_type_double','mparser.py',169),
  ('type_string -> STRING','type_string',1,'p_type_string','mparser.py',175),
  ('type_boolean -> BOOLEAN','type_boolean',1,'p_type_boolean','mparser.py',181),
  ('type_char -> CHAR','type_char',1,'p_type_char','mparser.py',187),
  ('type_float -> FLOAT','type_float',1,'p_type_float','mparser.py',193),
  ('type_array -> L_S_BRACKET type R_S_BRACKET','type_array',3,'p_type_array','mparser.py',199),
  ('value -> literal_int','value',1,'p_value','mparser.py',205),
  ('value -> literal_double','value',1,'p_value','mparser.py',206),
  ('value -> literal_string','value',1,'p_value','mparser.py',207),
  ('value -> literal_boolean','value',1,'p_value','mparser.py',208),
  ('value -> literal_char','value',1,'p_value','mparser.py',209),
  ('value -> literal_float','value',1,'p_value','mparser.py',210),
  ('value -> identifier','value',1,'p_value','mparser.py',211),
  ('value -> function_call','value',1,'p_value','mparser.py',212),
  ('value -> array','value',1,'p_value','mparser.py',213),
  ('literal_int -> INT_LITERAL','literal_int',1,'p_literal_int','mparser.py',219),
  ('literal_double -> DOUBLE_LITERAL','literal_double',1,'p_literal_double','mparser.py',225),
  ('literal_string -> STRING_LITERAL','literal_string',1,'p_literal_string','mparser.py',231),
  ('literal_boolean -> BOOLEAN_LITERAL','literal_boolean',1,'p_literal_boolean','mparser.py',237),
  ('literal_char -> CHAR_LITERAL','literal_char',1,'p_literal_char','mparser.py',243),
  ('literal_float -> FLOAT_LITERAL','literal_float',1,'p_literal_float','mparser.py',249),
  ('identifier -> ID','identifier',1,'p_identifier','mparser.py',255),
  ('array -> L_S_BRACKET values_list R_S_BRACKET','array',3,'p_array','mparser.py',261),
  ('array -> L_BRACKET R_BRACKET','array',2,'p_array','mparser.py',262),
  ('values_list -> value COMMA values_list','values_list',3,'p_values_list','mparser.py',268),
  ('values_list -> value','values_list',1,'p_values_list','mparser.py',269),
  ('values_list -> <empty>','values_list',0,'p_values_list','mparser.py',270),
  ('function_call -> ID L_PAREN arguments_list R_PAREN','function_call',4,'p_function_call','mparser.py',281),
  ('arguments_list -> expression COMMA arguments_list','arguments_list',3,'p_arguments_list','mparser.py',287),
  ('arguments_list -> expression','arguments_list',1,'p_arguments_list','mparser.py',288),
  ('arguments_list -> <empty>','arguments_list',0,'p_arguments_list','mparser.py',289),
]
