
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'leftPLUSMINUSleftMULTIPLYDIVIDEMODrightPOWERnonassocLESSGREATERLESS_EQUALGREATER_EQUALEQUALSDIFFERENTleftANDleftORrightNOTrightUMINUSleftL_PARENR_PARENleftL_S_BRACKETR_S_BRACKETAND BOOLEAN BOOLEAN_LITERAL CHAR CHAR_LITERAL COLON COLON_EQUALS COMMA DIFFERENT DIVIDE ELSE EQUALS FLOAT FLOAT_LITERAL FUNCTION GREATER GREATER_EQUAL ID IF IMMUTABLE_VARIABLE INT INT_LITERAL LESS LESS_EQUAL L_BRACKET L_PAREN L_S_BRACKET MINUS MOD MULTIPLY MUTABLE_VARIABLE NOT OR PLUS POWER R_BRACKET R_PAREN R_S_BRACKET SEMICOLON STRING STRING_LITERAL VOID WHILE\n    start : top_level_declarations\n    \n    top_level_declarations  : top_level_declaration top_level_declarations\n                            | top_level_declaration\n    \n    top_level_declaration   : create_variable SEMICOLON\n                            | function\n    \n    create_variable : MUTABLE_VARIABLE ID COLON type COLON_EQUALS expression\n                    | IMMUTABLE_VARIABLE ID COLON type COLON_EQUALS expression   \n    \n    assign  :   ID COLON_EQUALS expression\n            |   index COLON_EQUALS expression\n    \n    function    : FUNCTION ID L_PAREN parameter_list R_PAREN COLON type L_BRACKET block R_BRACKET\n                | FUNCTION ID L_PAREN parameter_list R_PAREN COLON type SEMICOLON\n    \n    parameter_list  : parameter COMMA parameter_list\n                    | parameter\n                    |\n    \n    parameter   : MUTABLE_VARIABLE ID COLON type\n                | IMMUTABLE_VARIABLE ID COLON type\n     \n    block   : statement block \n            | statement\n    \n    statement   : if_statement\n                | while_statement\n                | assign SEMICOLON\n                | create_variable SEMICOLON\n                | function_call SEMICOLON\n                | function\n    \n    if_statement    : IF expression L_BRACKET block R_BRACKET\n                    | IF expression L_BRACKET block R_BRACKET else_if_statements\n                    | IF expression L_BRACKET block R_BRACKET ELSE L_BRACKET block R_BRACKET\n    \n    else_if_statements  : ELSE IF expression L_BRACKET block R_BRACKET\n                        | ELSE IF expression L_BRACKET block R_BRACKET else_if_statements\n                        | ELSE IF expression L_BRACKET block R_BRACKET ELSE L_BRACKET block R_BRACKET\n    \n    while_statement : WHILE expression L_BRACKET block R_BRACKET\n    \n    expression  : expression MULTIPLY expression\n                | expression DIVIDE expression\n                | expression MOD expression\n                | expression POWER expression\n                | expression PLUS expression\n                | expression MINUS expression\n                | expression LESS expression\n                | expression GREATER expression\n                | expression GREATER_EQUAL expression\n                | expression LESS_EQUAL expression\n                | expression EQUALS expression\n                | expression DIFFERENT expression\n                | expression AND expression\n                | expression OR expression\n                | L_PAREN expression R_PAREN\n                | value\n    expression : MINUS expression %prec UMINUSexpression : NOT expression\n    type    : type_int\n            | type_string\n            | type_boolean\n            | type_char\n            | type_float\n            | type_void\n            | type_array\n    \n    type_int : INT\n    \n    type_string : STRING\n    \n    type_boolean : BOOLEAN\n    \n    type_char : CHAR\n    \n    type_float : FLOAT\n    \n    type_void : VOID\n    \n    type_array : L_S_BRACKET type R_S_BRACKET\n    \n    value   : literal_int\n            | literal_string\n            | literal_boolean\n            | literal_char\n            | literal_float\n            | identifier\n            | function_call\n            | index\n            | array\n    \n    literal_int : INT_LITERAL\n    \n    literal_string : STRING_LITERAL\n    \n    literal_boolean : BOOLEAN_LITERAL\n    \n    literal_char : CHAR_LITERAL\n    \n    literal_float : FLOAT_LITERAL\n    \n    identifier  : ID\n    \n    index   : ID temp\n    temp    : L_S_BRACKET expression R_S_BRACKET temp\n            | L_S_BRACKET expression R_S_BRACKET\n    \n    array   : L_BRACKET array_literal R_BRACKET\n            | L_BRACKET R_BRACKET\n    \n    array_literal   : expression COMMA array_literal\n                    | expression\n    \n    function_call : ID L_PAREN arguments_list R_PAREN\n    \n    arguments_list  : expression COMMA arguments_list\n                    | expression\n                    |\n    '
    
_lr_action_items = {'MUTABLE_VARIABLE':([0,3,5,10,16,41,117,118,125,126,127,131,138,140,141,142,147,148,152,153,154,157,160,161,163,165,166,168,],[6,6,-5,-4,35,35,6,-11,6,-19,-20,-24,-10,-21,-22,-23,6,6,-25,-31,-26,6,6,-27,-28,-29,6,-30,]),'IMMUTABLE_VARIABLE':([0,3,5,10,16,41,117,118,125,126,127,131,138,140,141,142,147,148,152,153,154,157,160,161,163,165,166,168,],[7,7,-5,-4,36,36,7,-11,7,-19,-20,-24,-10,-21,-22,-23,7,7,-25,-31,-26,7,7,-27,-28,-29,7,-30,]),'FUNCTION':([0,3,5,10,117,118,125,126,127,131,138,140,141,142,147,148,152,153,154,157,160,161,163,165,166,168,],[8,8,-5,-4,8,-11,8,-19,-20,-24,-10,-21,-22,-23,8,8,-25,-31,-26,8,8,-27,-28,-29,8,-30,]),'$end':([1,2,3,5,9,10,118,138,],[0,-1,-3,-5,-2,-4,-11,-10,]),'SEMICOLON':([4,18,19,20,21,22,23,24,25,26,27,28,29,30,44,45,48,50,51,52,53,54,55,56,57,58,59,60,61,62,63,65,66,72,88,90,92,94,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,119,121,128,129,130,136,146,149,],[10,-50,-51,-52,-53,-54,-55,-56,-57,-58,-59,-60,-61,-62,-78,-6,-47,-64,-65,-66,-67,-68,-69,-70,-71,-72,-73,-74,-75,-76,-77,-63,-7,-79,-48,-49,-83,118,-32,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,-45,-46,-82,-86,-81,140,141,142,-80,-8,-9,]),'ID':([6,7,8,35,36,37,39,46,47,49,64,71,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,116,117,118,120,125,126,127,131,132,133,137,138,140,141,142,145,147,148,152,153,154,156,157,160,161,163,165,166,168,],[11,12,13,42,43,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,123,-11,44,123,-19,-20,-24,44,44,44,-10,-21,-22,-23,44,123,123,-25,-31,-26,44,123,123,-27,-28,-29,123,-30,]),'COLON':([11,12,40,42,43,],[14,15,67,69,70,]),'L_PAREN':([13,37,39,44,46,47,49,64,71,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,116,120,123,132,133,137,145,156,],[16,47,47,71,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,71,47,47,47,47,47,]),'INT':([14,15,31,67,69,70,],[25,25,25,25,25,25,]),'STRING':([14,15,31,67,69,70,],[26,26,26,26,26,26,]),'BOOLEAN':([14,15,31,67,69,70,],[27,27,27,27,27,27,]),'CHAR':([14,15,31,67,69,70,],[28,28,28,28,28,28,]),'FLOAT':([14,15,31,67,69,70,],[29,29,29,29,29,29,]),'VOID':([14,15,31,67,69,70,],[30,30,30,30,30,30,]),'L_S_BRACKET':([14,15,31,44,67,69,70,121,123,],[31,31,31,73,31,31,31,73,73,]),'R_PAREN':([16,18,19,20,21,22,23,24,25,26,27,28,29,30,33,34,41,44,48,50,51,52,53,54,55,56,57,58,59,60,61,62,63,65,68,71,72,88,89,90,92,95,96,97,98,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,119,120,121,135,136,],[-14,-50,-51,-52,-53,-54,-55,-56,-57,-58,-59,-60,-61,-62,40,-13,-14,-78,-47,-64,-65,-66,-67,-68,-69,-70,-71,-72,-73,-74,-75,-76,-77,-63,-12,-89,-79,-48,114,-49,-83,-15,-16,119,-88,-32,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,-45,-46,-82,-86,-89,-81,-87,-80,]),'COLON_EQUALS':([17,18,19,20,21,22,23,24,25,26,27,28,29,30,32,65,72,121,123,134,136,],[37,-50,-51,-52,-53,-54,-55,-56,-57,-58,-59,-60,-61,-62,39,-63,-79,-81,137,145,-80,]),'R_S_BRACKET':([18,19,20,21,22,23,24,25,26,27,28,29,30,38,44,48,50,51,52,53,54,55,56,57,58,59,60,61,62,63,65,72,88,90,92,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,119,121,136,],[-50,-51,-52,-53,-54,-55,-56,-57,-58,-59,-60,-61,-62,65,-78,-47,-64,-65,-66,-67,-68,-69,-70,-71,-72,-73,-74,-75,-76,-77,-63,-79,-48,-49,-83,121,-32,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,-45,-46,-82,-86,-81,-80,]),'L_BRACKET':([18,19,20,21,22,23,24,25,26,27,28,29,30,37,39,44,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,90,92,94,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,119,120,121,132,133,136,137,143,144,145,155,156,158,164,],[-50,-51,-52,-53,-54,-55,-56,-57,-58,-59,-60,-61,-62,64,64,-78,64,64,-47,64,-64,-65,-66,-67,-68,-69,-70,-71,-72,-73,-74,-75,-76,-77,64,-63,64,-79,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,-48,-49,-83,117,-32,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,-45,-46,-82,64,-86,64,-81,64,64,-80,64,147,148,64,157,64,160,166,]),'COMMA':([18,19,20,21,22,23,24,25,26,27,28,29,30,34,44,48,50,51,52,53,54,55,56,57,58,59,60,61,62,63,65,72,88,90,92,93,95,96,98,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,119,121,136,],[-50,-51,-52,-53,-54,-55,-56,-57,-58,-59,-60,-61,-62,41,-78,-47,-64,-65,-66,-67,-68,-69,-70,-71,-72,-73,-74,-75,-76,-77,-63,-79,-48,-49,-83,116,-15,-16,120,-32,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,-45,-46,-82,-86,-81,-80,]),'MINUS':([37,39,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,66,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,92,93,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,119,120,121,132,133,136,137,143,144,145,146,149,156,158,],[46,46,-78,79,46,46,-47,46,-64,-65,-66,-67,-68,-69,-70,-71,-72,-73,-74,-75,-76,-77,46,79,46,-79,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,-48,79,-49,-83,79,79,79,-32,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,-45,-46,-82,46,-86,46,-81,46,46,-80,46,79,79,46,79,79,46,79,]),'NOT':([37,39,46,47,49,64,71,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,116,120,132,133,137,145,156,],[49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,]),'INT_LITERAL':([37,39,46,47,49,64,71,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,116,120,132,133,137,145,156,],[59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,]),'STRING_LITERAL':([37,39,46,47,49,64,71,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,116,120,132,133,137,145,156,],[60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,]),'BOOLEAN_LITERAL':([37,39,46,47,49,64,71,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,116,120,132,133,137,145,156,],[61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,]),'CHAR_LITERAL':([37,39,46,47,49,64,71,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,116,120,132,133,137,145,156,],[62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,]),'FLOAT_LITERAL':([37,39,46,47,49,64,71,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,116,120,132,133,137,145,156,],[63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,]),'MULTIPLY':([44,45,48,50,51,52,53,54,55,56,57,58,59,60,61,62,63,66,72,88,89,90,92,93,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,119,121,136,143,144,146,149,158,],[-78,74,-47,-64,-65,-66,-67,-68,-69,-70,-71,-72,-73,-74,-75,-76,-77,74,-79,-48,74,-49,-83,74,74,74,-32,-33,-34,-35,74,74,-38,-39,-40,-41,-42,-43,-44,-45,-46,-82,-86,-81,-80,74,74,74,74,74,]),'DIVIDE':([44,45,48,50,51,52,53,54,55,56,57,58,59,60,61,62,63,66,72,88,89,90,92,93,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,119,121,136,143,144,146,149,158,],[-78,75,-47,-64,-65,-66,-67,-68,-69,-70,-71,-72,-73,-74,-75,-76,-77,75,-79,-48,75,-49,-83,75,75,75,-32,-33,-34,-35,75,75,-38,-39,-40,-41,-42,-43,-44,-45,-46,-82,-86,-81,-80,75,75,75,75,75,]),'MOD':([44,45,48,50,51,52,53,54,55,56,57,58,59,60,61,62,63,66,72,88,89,90,92,93,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,119,121,136,143,144,146,149,158,],[-78,76,-47,-64,-65,-66,-67,-68,-69,-70,-71,-72,-73,-74,-75,-76,-77,76,-79,-48,76,-49,-83,76,76,76,-32,-33,-34,-35,76,76,-38,-39,-40,-41,-42,-43,-44,-45,-46,-82,-86,-81,-80,76,76,76,76,76,]),'POWER':([44,45,48,50,51,52,53,54,55,56,57,58,59,60,61,62,63,66,72,88,89,90,92,93,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,119,121,136,143,144,146,149,158,],[-78,77,-47,-64,-65,-66,-67,-68,-69,-70,-71,-72,-73,-74,-75,-76,-77,77,-79,-48,77,-49,-83,77,77,77,77,77,77,77,77,77,-38,-39,-40,-41,-42,-43,-44,-45,-46,-82,-86,-81,-80,77,77,77,77,77,]),'PLUS':([44,45,48,50,51,52,53,54,55,56,57,58,59,60,61,62,63,66,72,88,89,90,92,93,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,119,121,136,143,144,146,149,158,],[-78,78,-47,-64,-65,-66,-67,-68,-69,-70,-71,-72,-73,-74,-75,-76,-77,78,-79,-48,78,-49,-83,78,78,78,-32,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,-45,-46,-82,-86,-81,-80,78,78,78,78,78,]),'LESS':([44,45,48,50,51,52,53,54,55,56,57,58,59,60,61,62,63,66,72,88,89,90,92,93,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,119,121,136,143,144,146,149,158,],[-78,80,-47,-64,-65,-66,-67,-68,-69,-70,-71,-72,-73,-74,-75,-76,-77,80,-79,-48,80,-49,-83,80,80,80,80,80,80,80,80,80,None,None,None,None,None,None,-44,-45,-46,-82,-86,-81,-80,80,80,80,80,80,]),'GREATER':([44,45,48,50,51,52,53,54,55,56,57,58,59,60,61,62,63,66,72,88,89,90,92,93,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,119,121,136,143,144,146,149,158,],[-78,81,-47,-64,-65,-66,-67,-68,-69,-70,-71,-72,-73,-74,-75,-76,-77,81,-79,-48,81,-49,-83,81,81,81,81,81,81,81,81,81,None,None,None,None,None,None,-44,-45,-46,-82,-86,-81,-80,81,81,81,81,81,]),'GREATER_EQUAL':([44,45,48,50,51,52,53,54,55,56,57,58,59,60,61,62,63,66,72,88,89,90,92,93,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,119,121,136,143,144,146,149,158,],[-78,82,-47,-64,-65,-66,-67,-68,-69,-70,-71,-72,-73,-74,-75,-76,-77,82,-79,-48,82,-49,-83,82,82,82,82,82,82,82,82,82,None,None,None,None,None,None,-44,-45,-46,-82,-86,-81,-80,82,82,82,82,82,]),'LESS_EQUAL':([44,45,48,50,51,52,53,54,55,56,57,58,59,60,61,62,63,66,72,88,89,90,92,93,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,119,121,136,143,144,146,149,158,],[-78,83,-47,-64,-65,-66,-67,-68,-69,-70,-71,-72,-73,-74,-75,-76,-77,83,-79,-48,83,-49,-83,83,83,83,83,83,83,83,83,83,None,None,None,None,None,None,-44,-45,-46,-82,-86,-81,-80,83,83,83,83,83,]),'EQUALS':([44,45,48,50,51,52,53,54,55,56,57,58,59,60,61,62,63,66,72,88,89,90,92,93,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,119,121,136,143,144,146,149,158,],[-78,84,-47,-64,-65,-66,-67,-68,-69,-70,-71,-72,-73,-74,-75,-76,-77,84,-79,-48,84,-49,-83,84,84,84,84,84,84,84,84,84,None,None,None,None,None,None,-44,-45,-46,-82,-86,-81,-80,84,84,84,84,84,]),'DIFFERENT':([44,45,48,50,51,52,53,54,55,56,57,58,59,60,61,62,63,66,72,88,89,90,92,93,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,119,121,136,143,144,146,149,158,],[-78,85,-47,-64,-65,-66,-67,-68,-69,-70,-71,-72,-73,-74,-75,-76,-77,85,-79,-48,85,-49,-83,85,85,85,85,85,85,85,85,85,None,None,None,None,None,None,-44,-45,-46,-82,-86,-81,-80,85,85,85,85,85,]),'AND':([44,45,48,50,51,52,53,54,55,56,57,58,59,60,61,62,63,66,72,88,89,90,92,93,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,119,121,136,143,144,146,149,158,],[-78,86,-47,-64,-65,-66,-67,-68,-69,-70,-71,-72,-73,-74,-75,-76,-77,86,-79,-48,86,-49,-83,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,-44,-45,-46,-82,-86,-81,-80,86,86,86,86,86,]),'OR':([44,45,48,50,51,52,53,54,55,56,57,58,59,60,61,62,63,66,72,88,89,90,92,93,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,119,121,136,143,144,146,149,158,],[-78,87,-47,-64,-65,-66,-67,-68,-69,-70,-71,-72,-73,-74,-75,-76,-77,87,-79,-48,87,-49,-83,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,-45,-46,-82,-86,-81,-80,87,87,87,87,87,]),'R_BRACKET':([44,48,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,72,88,90,91,92,93,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,118,119,121,122,124,125,126,127,131,136,138,139,140,141,142,150,151,152,153,154,159,161,162,163,165,167,168,],[-78,-47,-64,-65,-66,-67,-68,-69,-70,-71,-72,-73,-74,-75,-76,-77,92,-79,-48,-49,115,-83,-85,-32,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,-45,-46,-82,-11,-86,-81,-84,138,-18,-19,-20,-24,-80,-10,-17,-21,-22,-23,152,153,-25,-31,-26,161,-27,163,-28,-29,168,-30,]),'IF':([117,118,125,126,127,131,138,140,141,142,147,148,152,153,154,155,157,160,161,163,164,165,166,168,],[132,-11,132,-19,-20,-24,-10,-21,-22,-23,132,132,-25,-31,-26,156,132,132,-27,-28,156,-29,132,-30,]),'WHILE':([117,118,125,126,127,131,138,140,141,142,147,148,152,153,154,157,160,161,163,165,166,168,],[133,-11,133,-19,-20,-24,-10,-21,-22,-23,133,133,-25,-31,-26,133,133,-27,-28,-29,133,-30,]),'ELSE':([152,163,],[155,164,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'start':([0,],[1,]),'top_level_declarations':([0,3,],[2,9,]),'top_level_declaration':([0,3,],[3,3,]),'create_variable':([0,3,117,125,147,148,157,160,166,],[4,4,129,129,129,129,129,129,129,]),'function':([0,3,117,125,147,148,157,160,166,],[5,5,131,131,131,131,131,131,131,]),'type':([14,15,31,67,69,70,],[17,32,38,94,95,96,]),'type_int':([14,15,31,67,69,70,],[18,18,18,18,18,18,]),'type_string':([14,15,31,67,69,70,],[19,19,19,19,19,19,]),'type_boolean':([14,15,31,67,69,70,],[20,20,20,20,20,20,]),'type_char':([14,15,31,67,69,70,],[21,21,21,21,21,21,]),'type_float':([14,15,31,67,69,70,],[22,22,22,22,22,22,]),'type_void':([14,15,31,67,69,70,],[23,23,23,23,23,23,]),'type_array':([14,15,31,67,69,70,],[24,24,24,24,24,24,]),'parameter_list':([16,41,],[33,68,]),'parameter':([16,41,],[34,34,]),'expression':([37,39,46,47,49,64,71,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,116,120,132,133,137,145,156,],[45,66,88,89,90,93,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,93,98,143,144,146,149,158,]),'value':([37,39,46,47,49,64,71,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,116,120,132,133,137,145,156,],[48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,]),'literal_int':([37,39,46,47,49,64,71,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,116,120,132,133,137,145,156,],[50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,]),'literal_string':([37,39,46,47,49,64,71,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,116,120,132,133,137,145,156,],[51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,]),'literal_boolean':([37,39,46,47,49,64,71,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,116,120,132,133,137,145,156,],[52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,]),'literal_char':([37,39,46,47,49,64,71,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,116,120,132,133,137,145,156,],[53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,]),'literal_float':([37,39,46,47,49,64,71,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,116,120,132,133,137,145,156,],[54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,]),'identifier':([37,39,46,47,49,64,71,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,116,120,132,133,137,145,156,],[55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,]),'function_call':([37,39,46,47,49,64,71,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,116,117,120,125,132,133,137,145,147,148,156,157,160,166,],[56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,130,56,130,56,56,56,56,130,130,56,130,130,130,]),'index':([37,39,46,47,49,64,71,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,116,117,120,125,132,133,137,145,147,148,156,157,160,166,],[57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,134,57,134,57,57,57,57,134,134,57,134,134,134,]),'array':([37,39,46,47,49,64,71,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,116,120,132,133,137,145,156,],[58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,]),'temp':([44,121,123,],[72,136,72,]),'array_literal':([64,116,],[91,122,]),'arguments_list':([71,120,],[97,135,]),'block':([117,125,147,148,157,160,166,],[124,139,150,151,159,162,167,]),'statement':([117,125,147,148,157,160,166,],[125,125,125,125,125,125,125,]),'if_statement':([117,125,147,148,157,160,166,],[126,126,126,126,126,126,126,]),'while_statement':([117,125,147,148,157,160,166,],[127,127,127,127,127,127,127,]),'assign':([117,125,147,148,157,160,166,],[128,128,128,128,128,128,128,]),'else_if_statements':([152,163,],[154,165,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> start","S'",1,None,None,None),
  ('start -> top_level_declarations','start',1,'p_start','my_parser.py',18),
  ('top_level_declarations -> top_level_declaration top_level_declarations','top_level_declarations',2,'p_top_level_declarations','my_parser.py',24),
  ('top_level_declarations -> top_level_declaration','top_level_declarations',1,'p_top_level_declarations','my_parser.py',25),
  ('top_level_declaration -> create_variable SEMICOLON','top_level_declaration',2,'p_top_level_declaration','my_parser.py',35),
  ('top_level_declaration -> function','top_level_declaration',1,'p_top_level_declaration','my_parser.py',36),
  ('create_variable -> MUTABLE_VARIABLE ID COLON type COLON_EQUALS expression','create_variable',6,'p_create_variable','my_parser.py',42),
  ('create_variable -> IMMUTABLE_VARIABLE ID COLON type COLON_EQUALS expression','create_variable',6,'p_create_variable','my_parser.py',43),
  ('assign -> ID COLON_EQUALS expression','assign',3,'p_assign','my_parser.py',52),
  ('assign -> index COLON_EQUALS expression','assign',3,'p_assign','my_parser.py',53),
  ('function -> FUNCTION ID L_PAREN parameter_list R_PAREN COLON type L_BRACKET block R_BRACKET','function',10,'p_function','my_parser.py',63),
  ('function -> FUNCTION ID L_PAREN parameter_list R_PAREN COLON type SEMICOLON','function',8,'p_function','my_parser.py',64),
  ('parameter_list -> parameter COMMA parameter_list','parameter_list',3,'p_parameter_list','my_parser.py',73),
  ('parameter_list -> parameter','parameter_list',1,'p_parameter_list','my_parser.py',74),
  ('parameter_list -> <empty>','parameter_list',0,'p_parameter_list','my_parser.py',75),
  ('parameter -> MUTABLE_VARIABLE ID COLON type','parameter',4,'p_parameter','my_parser.py',86),
  ('parameter -> IMMUTABLE_VARIABLE ID COLON type','parameter',4,'p_parameter','my_parser.py',87),
  ('block -> statement block','block',2,'p_block','my_parser.py',96),
  ('block -> statement','block',1,'p_block','my_parser.py',97),
  ('statement -> if_statement','statement',1,'p_statement','my_parser.py',106),
  ('statement -> while_statement','statement',1,'p_statement','my_parser.py',107),
  ('statement -> assign SEMICOLON','statement',2,'p_statement','my_parser.py',108),
  ('statement -> create_variable SEMICOLON','statement',2,'p_statement','my_parser.py',109),
  ('statement -> function_call SEMICOLON','statement',2,'p_statement','my_parser.py',110),
  ('statement -> function','statement',1,'p_statement','my_parser.py',111),
  ('if_statement -> IF expression L_BRACKET block R_BRACKET','if_statement',5,'p_if_statement','my_parser.py',117),
  ('if_statement -> IF expression L_BRACKET block R_BRACKET else_if_statements','if_statement',6,'p_if_statement','my_parser.py',118),
  ('if_statement -> IF expression L_BRACKET block R_BRACKET ELSE L_BRACKET block R_BRACKET','if_statement',9,'p_if_statement','my_parser.py',119),
  ('else_if_statements -> ELSE IF expression L_BRACKET block R_BRACKET','else_if_statements',6,'p_else_if_statements','my_parser.py',130),
  ('else_if_statements -> ELSE IF expression L_BRACKET block R_BRACKET else_if_statements','else_if_statements',7,'p_else_if_statements','my_parser.py',131),
  ('else_if_statements -> ELSE IF expression L_BRACKET block R_BRACKET ELSE L_BRACKET block R_BRACKET','else_if_statements',10,'p_else_if_statements','my_parser.py',132),
  ('while_statement -> WHILE expression L_BRACKET block R_BRACKET','while_statement',5,'p_while_statement','my_parser.py',143),
  ('expression -> expression MULTIPLY expression','expression',3,'p_expression','my_parser.py',149),
  ('expression -> expression DIVIDE expression','expression',3,'p_expression','my_parser.py',150),
  ('expression -> expression MOD expression','expression',3,'p_expression','my_parser.py',151),
  ('expression -> expression POWER expression','expression',3,'p_expression','my_parser.py',152),
  ('expression -> expression PLUS expression','expression',3,'p_expression','my_parser.py',153),
  ('expression -> expression MINUS expression','expression',3,'p_expression','my_parser.py',154),
  ('expression -> expression LESS expression','expression',3,'p_expression','my_parser.py',155),
  ('expression -> expression GREATER expression','expression',3,'p_expression','my_parser.py',156),
  ('expression -> expression GREATER_EQUAL expression','expression',3,'p_expression','my_parser.py',157),
  ('expression -> expression LESS_EQUAL expression','expression',3,'p_expression','my_parser.py',158),
  ('expression -> expression EQUALS expression','expression',3,'p_expression','my_parser.py',159),
  ('expression -> expression DIFFERENT expression','expression',3,'p_expression','my_parser.py',160),
  ('expression -> expression AND expression','expression',3,'p_expression','my_parser.py',161),
  ('expression -> expression OR expression','expression',3,'p_expression','my_parser.py',162),
  ('expression -> L_PAREN expression R_PAREN','expression',3,'p_expression','my_parser.py',163),
  ('expression -> value','expression',1,'p_expression','my_parser.py',164),
  ('expression -> MINUS expression','expression',2,'p_expression_uminus','my_parser.py',174),
  ('expression -> NOT expression','expression',2,'p_expression_not','my_parser.py',178),
  ('type -> type_int','type',1,'p_type','my_parser.py',183),
  ('type -> type_string','type',1,'p_type','my_parser.py',184),
  ('type -> type_boolean','type',1,'p_type','my_parser.py',185),
  ('type -> type_char','type',1,'p_type','my_parser.py',186),
  ('type -> type_float','type',1,'p_type','my_parser.py',187),
  ('type -> type_void','type',1,'p_type','my_parser.py',188),
  ('type -> type_array','type',1,'p_type','my_parser.py',189),
  ('type_int -> INT','type_int',1,'p_type_int','my_parser.py',195),
  ('type_string -> STRING','type_string',1,'p_type_string','my_parser.py',201),
  ('type_boolean -> BOOLEAN','type_boolean',1,'p_type_boolean','my_parser.py',207),
  ('type_char -> CHAR','type_char',1,'p_type_char','my_parser.py',213),
  ('type_float -> FLOAT','type_float',1,'p_type_float','my_parser.py',219),
  ('type_void -> VOID','type_void',1,'p_type_void','my_parser.py',225),
  ('type_array -> L_S_BRACKET type R_S_BRACKET','type_array',3,'p_type_array','my_parser.py',231),
  ('value -> literal_int','value',1,'p_value','my_parser.py',237),
  ('value -> literal_string','value',1,'p_value','my_parser.py',238),
  ('value -> literal_boolean','value',1,'p_value','my_parser.py',239),
  ('value -> literal_char','value',1,'p_value','my_parser.py',240),
  ('value -> literal_float','value',1,'p_value','my_parser.py',241),
  ('value -> identifier','value',1,'p_value','my_parser.py',242),
  ('value -> function_call','value',1,'p_value','my_parser.py',243),
  ('value -> index','value',1,'p_value','my_parser.py',244),
  ('value -> array','value',1,'p_value','my_parser.py',245),
  ('literal_int -> INT_LITERAL','literal_int',1,'p_literal_int','my_parser.py',251),
  ('literal_string -> STRING_LITERAL','literal_string',1,'p_literal_string','my_parser.py',257),
  ('literal_boolean -> BOOLEAN_LITERAL','literal_boolean',1,'p_literal_boolean','my_parser.py',263),
  ('literal_char -> CHAR_LITERAL','literal_char',1,'p_literal_char','my_parser.py',269),
  ('literal_float -> FLOAT_LITERAL','literal_float',1,'p_literal_float','my_parser.py',275),
  ('identifier -> ID','identifier',1,'p_identifier','my_parser.py',281),
  ('index -> ID temp','index',2,'p_index','my_parser.py',287),
  ('temp -> L_S_BRACKET expression R_S_BRACKET temp','temp',4,'p_index','my_parser.py',288),
  ('temp -> L_S_BRACKET expression R_S_BRACKET','temp',3,'p_index','my_parser.py',289),
  ('array -> L_BRACKET array_literal R_BRACKET','array',3,'p_array','my_parser.py',301),
  ('array -> L_BRACKET R_BRACKET','array',2,'p_array','my_parser.py',302),
  ('array_literal -> expression COMMA array_literal','array_literal',3,'p_array_literal','my_parser.py',311),
  ('array_literal -> expression','array_literal',1,'p_array_literal','my_parser.py',312),
  ('function_call -> ID L_PAREN arguments_list R_PAREN','function_call',4,'p_function_call','my_parser.py',321),
  ('arguments_list -> expression COMMA arguments_list','arguments_list',3,'p_arguments_list','my_parser.py',327),
  ('arguments_list -> expression','arguments_list',1,'p_arguments_list','my_parser.py',328),
  ('arguments_list -> <empty>','arguments_list',0,'p_arguments_list','my_parser.py',329),
]
