
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'leftPLUSMINUSleftMULTIPLYDIVIDEMODrightPOWERnonassocLESSGREATERLESS_EQUALGREATER_EQUALEQUALSDIFFERENTleftANDleftORrightNOTrightUMINUSAND BOOLEAN BOOLEAN_LITERAL CHAR CHAR_LITERAL COLON COLON_EQUALS COMMA DIFFERENT DIVIDE DOUBLE DOUBLE_LITERAL ELSE EQUALS FLOAT FLOAT_LITERAL FUNCTION GREATER GREATER_EQUAL ID IF IMMUTABLE_VARIABLE INT INT_LITERAL LESS LESS_EQUAL L_BRACKET L_PAREN L_S_BRACKET MINUS MOD MULTIPLY MUTABLE_VARIABLE NOT OR PLUS POWER R_BRACKET R_PAREN R_S_BRACKET SEMICOLON STRING STRING_LITERAL VOID WHILE\n    start : top_level_declarations\n    \n    top_level_declarations  : top_level_declaration top_level_declarations\n                            | top_level_declaration\n    \n    top_level_declaration   : create_variable SEMICOLON\n                            | assign SEMICOLON\n                            | function\n    \n    create_variable : MUTABLE_VARIABLE ID COLON type COLON_EQUALS expression\n                    | IMMUTABLE_VARIABLE ID COLON type COLON_EQUALS expression   \n    \n    assign : ID COLON_EQUALS expression\n    \n    function    : FUNCTION ID L_PAREN parameter_list R_PAREN COLON type L_BRACKET block R_BRACKET\n                | FUNCTION ID L_PAREN parameter_list R_PAREN COLON type SEMICOLON\n    \n    parameter_list  : parameter COMMA parameter_list\n                    | parameter\n    \n    parameter   : MUTABLE_VARIABLE ID COLON type\n                | IMMUTABLE_VARIABLE ID COLON type\n     \n    block   : statement block \n            | statement\n    \n    statement   : if_statement\n                | while_statement\n                | assign SEMICOLON\n                | create_variable SEMICOLON\n                | function_call SEMICOLON\n    \n    if_statement    : IF expression L_BRACKET block R_BRACKET\n                    | IF expression L_BRACKET block R_BRACKET else_if_statements\n                    | IF expression L_BRACKET block R_BRACKET ELSE L_BRACKET block R_BRACKET\n    \n    else_if_statements  : ELSE IF expression L_BRACKET block R_BRACKET\n                        | ELSE IF expression L_BRACKET block R_BRACKET else_if_statements\n                        | ELSE IF expression L_BRACKET block R_BRACKET ELSE L_BRACKET block R_BRACKET\n    \n    while_statement : WHILE expression L_BRACKET block R_BRACKET\n    \n    expression  : expression MULTIPLY expression\n                | expression DIVIDE expression\n                | expression MOD expression\n                | expression POWER expression\n                | expression PLUS expression\n                | expression MINUS expression\n                | expression LESS expression\n                | expression GREATER expression\n                | expression GREATER_EQUAL expression\n                | expression LESS_EQUAL expression\n                | expression EQUALS expression\n                | expression DIFFERENT expression\n                | expression AND expression\n                | expression OR expression\n                | L_PAREN expression R_PAREN\n                | value\n    expression : MINUS expression %prec UMINUSexpression : NOT expression\n    type    : type_int\n            | type_double\n            | type_string\n            | type_boolean\n            | type_char\n            | type_float\n            | type_void\n            | type_array\n    \n    type_int : INT\n    \n    type_double : DOUBLE\n    \n    type_string : STRING\n    \n    type_boolean : BOOLEAN\n    \n    type_char : CHAR\n    \n    type_float : FLOAT\n    \n    type_void : VOID\n    \n    type_array : L_S_BRACKET type R_S_BRACKET\n    \n    value   : literal_int\n            | literal_double\n            | literal_string\n            | literal_boolean\n            | literal_char\n            | literal_float\n            | identifier\n            | function_call\n            | index\n            | array\n    \n    literal_int : INT_LITERAL\n    \n    literal_double : DOUBLE_LITERAL\n    \n    literal_string : STRING_LITERAL\n    \n    literal_boolean : BOOLEAN_LITERAL\n    \n    literal_char : CHAR_LITERAL\n    \n    literal_float : FLOAT_LITERAL\n    \n    identifier  : ID\n    \n    index   : ID temp\n    temp    : L_S_BRACKET expression R_S_BRACKET temp\n            | L_S_BRACKET expression R_S_BRACKET\n    \n    array   : L_BRACKET array_literal R_BRACKET\n            | L_BRACKET R_BRACKET\n    \n    array_literal   : expression COMMA array_literal\n                    | expression\n    \n    function_call : ID L_PAREN arguments_list R_PAREN\n    \n    arguments_list  : expression COMMA arguments_list\n                    | expression\n                    |\n    '
    
_lr_action_items = {'MUTABLE_VARIABLE':([0,3,6,12,13,43,113,132,133,136,137,138,144,146,147,148,151,152,155,156,157,160,163,164,166,168,169,171,],[7,7,-6,-4,-5,87,87,7,-11,7,-18,-19,-10,-20,-21,-22,7,7,-23,-29,-24,7,7,-25,-26,-27,7,-28,]),'IMMUTABLE_VARIABLE':([0,3,6,12,13,43,113,132,133,136,137,138,144,146,147,148,151,152,155,156,157,160,163,164,166,168,169,171,],[9,9,-6,-4,-5,88,88,9,-11,9,-18,-19,-10,-20,-21,-22,9,9,-23,-29,-24,9,9,-25,-26,-27,9,-28,]),'ID':([0,3,6,7,9,10,12,13,15,21,22,24,41,61,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,87,88,89,110,111,119,132,133,136,137,138,142,143,144,146,147,148,151,152,155,156,157,159,160,163,164,166,168,169,171,],[8,8,-6,14,16,17,-4,-5,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,114,115,19,19,19,19,134,-11,134,-18,-19,19,19,-10,-20,-21,-22,134,134,-23,-29,-24,19,134,134,-25,-26,-27,134,-28,]),'FUNCTION':([0,3,6,12,13,133,144,],[10,10,-6,-4,-5,-11,-10,]),'$end':([1,2,3,6,11,12,13,133,144,],[0,-1,-3,-6,-2,-4,-5,-11,-10,]),'SEMICOLON':([4,5,19,20,23,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,62,78,80,82,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,116,117,118,120,122,128,129,139,140,141,],[12,13,-80,-9,-45,-64,-65,-66,-67,-68,-69,-70,-71,-72,-73,-74,-75,-76,-77,-78,-79,-48,-49,-50,-51,-52,-53,-54,-55,-56,-57,-58,-59,-60,-61,-62,-81,-46,-47,-85,-30,-31,-32,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,-84,-7,-63,-88,-83,-8,-82,133,146,147,148,]),'COLON_EQUALS':([8,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,84,117,134,],[15,89,-48,-49,-50,-51,-52,-53,-54,-55,-56,-57,-58,-59,-60,-61,-62,111,-63,15,]),'COLON':([14,16,112,114,115,],[18,42,123,125,126,]),'L_PAREN':([15,17,19,21,22,24,41,61,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,89,110,111,119,134,142,143,159,],[22,43,61,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,61,22,22,22,]),'MINUS':([15,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,82,83,89,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,116,118,119,120,122,128,142,143,149,150,159,161,],[21,-80,69,21,21,-45,21,-64,-65,-66,-67,-68,-69,-70,-71,-72,-73,-74,-75,-76,-77,-78,-79,21,21,-81,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,-46,69,-47,-85,69,21,69,69,-30,-31,-32,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,-84,21,21,69,-88,21,-83,69,-82,21,21,69,69,21,69,]),'NOT':([15,21,22,24,41,61,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,89,110,111,119,142,143,159,],[24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,]),'INT_LITERAL':([15,21,22,24,41,61,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,89,110,111,119,142,143,159,],[35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,]),'DOUBLE_LITERAL':([15,21,22,24,41,61,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,89,110,111,119,142,143,159,],[36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,]),'STRING_LITERAL':([15,21,22,24,41,61,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,89,110,111,119,142,143,159,],[37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,]),'BOOLEAN_LITERAL':([15,21,22,24,41,61,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,89,110,111,119,142,143,159,],[38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,]),'CHAR_LITERAL':([15,21,22,24,41,61,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,89,110,111,119,142,143,159,],[39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,]),'FLOAT_LITERAL':([15,21,22,24,41,61,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,89,110,111,119,142,143,159,],[40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,]),'L_BRACKET':([15,19,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,80,82,89,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,117,118,119,120,128,129,142,143,149,150,158,159,161,167,],[41,-80,41,41,-45,41,-64,-65,-66,-67,-68,-69,-70,-71,-72,-73,-74,-75,-76,-77,-78,-79,41,-48,-49,-50,-51,-52,-53,-54,-55,-56,-57,-58,-59,-60,-61,-62,41,-81,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,-46,-47,-85,41,-30,-31,-32,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,-84,41,41,-63,-88,41,-83,-82,132,41,41,151,152,160,41,163,169,]),'INT':([18,42,60,123,125,126,],[53,53,53,53,53,53,]),'DOUBLE':([18,42,60,123,125,126,],[54,54,54,54,54,54,]),'STRING':([18,42,60,123,125,126,],[55,55,55,55,55,55,]),'BOOLEAN':([18,42,60,123,125,126,],[56,56,56,56,56,56,]),'CHAR':([18,42,60,123,125,126,],[57,57,57,57,57,57,]),'FLOAT':([18,42,60,123,125,126,],[58,58,58,58,58,58,]),'VOID':([18,42,60,123,125,126,],[59,59,59,59,59,59,]),'L_S_BRACKET':([18,19,42,60,120,123,125,126,],[60,63,60,60,63,60,60,60,]),'MULTIPLY':([19,20,23,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,62,78,79,80,82,83,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,116,118,120,122,128,149,150,161,],[-80,64,-45,-64,-65,-66,-67,-68,-69,-70,-71,-72,-73,-74,-75,-76,-77,-78,-79,-81,-46,64,-47,-85,64,64,64,-30,-31,-32,-33,64,64,-36,-37,-38,-39,-40,-41,-42,-43,-44,-84,64,-88,-83,64,-82,64,64,64,]),'DIVIDE':([19,20,23,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,62,78,79,80,82,83,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,116,118,120,122,128,149,150,161,],[-80,65,-45,-64,-65,-66,-67,-68,-69,-70,-71,-72,-73,-74,-75,-76,-77,-78,-79,-81,-46,65,-47,-85,65,65,65,-30,-31,-32,-33,65,65,-36,-37,-38,-39,-40,-41,-42,-43,-44,-84,65,-88,-83,65,-82,65,65,65,]),'MOD':([19,20,23,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,62,78,79,80,82,83,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,116,118,120,122,128,149,150,161,],[-80,66,-45,-64,-65,-66,-67,-68,-69,-70,-71,-72,-73,-74,-75,-76,-77,-78,-79,-81,-46,66,-47,-85,66,66,66,-30,-31,-32,-33,66,66,-36,-37,-38,-39,-40,-41,-42,-43,-44,-84,66,-88,-83,66,-82,66,66,66,]),'POWER':([19,20,23,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,62,78,79,80,82,83,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,116,118,120,122,128,149,150,161,],[-80,67,-45,-64,-65,-66,-67,-68,-69,-70,-71,-72,-73,-74,-75,-76,-77,-78,-79,-81,-46,67,-47,-85,67,67,67,67,67,67,67,67,67,-36,-37,-38,-39,-40,-41,-42,-43,-44,-84,67,-88,-83,67,-82,67,67,67,]),'PLUS':([19,20,23,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,62,78,79,80,82,83,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,116,118,120,122,128,149,150,161,],[-80,68,-45,-64,-65,-66,-67,-68,-69,-70,-71,-72,-73,-74,-75,-76,-77,-78,-79,-81,-46,68,-47,-85,68,68,68,-30,-31,-32,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,-84,68,-88,-83,68,-82,68,68,68,]),'LESS':([19,20,23,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,62,78,79,80,82,83,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,116,118,120,122,128,149,150,161,],[-80,70,-45,-64,-65,-66,-67,-68,-69,-70,-71,-72,-73,-74,-75,-76,-77,-78,-79,-81,-46,70,-47,-85,70,70,70,70,70,70,70,70,70,None,None,None,None,None,None,-42,-43,-44,-84,70,-88,-83,70,-82,70,70,70,]),'GREATER':([19,20,23,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,62,78,79,80,82,83,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,116,118,120,122,128,149,150,161,],[-80,71,-45,-64,-65,-66,-67,-68,-69,-70,-71,-72,-73,-74,-75,-76,-77,-78,-79,-81,-46,71,-47,-85,71,71,71,71,71,71,71,71,71,None,None,None,None,None,None,-42,-43,-44,-84,71,-88,-83,71,-82,71,71,71,]),'GREATER_EQUAL':([19,20,23,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,62,78,79,80,82,83,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,116,118,120,122,128,149,150,161,],[-80,72,-45,-64,-65,-66,-67,-68,-69,-70,-71,-72,-73,-74,-75,-76,-77,-78,-79,-81,-46,72,-47,-85,72,72,72,72,72,72,72,72,72,None,None,None,None,None,None,-42,-43,-44,-84,72,-88,-83,72,-82,72,72,72,]),'LESS_EQUAL':([19,20,23,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,62,78,79,80,82,83,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,116,118,120,122,128,149,150,161,],[-80,73,-45,-64,-65,-66,-67,-68,-69,-70,-71,-72,-73,-74,-75,-76,-77,-78,-79,-81,-46,73,-47,-85,73,73,73,73,73,73,73,73,73,None,None,None,None,None,None,-42,-43,-44,-84,73,-88,-83,73,-82,73,73,73,]),'EQUALS':([19,20,23,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,62,78,79,80,82,83,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,116,118,120,122,128,149,150,161,],[-80,74,-45,-64,-65,-66,-67,-68,-69,-70,-71,-72,-73,-74,-75,-76,-77,-78,-79,-81,-46,74,-47,-85,74,74,74,74,74,74,74,74,74,None,None,None,None,None,None,-42,-43,-44,-84,74,-88,-83,74,-82,74,74,74,]),'DIFFERENT':([19,20,23,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,62,78,79,80,82,83,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,116,118,120,122,128,149,150,161,],[-80,75,-45,-64,-65,-66,-67,-68,-69,-70,-71,-72,-73,-74,-75,-76,-77,-78,-79,-81,-46,75,-47,-85,75,75,75,75,75,75,75,75,75,None,None,None,None,None,None,-42,-43,-44,-84,75,-88,-83,75,-82,75,75,75,]),'AND':([19,20,23,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,62,78,79,80,82,83,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,116,118,120,122,128,149,150,161,],[-80,76,-45,-64,-65,-66,-67,-68,-69,-70,-71,-72,-73,-74,-75,-76,-77,-78,-79,-81,-46,76,-47,-85,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,-42,-43,-44,-84,76,-88,-83,76,-82,76,76,76,]),'OR':([19,20,23,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,62,78,79,80,82,83,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,116,118,120,122,128,149,150,161,],[-80,77,-45,-64,-65,-66,-67,-68,-69,-70,-71,-72,-73,-74,-75,-76,-77,-78,-79,-81,-46,77,-47,-85,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,-43,-44,-84,77,-88,-83,77,-82,77,77,77,]),'R_PAREN':([19,23,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,61,62,78,79,80,82,85,86,91,92,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,117,118,119,120,124,127,128,130,131,],[-80,-45,-64,-65,-66,-67,-68,-69,-70,-71,-72,-73,-74,-75,-76,-77,-78,-79,-48,-49,-50,-51,-52,-53,-54,-55,-56,-57,-58,-59,-60,-61,-62,-91,-81,-46,108,-47,-85,112,-13,118,-90,-30,-31,-32,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,-84,-63,-88,-91,-83,-12,-89,-82,-14,-15,]),'COMMA':([19,23,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,62,78,80,82,83,86,92,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,117,118,120,128,130,131,],[-80,-45,-64,-65,-66,-67,-68,-69,-70,-71,-72,-73,-74,-75,-76,-77,-78,-79,-48,-49,-50,-51,-52,-53,-54,-55,-56,-57,-58,-59,-60,-61,-62,-81,-46,-47,-85,110,113,119,-30,-31,-32,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,-84,-63,-88,-83,-82,-14,-15,]),'R_BRACKET':([19,23,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,62,78,80,81,82,83,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,118,120,121,128,135,136,137,138,145,146,147,148,153,154,155,156,157,162,164,165,166,168,170,171,],[-80,-45,-64,-65,-66,-67,-68,-69,-70,-71,-72,-73,-74,-75,-76,-77,-78,-79,82,-81,-46,-47,109,-85,-87,-30,-31,-32,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,-84,-88,-83,-86,-82,144,-17,-18,-19,-16,-20,-21,-22,155,156,-23,-29,-24,164,-25,166,-26,-27,171,-28,]),'R_S_BRACKET':([19,23,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,62,78,80,82,90,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,117,118,120,128,],[-80,-45,-64,-65,-66,-67,-68,-69,-70,-71,-72,-73,-74,-75,-76,-77,-78,-79,-48,-49,-50,-51,-52,-53,-54,-55,-56,-57,-58,-59,-60,-61,-62,-81,-46,-47,-85,117,120,-30,-31,-32,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,-84,-63,-88,-83,-82,]),'IF':([132,136,137,138,146,147,148,151,152,155,156,157,158,160,163,164,166,167,168,169,171,],[142,142,-18,-19,-20,-21,-22,142,142,-23,-29,-24,159,142,142,-25,-26,159,-27,142,-28,]),'WHILE':([132,136,137,138,146,147,148,151,152,155,156,157,160,163,164,166,168,169,171,],[143,143,-18,-19,-20,-21,-22,143,143,-23,-29,-24,143,143,-25,-26,-27,143,-28,]),'ELSE':([155,166,],[158,167,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'start':([0,],[1,]),'top_level_declarations':([0,3,],[2,11,]),'top_level_declaration':([0,3,],[3,3,]),'create_variable':([0,3,132,136,151,152,160,163,169,],[4,4,140,140,140,140,140,140,140,]),'assign':([0,3,132,136,151,152,160,163,169,],[5,5,139,139,139,139,139,139,139,]),'function':([0,3,],[6,6,]),'expression':([15,21,22,24,41,61,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,89,110,111,119,142,143,159,],[20,78,79,80,83,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,116,83,122,92,149,150,161,]),'value':([15,21,22,24,41,61,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,89,110,111,119,142,143,159,],[23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,]),'literal_int':([15,21,22,24,41,61,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,89,110,111,119,142,143,159,],[25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,]),'literal_double':([15,21,22,24,41,61,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,89,110,111,119,142,143,159,],[26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,]),'literal_string':([15,21,22,24,41,61,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,89,110,111,119,142,143,159,],[27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,]),'literal_boolean':([15,21,22,24,41,61,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,89,110,111,119,142,143,159,],[28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,]),'literal_char':([15,21,22,24,41,61,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,89,110,111,119,142,143,159,],[29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,]),'literal_float':([15,21,22,24,41,61,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,89,110,111,119,142,143,159,],[30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,]),'identifier':([15,21,22,24,41,61,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,89,110,111,119,142,143,159,],[31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,]),'function_call':([15,21,22,24,41,61,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,89,110,111,119,132,136,142,143,151,152,159,160,163,169,],[32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,141,141,32,32,141,141,32,141,141,141,]),'index':([15,21,22,24,41,61,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,89,110,111,119,142,143,159,],[33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,]),'array':([15,21,22,24,41,61,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,89,110,111,119,142,143,159,],[34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,]),'type':([18,42,60,123,125,126,],[44,84,90,129,130,131,]),'type_int':([18,42,60,123,125,126,],[45,45,45,45,45,45,]),'type_double':([18,42,60,123,125,126,],[46,46,46,46,46,46,]),'type_string':([18,42,60,123,125,126,],[47,47,47,47,47,47,]),'type_boolean':([18,42,60,123,125,126,],[48,48,48,48,48,48,]),'type_char':([18,42,60,123,125,126,],[49,49,49,49,49,49,]),'type_float':([18,42,60,123,125,126,],[50,50,50,50,50,50,]),'type_void':([18,42,60,123,125,126,],[51,51,51,51,51,51,]),'type_array':([18,42,60,123,125,126,],[52,52,52,52,52,52,]),'temp':([19,120,],[62,128,]),'array_literal':([41,110,],[81,121,]),'parameter_list':([43,113,],[85,124,]),'parameter':([43,113,],[86,86,]),'arguments_list':([61,119,],[91,127,]),'block':([132,136,151,152,160,163,169,],[135,145,153,154,162,165,170,]),'statement':([132,136,151,152,160,163,169,],[136,136,136,136,136,136,136,]),'if_statement':([132,136,151,152,160,163,169,],[137,137,137,137,137,137,137,]),'while_statement':([132,136,151,152,160,163,169,],[138,138,138,138,138,138,138,]),'else_if_statements':([155,166,],[157,168,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> start","S'",1,None,None,None),
  ('start -> top_level_declarations','start',1,'p_start','mparser.py',17),
  ('top_level_declarations -> top_level_declaration top_level_declarations','top_level_declarations',2,'p_top_level_declarations','mparser.py',23),
  ('top_level_declarations -> top_level_declaration','top_level_declarations',1,'p_top_level_declarations','mparser.py',24),
  ('top_level_declaration -> create_variable SEMICOLON','top_level_declaration',2,'p_top_level_declaration','mparser.py',34),
  ('top_level_declaration -> assign SEMICOLON','top_level_declaration',2,'p_top_level_declaration','mparser.py',35),
  ('top_level_declaration -> function','top_level_declaration',1,'p_top_level_declaration','mparser.py',36),
  ('create_variable -> MUTABLE_VARIABLE ID COLON type COLON_EQUALS expression','create_variable',6,'p_create_variable','mparser.py',42),
  ('create_variable -> IMMUTABLE_VARIABLE ID COLON type COLON_EQUALS expression','create_variable',6,'p_create_variable','mparser.py',43),
  ('assign -> ID COLON_EQUALS expression','assign',3,'p_assign','mparser.py',52),
  ('function -> FUNCTION ID L_PAREN parameter_list R_PAREN COLON type L_BRACKET block R_BRACKET','function',10,'p_function','mparser.py',58),
  ('function -> FUNCTION ID L_PAREN parameter_list R_PAREN COLON type SEMICOLON','function',8,'p_function','mparser.py',59),
  ('parameter_list -> parameter COMMA parameter_list','parameter_list',3,'p_parameter_list','mparser.py',68),
  ('parameter_list -> parameter','parameter_list',1,'p_parameter_list','mparser.py',69),
  ('parameter -> MUTABLE_VARIABLE ID COLON type','parameter',4,'p_parameter','mparser.py',78),
  ('parameter -> IMMUTABLE_VARIABLE ID COLON type','parameter',4,'p_parameter','mparser.py',79),
  ('block -> statement block','block',2,'p_block','mparser.py',88),
  ('block -> statement','block',1,'p_block','mparser.py',89),
  ('statement -> if_statement','statement',1,'p_statement','mparser.py',98),
  ('statement -> while_statement','statement',1,'p_statement','mparser.py',99),
  ('statement -> assign SEMICOLON','statement',2,'p_statement','mparser.py',100),
  ('statement -> create_variable SEMICOLON','statement',2,'p_statement','mparser.py',101),
  ('statement -> function_call SEMICOLON','statement',2,'p_statement','mparser.py',102),
  ('if_statement -> IF expression L_BRACKET block R_BRACKET','if_statement',5,'p_if_statement','mparser.py',108),
  ('if_statement -> IF expression L_BRACKET block R_BRACKET else_if_statements','if_statement',6,'p_if_statement','mparser.py',109),
  ('if_statement -> IF expression L_BRACKET block R_BRACKET ELSE L_BRACKET block R_BRACKET','if_statement',9,'p_if_statement','mparser.py',110),
  ('else_if_statements -> ELSE IF expression L_BRACKET block R_BRACKET','else_if_statements',6,'p_else_if_statements','mparser.py',121),
  ('else_if_statements -> ELSE IF expression L_BRACKET block R_BRACKET else_if_statements','else_if_statements',7,'p_else_if_statements','mparser.py',122),
  ('else_if_statements -> ELSE IF expression L_BRACKET block R_BRACKET ELSE L_BRACKET block R_BRACKET','else_if_statements',10,'p_else_if_statements','mparser.py',123),
  ('while_statement -> WHILE expression L_BRACKET block R_BRACKET','while_statement',5,'p_while_statement','mparser.py',134),
  ('expression -> expression MULTIPLY expression','expression',3,'p_expression','mparser.py',140),
  ('expression -> expression DIVIDE expression','expression',3,'p_expression','mparser.py',141),
  ('expression -> expression MOD expression','expression',3,'p_expression','mparser.py',142),
  ('expression -> expression POWER expression','expression',3,'p_expression','mparser.py',143),
  ('expression -> expression PLUS expression','expression',3,'p_expression','mparser.py',144),
  ('expression -> expression MINUS expression','expression',3,'p_expression','mparser.py',145),
  ('expression -> expression LESS expression','expression',3,'p_expression','mparser.py',146),
  ('expression -> expression GREATER expression','expression',3,'p_expression','mparser.py',147),
  ('expression -> expression GREATER_EQUAL expression','expression',3,'p_expression','mparser.py',148),
  ('expression -> expression LESS_EQUAL expression','expression',3,'p_expression','mparser.py',149),
  ('expression -> expression EQUALS expression','expression',3,'p_expression','mparser.py',150),
  ('expression -> expression DIFFERENT expression','expression',3,'p_expression','mparser.py',151),
  ('expression -> expression AND expression','expression',3,'p_expression','mparser.py',152),
  ('expression -> expression OR expression','expression',3,'p_expression','mparser.py',153),
  ('expression -> L_PAREN expression R_PAREN','expression',3,'p_expression','mparser.py',154),
  ('expression -> value','expression',1,'p_expression','mparser.py',155),
  ('expression -> MINUS expression','expression',2,'p_expression_uminus','mparser.py',165),
  ('expression -> NOT expression','expression',2,'p_expression_not','mparser.py',169),
  ('type -> type_int','type',1,'p_type','mparser.py',174),
  ('type -> type_double','type',1,'p_type','mparser.py',175),
  ('type -> type_string','type',1,'p_type','mparser.py',176),
  ('type -> type_boolean','type',1,'p_type','mparser.py',177),
  ('type -> type_char','type',1,'p_type','mparser.py',178),
  ('type -> type_float','type',1,'p_type','mparser.py',179),
  ('type -> type_void','type',1,'p_type','mparser.py',180),
  ('type -> type_array','type',1,'p_type','mparser.py',181),
  ('type_int -> INT','type_int',1,'p_type_int','mparser.py',187),
  ('type_double -> DOUBLE','type_double',1,'p_type_double','mparser.py',193),
  ('type_string -> STRING','type_string',1,'p_type_string','mparser.py',199),
  ('type_boolean -> BOOLEAN','type_boolean',1,'p_type_boolean','mparser.py',205),
  ('type_char -> CHAR','type_char',1,'p_type_char','mparser.py',211),
  ('type_float -> FLOAT','type_float',1,'p_type_float','mparser.py',217),
  ('type_void -> VOID','type_void',1,'p_type_void','mparser.py',223),
  ('type_array -> L_S_BRACKET type R_S_BRACKET','type_array',3,'p_type_array','mparser.py',229),
  ('value -> literal_int','value',1,'p_value','mparser.py',235),
  ('value -> literal_double','value',1,'p_value','mparser.py',236),
  ('value -> literal_string','value',1,'p_value','mparser.py',237),
  ('value -> literal_boolean','value',1,'p_value','mparser.py',238),
  ('value -> literal_char','value',1,'p_value','mparser.py',239),
  ('value -> literal_float','value',1,'p_value','mparser.py',240),
  ('value -> identifier','value',1,'p_value','mparser.py',241),
  ('value -> function_call','value',1,'p_value','mparser.py',242),
  ('value -> index','value',1,'p_value','mparser.py',243),
  ('value -> array','value',1,'p_value','mparser.py',244),
  ('literal_int -> INT_LITERAL','literal_int',1,'p_literal_int','mparser.py',250),
  ('literal_double -> DOUBLE_LITERAL','literal_double',1,'p_literal_double','mparser.py',256),
  ('literal_string -> STRING_LITERAL','literal_string',1,'p_literal_string','mparser.py',262),
  ('literal_boolean -> BOOLEAN_LITERAL','literal_boolean',1,'p_literal_boolean','mparser.py',268),
  ('literal_char -> CHAR_LITERAL','literal_char',1,'p_literal_char','mparser.py',274),
  ('literal_float -> FLOAT_LITERAL','literal_float',1,'p_literal_float','mparser.py',280),
  ('identifier -> ID','identifier',1,'p_identifier','mparser.py',286),
  ('index -> ID temp','index',2,'p_index','mparser.py',292),
  ('temp -> L_S_BRACKET expression R_S_BRACKET temp','temp',4,'p_index','mparser.py',293),
  ('temp -> L_S_BRACKET expression R_S_BRACKET','temp',3,'p_index','mparser.py',294),
  ('array -> L_BRACKET array_literal R_BRACKET','array',3,'p_array','mparser.py',306),
  ('array -> L_BRACKET R_BRACKET','array',2,'p_array','mparser.py',307),
  ('array_literal -> expression COMMA array_literal','array_literal',3,'p_array_literal','mparser.py',316),
  ('array_literal -> expression','array_literal',1,'p_array_literal','mparser.py',317),
  ('function_call -> ID L_PAREN arguments_list R_PAREN','function_call',4,'p_function_call','mparser.py',326),
  ('arguments_list -> expression COMMA arguments_list','arguments_list',3,'p_arguments_list','mparser.py',332),
  ('arguments_list -> expression','arguments_list',1,'p_arguments_list','mparser.py',333),
  ('arguments_list -> <empty>','arguments_list',0,'p_arguments_list','mparser.py',334),
]
