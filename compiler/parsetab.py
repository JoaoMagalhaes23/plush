
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'leftPLUSMINUSleftMULTIPLYDIVIDEMODrightPOWERnonassocLESSGREATERLESS_EQUALGREATER_EQUALEQUALSDIFFERENTleftANDleftORrightNOTrightUMINUSAND BOOLEAN BOOLEAN_LITERAL CHAR CHAR_LITERAL COLON COLON_EQUALS COMMA DIFFERENT DIVIDE DOUBLE DOUBLE_LITERAL ELSE EQUALS FLOAT FLOAT_LITERAL FUNCTION GREATER GREATER_EQUAL ID IF IMMUTABLE_VARIABLE INT INT_LITERAL LESS LESS_EQUAL L_BRACKET L_PAREN L_S_BRACKET MINUS MOD MULTIPLY MUTABLE_VARIABLE NOT OR PLUS POWER R_BRACKET R_PAREN R_S_BRACKET SEMICOLON STRING STRING_LITERAL VOID WHILE\n    start : top_level_declarations\n    \n    top_level_declarations  : top_level_declaration top_level_declarations\n                            | top_level_declaration\n    \n    top_level_declaration   : create_variable SEMICOLON\n                            | function\n    \n    create_variable : MUTABLE_VARIABLE ID COLON type COLON_EQUALS expression\n                    | IMMUTABLE_VARIABLE ID COLON type COLON_EQUALS expression   \n    \n    assign : ID COLON_EQUALS expression\n    \n    function    : FUNCTION ID L_PAREN parameter_list R_PAREN COLON type L_BRACKET block R_BRACKET\n                | FUNCTION ID L_PAREN parameter_list R_PAREN COLON type SEMICOLON\n    \n    parameter_list  : parameter COMMA parameter_list\n                    | parameter\n                    |\n    \n    parameter   : MUTABLE_VARIABLE ID COLON type\n                | IMMUTABLE_VARIABLE ID COLON type\n     \n    block   : statement block \n            | statement\n    \n    statement   : if_statement\n                | while_statement\n                | assign SEMICOLON\n                | create_variable SEMICOLON\n                | function_call SEMICOLON\n    \n    if_statement    : IF expression L_BRACKET block R_BRACKET\n                    | IF expression L_BRACKET block R_BRACKET else_if_statements\n                    | IF expression L_BRACKET block R_BRACKET ELSE L_BRACKET block R_BRACKET\n    \n    else_if_statements  : ELSE IF expression L_BRACKET block R_BRACKET\n                        | ELSE IF expression L_BRACKET block R_BRACKET else_if_statements\n                        | ELSE IF expression L_BRACKET block R_BRACKET ELSE L_BRACKET block R_BRACKET\n    \n    while_statement : WHILE expression L_BRACKET block R_BRACKET\n    \n    expression  : expression MULTIPLY expression\n                | expression DIVIDE expression\n                | expression MOD expression\n                | expression POWER expression\n                | expression PLUS expression\n                | expression MINUS expression\n                | expression LESS expression\n                | expression GREATER expression\n                | expression GREATER_EQUAL expression\n                | expression LESS_EQUAL expression\n                | expression EQUALS expression\n                | expression DIFFERENT expression\n                | expression AND expression\n                | expression OR expression\n                | L_PAREN expression R_PAREN\n                | value\n    expression : MINUS expression %prec UMINUSexpression : NOT expression\n    type    : type_int\n            | type_double\n            | type_string\n            | type_boolean\n            | type_char\n            | type_float\n            | type_void\n            | type_array\n    \n    type_int : INT\n    \n    type_double : DOUBLE\n    \n    type_string : STRING\n    \n    type_boolean : BOOLEAN\n    \n    type_char : CHAR\n    \n    type_float : FLOAT\n    \n    type_void : VOID\n    \n    type_array : L_S_BRACKET type R_S_BRACKET\n    \n    value   : literal_int\n            | literal_double\n            | literal_string\n            | literal_boolean\n            | literal_char\n            | literal_float\n            | identifier\n            | function_call\n            | index\n            | array\n    \n    literal_int : INT_LITERAL\n    \n    literal_double : DOUBLE_LITERAL\n    \n    literal_string : STRING_LITERAL\n    \n    literal_boolean : BOOLEAN_LITERAL\n    \n    literal_char : CHAR_LITERAL\n    \n    literal_float : FLOAT_LITERAL\n    \n    identifier  : ID\n    \n    index   : ID temp\n    temp    : L_S_BRACKET expression R_S_BRACKET temp\n            | L_S_BRACKET expression R_S_BRACKET\n    \n    array   : L_BRACKET array_literal R_BRACKET\n            | L_BRACKET R_BRACKET\n    \n    array_literal   : expression COMMA array_literal\n                    | expression\n    \n    function_call : ID L_PAREN arguments_list R_PAREN\n    \n    arguments_list  : expression COMMA arguments_list\n                    | expression\n                    |\n    '
    
_lr_action_items = {'MUTABLE_VARIABLE':([0,3,5,10,16,43,121,122,129,130,131,140,142,143,144,148,149,152,153,154,157,160,161,163,165,166,168,],[6,6,-5,-4,37,37,6,-10,6,-18,-19,-9,-20,-21,-22,6,6,-23,-29,-24,6,6,-25,-26,-27,6,-28,]),'IMMUTABLE_VARIABLE':([0,3,5,10,16,43,121,122,129,130,131,140,142,143,144,148,149,152,153,154,157,160,161,163,165,166,168,],[7,7,-5,-4,38,38,7,-10,7,-18,-19,-9,-20,-21,-22,7,7,-23,-29,-24,7,7,-25,-26,-27,7,-28,]),'FUNCTION':([0,3,5,10,122,140,],[8,8,-5,-4,-10,-9,]),'$end':([1,2,3,5,9,10,122,140,],[0,-1,-3,-5,-2,-4,-10,-9,]),'SEMICOLON':([4,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,46,47,50,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,69,70,76,92,94,96,98,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,123,125,132,133,134,138,147,],[10,-48,-49,-50,-51,-52,-53,-54,-55,-56,-57,-58,-59,-60,-61,-62,-80,-6,-45,-64,-65,-66,-67,-68,-69,-70,-71,-72,-73,-74,-75,-76,-77,-78,-79,-63,-7,-81,-46,-47,-85,122,-30,-31,-32,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,-84,-88,-83,142,143,144,-82,-8,]),'ID':([6,7,8,37,38,39,41,48,49,51,68,75,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,120,121,124,129,130,131,135,136,139,142,143,144,148,149,152,153,154,156,157,160,161,163,165,166,168,],[11,12,13,44,45,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,127,46,127,-18,-19,46,46,46,-20,-21,-22,127,127,-23,-29,-24,46,127,127,-25,-26,-27,127,-28,]),'COLON':([11,12,42,44,45,],[14,15,71,73,74,]),'L_PAREN':([13,39,41,46,48,49,51,68,75,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,120,124,127,135,136,139,156,],[16,49,49,75,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,75,49,49,49,49,]),'INT':([14,15,33,71,73,74,],[26,26,26,26,26,26,]),'DOUBLE':([14,15,33,71,73,74,],[27,27,27,27,27,27,]),'STRING':([14,15,33,71,73,74,],[28,28,28,28,28,28,]),'BOOLEAN':([14,15,33,71,73,74,],[29,29,29,29,29,29,]),'CHAR':([14,15,33,71,73,74,],[30,30,30,30,30,30,]),'FLOAT':([14,15,33,71,73,74,],[31,31,31,31,31,31,]),'VOID':([14,15,33,71,73,74,],[32,32,32,32,32,32,]),'L_S_BRACKET':([14,15,33,46,71,73,74,125,],[33,33,33,77,33,33,33,77,]),'R_PAREN':([16,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,35,36,43,46,50,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,69,72,75,76,92,93,94,96,99,100,101,102,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,123,124,125,137,138,],[-13,-48,-49,-50,-51,-52,-53,-54,-55,-56,-57,-58,-59,-60,-61,-62,42,-12,-13,-80,-45,-64,-65,-66,-67,-68,-69,-70,-71,-72,-73,-74,-75,-76,-77,-78,-79,-63,-11,-91,-81,-46,118,-47,-85,-14,-15,123,-90,-30,-31,-32,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,-84,-88,-91,-83,-89,-82,]),'COLON_EQUALS':([17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,34,69,127,],[39,-48,-49,-50,-51,-52,-53,-54,-55,-56,-57,-58,-59,-60,-61,-62,41,-63,139,]),'R_S_BRACKET':([18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,40,46,50,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,69,76,92,94,96,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,123,125,138,],[-48,-49,-50,-51,-52,-53,-54,-55,-56,-57,-58,-59,-60,-61,-62,69,-80,-45,-64,-65,-66,-67,-68,-69,-70,-71,-72,-73,-74,-75,-76,-77,-78,-79,-63,-81,-46,-47,-85,125,-30,-31,-32,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,-84,-88,-83,-82,]),'L_BRACKET':([18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,39,41,46,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,94,96,98,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,123,124,125,135,136,138,139,145,146,155,156,158,164,],[-48,-49,-50,-51,-52,-53,-54,-55,-56,-57,-58,-59,-60,-61,-62,68,68,-80,68,68,-45,68,-64,-65,-66,-67,-68,-69,-70,-71,-72,-73,-74,-75,-76,-77,-78,-79,68,-63,68,-81,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,-46,-47,-85,121,-30,-31,-32,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,-84,68,-88,68,-83,68,68,-82,68,148,149,157,68,160,166,]),'COMMA':([18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,36,46,50,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,69,76,92,94,96,97,99,100,102,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,123,125,138,],[-48,-49,-50,-51,-52,-53,-54,-55,-56,-57,-58,-59,-60,-61,-62,43,-80,-45,-64,-65,-66,-67,-68,-69,-70,-71,-72,-73,-74,-75,-76,-77,-78,-79,-63,-81,-46,-47,-85,120,-14,-15,124,-30,-31,-32,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,-84,-88,-83,-82,]),'MINUS':([39,41,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,70,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,96,97,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,123,124,125,135,136,138,139,145,146,147,156,158,],[48,48,-80,83,48,48,-45,48,-64,-65,-66,-67,-68,-69,-70,-71,-72,-73,-74,-75,-76,-77,-78,-79,48,83,48,-81,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,-46,83,-47,-85,83,83,83,-30,-31,-32,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,-84,48,-88,48,-83,48,48,-82,48,83,83,83,48,83,]),'NOT':([39,41,48,49,51,68,75,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,120,124,135,136,139,156,],[51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,]),'INT_LITERAL':([39,41,48,49,51,68,75,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,120,124,135,136,139,156,],[62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,]),'DOUBLE_LITERAL':([39,41,48,49,51,68,75,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,120,124,135,136,139,156,],[63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,]),'STRING_LITERAL':([39,41,48,49,51,68,75,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,120,124,135,136,139,156,],[64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,]),'BOOLEAN_LITERAL':([39,41,48,49,51,68,75,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,120,124,135,136,139,156,],[65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,]),'CHAR_LITERAL':([39,41,48,49,51,68,75,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,120,124,135,136,139,156,],[66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,]),'FLOAT_LITERAL':([39,41,48,49,51,68,75,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,120,124,135,136,139,156,],[67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,]),'MULTIPLY':([46,47,50,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,70,76,92,93,94,96,97,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,123,125,138,145,146,147,158,],[-80,78,-45,-64,-65,-66,-67,-68,-69,-70,-71,-72,-73,-74,-75,-76,-77,-78,-79,78,-81,-46,78,-47,-85,78,78,78,-30,-31,-32,-33,78,78,-36,-37,-38,-39,-40,-41,-42,-43,-44,-84,-88,-83,-82,78,78,78,78,]),'DIVIDE':([46,47,50,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,70,76,92,93,94,96,97,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,123,125,138,145,146,147,158,],[-80,79,-45,-64,-65,-66,-67,-68,-69,-70,-71,-72,-73,-74,-75,-76,-77,-78,-79,79,-81,-46,79,-47,-85,79,79,79,-30,-31,-32,-33,79,79,-36,-37,-38,-39,-40,-41,-42,-43,-44,-84,-88,-83,-82,79,79,79,79,]),'MOD':([46,47,50,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,70,76,92,93,94,96,97,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,123,125,138,145,146,147,158,],[-80,80,-45,-64,-65,-66,-67,-68,-69,-70,-71,-72,-73,-74,-75,-76,-77,-78,-79,80,-81,-46,80,-47,-85,80,80,80,-30,-31,-32,-33,80,80,-36,-37,-38,-39,-40,-41,-42,-43,-44,-84,-88,-83,-82,80,80,80,80,]),'POWER':([46,47,50,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,70,76,92,93,94,96,97,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,123,125,138,145,146,147,158,],[-80,81,-45,-64,-65,-66,-67,-68,-69,-70,-71,-72,-73,-74,-75,-76,-77,-78,-79,81,-81,-46,81,-47,-85,81,81,81,81,81,81,81,81,81,-36,-37,-38,-39,-40,-41,-42,-43,-44,-84,-88,-83,-82,81,81,81,81,]),'PLUS':([46,47,50,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,70,76,92,93,94,96,97,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,123,125,138,145,146,147,158,],[-80,82,-45,-64,-65,-66,-67,-68,-69,-70,-71,-72,-73,-74,-75,-76,-77,-78,-79,82,-81,-46,82,-47,-85,82,82,82,-30,-31,-32,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,-84,-88,-83,-82,82,82,82,82,]),'LESS':([46,47,50,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,70,76,92,93,94,96,97,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,123,125,138,145,146,147,158,],[-80,84,-45,-64,-65,-66,-67,-68,-69,-70,-71,-72,-73,-74,-75,-76,-77,-78,-79,84,-81,-46,84,-47,-85,84,84,84,84,84,84,84,84,84,None,None,None,None,None,None,-42,-43,-44,-84,-88,-83,-82,84,84,84,84,]),'GREATER':([46,47,50,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,70,76,92,93,94,96,97,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,123,125,138,145,146,147,158,],[-80,85,-45,-64,-65,-66,-67,-68,-69,-70,-71,-72,-73,-74,-75,-76,-77,-78,-79,85,-81,-46,85,-47,-85,85,85,85,85,85,85,85,85,85,None,None,None,None,None,None,-42,-43,-44,-84,-88,-83,-82,85,85,85,85,]),'GREATER_EQUAL':([46,47,50,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,70,76,92,93,94,96,97,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,123,125,138,145,146,147,158,],[-80,86,-45,-64,-65,-66,-67,-68,-69,-70,-71,-72,-73,-74,-75,-76,-77,-78,-79,86,-81,-46,86,-47,-85,86,86,86,86,86,86,86,86,86,None,None,None,None,None,None,-42,-43,-44,-84,-88,-83,-82,86,86,86,86,]),'LESS_EQUAL':([46,47,50,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,70,76,92,93,94,96,97,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,123,125,138,145,146,147,158,],[-80,87,-45,-64,-65,-66,-67,-68,-69,-70,-71,-72,-73,-74,-75,-76,-77,-78,-79,87,-81,-46,87,-47,-85,87,87,87,87,87,87,87,87,87,None,None,None,None,None,None,-42,-43,-44,-84,-88,-83,-82,87,87,87,87,]),'EQUALS':([46,47,50,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,70,76,92,93,94,96,97,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,123,125,138,145,146,147,158,],[-80,88,-45,-64,-65,-66,-67,-68,-69,-70,-71,-72,-73,-74,-75,-76,-77,-78,-79,88,-81,-46,88,-47,-85,88,88,88,88,88,88,88,88,88,None,None,None,None,None,None,-42,-43,-44,-84,-88,-83,-82,88,88,88,88,]),'DIFFERENT':([46,47,50,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,70,76,92,93,94,96,97,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,123,125,138,145,146,147,158,],[-80,89,-45,-64,-65,-66,-67,-68,-69,-70,-71,-72,-73,-74,-75,-76,-77,-78,-79,89,-81,-46,89,-47,-85,89,89,89,89,89,89,89,89,89,None,None,None,None,None,None,-42,-43,-44,-84,-88,-83,-82,89,89,89,89,]),'AND':([46,47,50,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,70,76,92,93,94,96,97,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,123,125,138,145,146,147,158,],[-80,90,-45,-64,-65,-66,-67,-68,-69,-70,-71,-72,-73,-74,-75,-76,-77,-78,-79,90,-81,-46,90,-47,-85,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,-42,-43,-44,-84,-88,-83,-82,90,90,90,90,]),'OR':([46,47,50,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,70,76,92,93,94,96,97,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,123,125,138,145,146,147,158,],[-80,91,-45,-64,-65,-66,-67,-68,-69,-70,-71,-72,-73,-74,-75,-76,-77,-78,-79,91,-81,-46,91,-47,-85,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,-43,-44,-84,-88,-83,-82,91,91,91,91,]),'R_BRACKET':([46,50,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,76,92,94,95,96,97,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,123,125,126,128,129,130,131,138,141,142,143,144,150,151,152,153,154,159,161,162,163,165,167,168,],[-80,-45,-64,-65,-66,-67,-68,-69,-70,-71,-72,-73,-74,-75,-76,-77,-78,-79,96,-81,-46,-47,119,-85,-87,-30,-31,-32,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,-84,-88,-83,-86,140,-17,-18,-19,-82,-16,-20,-21,-22,152,153,-23,-29,-24,161,-25,163,-26,-27,168,-28,]),'IF':([121,129,130,131,142,143,144,148,149,152,153,154,155,157,160,161,163,164,165,166,168,],[135,135,-18,-19,-20,-21,-22,135,135,-23,-29,-24,156,135,135,-25,-26,156,-27,135,-28,]),'WHILE':([121,129,130,131,142,143,144,148,149,152,153,154,157,160,161,163,165,166,168,],[136,136,-18,-19,-20,-21,-22,136,136,-23,-29,-24,136,136,-25,-26,-27,136,-28,]),'ELSE':([152,163,],[155,164,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'start':([0,],[1,]),'top_level_declarations':([0,3,],[2,9,]),'top_level_declaration':([0,3,],[3,3,]),'create_variable':([0,3,121,129,148,149,157,160,166,],[4,4,133,133,133,133,133,133,133,]),'function':([0,3,],[5,5,]),'type':([14,15,33,71,73,74,],[17,34,40,98,99,100,]),'type_int':([14,15,33,71,73,74,],[18,18,18,18,18,18,]),'type_double':([14,15,33,71,73,74,],[19,19,19,19,19,19,]),'type_string':([14,15,33,71,73,74,],[20,20,20,20,20,20,]),'type_boolean':([14,15,33,71,73,74,],[21,21,21,21,21,21,]),'type_char':([14,15,33,71,73,74,],[22,22,22,22,22,22,]),'type_float':([14,15,33,71,73,74,],[23,23,23,23,23,23,]),'type_void':([14,15,33,71,73,74,],[24,24,24,24,24,24,]),'type_array':([14,15,33,71,73,74,],[25,25,25,25,25,25,]),'parameter_list':([16,43,],[35,72,]),'parameter':([16,43,],[36,36,]),'expression':([39,41,48,49,51,68,75,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,120,124,135,136,139,156,],[47,70,92,93,94,97,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,97,102,145,146,147,158,]),'value':([39,41,48,49,51,68,75,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,120,124,135,136,139,156,],[50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,]),'literal_int':([39,41,48,49,51,68,75,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,120,124,135,136,139,156,],[52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,]),'literal_double':([39,41,48,49,51,68,75,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,120,124,135,136,139,156,],[53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,]),'literal_string':([39,41,48,49,51,68,75,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,120,124,135,136,139,156,],[54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,]),'literal_boolean':([39,41,48,49,51,68,75,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,120,124,135,136,139,156,],[55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,]),'literal_char':([39,41,48,49,51,68,75,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,120,124,135,136,139,156,],[56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,]),'literal_float':([39,41,48,49,51,68,75,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,120,124,135,136,139,156,],[57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,]),'identifier':([39,41,48,49,51,68,75,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,120,124,135,136,139,156,],[58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,]),'function_call':([39,41,48,49,51,68,75,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,120,121,124,129,135,136,139,148,149,156,157,160,166,],[59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,134,59,134,59,59,59,134,134,59,134,134,134,]),'index':([39,41,48,49,51,68,75,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,120,124,135,136,139,156,],[60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,]),'array':([39,41,48,49,51,68,75,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,120,124,135,136,139,156,],[61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,]),'temp':([46,125,],[76,138,]),'array_literal':([68,120,],[95,126,]),'arguments_list':([75,124,],[101,137,]),'block':([121,129,148,149,157,160,166,],[128,141,150,151,159,162,167,]),'statement':([121,129,148,149,157,160,166,],[129,129,129,129,129,129,129,]),'if_statement':([121,129,148,149,157,160,166,],[130,130,130,130,130,130,130,]),'while_statement':([121,129,148,149,157,160,166,],[131,131,131,131,131,131,131,]),'assign':([121,129,148,149,157,160,166,],[132,132,132,132,132,132,132,]),'else_if_statements':([152,163,],[154,165,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> start","S'",1,None,None,None),
  ('start -> top_level_declarations','start',1,'p_start','my_parser.py',17),
  ('top_level_declarations -> top_level_declaration top_level_declarations','top_level_declarations',2,'p_top_level_declarations','my_parser.py',23),
  ('top_level_declarations -> top_level_declaration','top_level_declarations',1,'p_top_level_declarations','my_parser.py',24),
  ('top_level_declaration -> create_variable SEMICOLON','top_level_declaration',2,'p_top_level_declaration','my_parser.py',34),
  ('top_level_declaration -> function','top_level_declaration',1,'p_top_level_declaration','my_parser.py',35),
  ('create_variable -> MUTABLE_VARIABLE ID COLON type COLON_EQUALS expression','create_variable',6,'p_create_variable','my_parser.py',41),
  ('create_variable -> IMMUTABLE_VARIABLE ID COLON type COLON_EQUALS expression','create_variable',6,'p_create_variable','my_parser.py',42),
  ('assign -> ID COLON_EQUALS expression','assign',3,'p_assign','my_parser.py',51),
  ('function -> FUNCTION ID L_PAREN parameter_list R_PAREN COLON type L_BRACKET block R_BRACKET','function',10,'p_function','my_parser.py',57),
  ('function -> FUNCTION ID L_PAREN parameter_list R_PAREN COLON type SEMICOLON','function',8,'p_function','my_parser.py',58),
  ('parameter_list -> parameter COMMA parameter_list','parameter_list',3,'p_parameter_list','my_parser.py',67),
  ('parameter_list -> parameter','parameter_list',1,'p_parameter_list','my_parser.py',68),
  ('parameter_list -> <empty>','parameter_list',0,'p_parameter_list','my_parser.py',69),
  ('parameter -> MUTABLE_VARIABLE ID COLON type','parameter',4,'p_parameter','my_parser.py',80),
  ('parameter -> IMMUTABLE_VARIABLE ID COLON type','parameter',4,'p_parameter','my_parser.py',81),
  ('block -> statement block','block',2,'p_block','my_parser.py',90),
  ('block -> statement','block',1,'p_block','my_parser.py',91),
  ('statement -> if_statement','statement',1,'p_statement','my_parser.py',100),
  ('statement -> while_statement','statement',1,'p_statement','my_parser.py',101),
  ('statement -> assign SEMICOLON','statement',2,'p_statement','my_parser.py',102),
  ('statement -> create_variable SEMICOLON','statement',2,'p_statement','my_parser.py',103),
  ('statement -> function_call SEMICOLON','statement',2,'p_statement','my_parser.py',104),
  ('if_statement -> IF expression L_BRACKET block R_BRACKET','if_statement',5,'p_if_statement','my_parser.py',110),
  ('if_statement -> IF expression L_BRACKET block R_BRACKET else_if_statements','if_statement',6,'p_if_statement','my_parser.py',111),
  ('if_statement -> IF expression L_BRACKET block R_BRACKET ELSE L_BRACKET block R_BRACKET','if_statement',9,'p_if_statement','my_parser.py',112),
  ('else_if_statements -> ELSE IF expression L_BRACKET block R_BRACKET','else_if_statements',6,'p_else_if_statements','my_parser.py',123),
  ('else_if_statements -> ELSE IF expression L_BRACKET block R_BRACKET else_if_statements','else_if_statements',7,'p_else_if_statements','my_parser.py',124),
  ('else_if_statements -> ELSE IF expression L_BRACKET block R_BRACKET ELSE L_BRACKET block R_BRACKET','else_if_statements',10,'p_else_if_statements','my_parser.py',125),
  ('while_statement -> WHILE expression L_BRACKET block R_BRACKET','while_statement',5,'p_while_statement','my_parser.py',136),
  ('expression -> expression MULTIPLY expression','expression',3,'p_expression','my_parser.py',142),
  ('expression -> expression DIVIDE expression','expression',3,'p_expression','my_parser.py',143),
  ('expression -> expression MOD expression','expression',3,'p_expression','my_parser.py',144),
  ('expression -> expression POWER expression','expression',3,'p_expression','my_parser.py',145),
  ('expression -> expression PLUS expression','expression',3,'p_expression','my_parser.py',146),
  ('expression -> expression MINUS expression','expression',3,'p_expression','my_parser.py',147),
  ('expression -> expression LESS expression','expression',3,'p_expression','my_parser.py',148),
  ('expression -> expression GREATER expression','expression',3,'p_expression','my_parser.py',149),
  ('expression -> expression GREATER_EQUAL expression','expression',3,'p_expression','my_parser.py',150),
  ('expression -> expression LESS_EQUAL expression','expression',3,'p_expression','my_parser.py',151),
  ('expression -> expression EQUALS expression','expression',3,'p_expression','my_parser.py',152),
  ('expression -> expression DIFFERENT expression','expression',3,'p_expression','my_parser.py',153),
  ('expression -> expression AND expression','expression',3,'p_expression','my_parser.py',154),
  ('expression -> expression OR expression','expression',3,'p_expression','my_parser.py',155),
  ('expression -> L_PAREN expression R_PAREN','expression',3,'p_expression','my_parser.py',156),
  ('expression -> value','expression',1,'p_expression','my_parser.py',157),
  ('expression -> MINUS expression','expression',2,'p_expression_uminus','my_parser.py',167),
  ('expression -> NOT expression','expression',2,'p_expression_not','my_parser.py',171),
  ('type -> type_int','type',1,'p_type','my_parser.py',176),
  ('type -> type_double','type',1,'p_type','my_parser.py',177),
  ('type -> type_string','type',1,'p_type','my_parser.py',178),
  ('type -> type_boolean','type',1,'p_type','my_parser.py',179),
  ('type -> type_char','type',1,'p_type','my_parser.py',180),
  ('type -> type_float','type',1,'p_type','my_parser.py',181),
  ('type -> type_void','type',1,'p_type','my_parser.py',182),
  ('type -> type_array','type',1,'p_type','my_parser.py',183),
  ('type_int -> INT','type_int',1,'p_type_int','my_parser.py',189),
  ('type_double -> DOUBLE','type_double',1,'p_type_double','my_parser.py',195),
  ('type_string -> STRING','type_string',1,'p_type_string','my_parser.py',201),
  ('type_boolean -> BOOLEAN','type_boolean',1,'p_type_boolean','my_parser.py',207),
  ('type_char -> CHAR','type_char',1,'p_type_char','my_parser.py',213),
  ('type_float -> FLOAT','type_float',1,'p_type_float','my_parser.py',219),
  ('type_void -> VOID','type_void',1,'p_type_void','my_parser.py',225),
  ('type_array -> L_S_BRACKET type R_S_BRACKET','type_array',3,'p_type_array','my_parser.py',231),
  ('value -> literal_int','value',1,'p_value','my_parser.py',237),
  ('value -> literal_double','value',1,'p_value','my_parser.py',238),
  ('value -> literal_string','value',1,'p_value','my_parser.py',239),
  ('value -> literal_boolean','value',1,'p_value','my_parser.py',240),
  ('value -> literal_char','value',1,'p_value','my_parser.py',241),
  ('value -> literal_float','value',1,'p_value','my_parser.py',242),
  ('value -> identifier','value',1,'p_value','my_parser.py',243),
  ('value -> function_call','value',1,'p_value','my_parser.py',244),
  ('value -> index','value',1,'p_value','my_parser.py',245),
  ('value -> array','value',1,'p_value','my_parser.py',246),
  ('literal_int -> INT_LITERAL','literal_int',1,'p_literal_int','my_parser.py',252),
  ('literal_double -> DOUBLE_LITERAL','literal_double',1,'p_literal_double','my_parser.py',258),
  ('literal_string -> STRING_LITERAL','literal_string',1,'p_literal_string','my_parser.py',264),
  ('literal_boolean -> BOOLEAN_LITERAL','literal_boolean',1,'p_literal_boolean','my_parser.py',270),
  ('literal_char -> CHAR_LITERAL','literal_char',1,'p_literal_char','my_parser.py',276),
  ('literal_float -> FLOAT_LITERAL','literal_float',1,'p_literal_float','my_parser.py',282),
  ('identifier -> ID','identifier',1,'p_identifier','my_parser.py',288),
  ('index -> ID temp','index',2,'p_index','my_parser.py',294),
  ('temp -> L_S_BRACKET expression R_S_BRACKET temp','temp',4,'p_index','my_parser.py',295),
  ('temp -> L_S_BRACKET expression R_S_BRACKET','temp',3,'p_index','my_parser.py',296),
  ('array -> L_BRACKET array_literal R_BRACKET','array',3,'p_array','my_parser.py',308),
  ('array -> L_BRACKET R_BRACKET','array',2,'p_array','my_parser.py',309),
  ('array_literal -> expression COMMA array_literal','array_literal',3,'p_array_literal','my_parser.py',318),
  ('array_literal -> expression','array_literal',1,'p_array_literal','my_parser.py',319),
  ('function_call -> ID L_PAREN arguments_list R_PAREN','function_call',4,'p_function_call','my_parser.py',328),
  ('arguments_list -> expression COMMA arguments_list','arguments_list',3,'p_arguments_list','my_parser.py',334),
  ('arguments_list -> expression','arguments_list',1,'p_arguments_list','my_parser.py',335),
  ('arguments_list -> <empty>','arguments_list',0,'p_arguments_list','my_parser.py',336),
]
