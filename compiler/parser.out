Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> start
Rule 1     start -> top_level_declarations
Rule 2     top_level_declarations -> top_level_declaration top_level_declarations
Rule 3     top_level_declarations -> top_level_declaration
Rule 4     top_level_declaration -> create_variable SEMICOLON
Rule 5     top_level_declaration -> assign SEMICOLON
Rule 6     top_level_declaration -> function
Rule 7     create_variable -> MUTABLE_VARIABLE ID COLON type t
Rule 8     create_variable -> IMMUTABLE_VARIABLE ID COLON type t
Rule 9     t -> COLON_EQUALS expression
Rule 10    t -> <empty>
Rule 11    assign -> ID COLON_EQUALS expression
Rule 12    function -> FUNCTION ID L_PAREN parameter_list R_PAREN COLON type L_BRACKET block R_BRACKET
Rule 13    parameter_list -> create_variable COMMA parameter_list
Rule 14    parameter_list -> create_variable
Rule 15    block -> statement block
Rule 16    block -> statement
Rule 17    statement -> if_statement
Rule 18    statement -> while_statement
Rule 19    statement -> assign SEMICOLON
Rule 20    statement -> create_variable SEMICOLON
Rule 21    statement -> function_call SEMICOLON
Rule 22    if_statement -> IF expression L_BRACKET block R_BRACKET else_if_statements
Rule 23    else_if_statements -> ELSE IF expression L_BRACKET block R_BRACKET else_if_statements
Rule 24    else_if_statements -> ELSE IF expression L_BRACKET block R_BRACKET
Rule 25    else_if_statements -> ELSE L_BRACKET block R_BRACKET
Rule 26    while_statement -> WHILE expression L_BRACKET block R_BRACKET
Rule 27    expression -> expression MULTIPLY expression
Rule 28    expression -> expression DIVIDE expression
Rule 29    expression -> expression MOD expression
Rule 30    expression -> expression POWER expression
Rule 31    expression -> expression PLUS expression
Rule 32    expression -> expression MINUS expression
Rule 33    expression -> expression LESS expression
Rule 34    expression -> expression GREATER expression
Rule 35    expression -> expression GREATER_EQUAL expression
Rule 36    expression -> expression LESS_EQUAL expression
Rule 37    expression -> expression EQUALS expression
Rule 38    expression -> expression DIFFERENT expression
Rule 39    expression -> expression AND expression
Rule 40    expression -> expression OR expression
Rule 41    expression -> L_PAREN expression R_PAREN
Rule 42    expression -> value
Rule 43    expression -> MINUS expression
Rule 44    expression -> NOT expression
Rule 45    type -> type_int
Rule 46    type -> type_double
Rule 47    type -> type_string
Rule 48    type -> type_boolean
Rule 49    type -> type_char
Rule 50    type -> type_float
Rule 51    type -> type_void
Rule 52    type -> type_array
Rule 53    type_int -> INT
Rule 54    type_double -> DOUBLE
Rule 55    type_string -> STRING
Rule 56    type_boolean -> BOOLEAN
Rule 57    type_char -> CHAR
Rule 58    type_float -> FLOAT
Rule 59    type_void -> VOID
Rule 60    type_array -> L_S_BRACKET type R_S_BRACKET
Rule 61    value -> literal_int
Rule 62    value -> literal_double
Rule 63    value -> literal_string
Rule 64    value -> literal_boolean
Rule 65    value -> literal_char
Rule 66    value -> literal_float
Rule 67    value -> identifier
Rule 68    value -> function_call
Rule 69    value -> array
Rule 70    literal_int -> INT_LITERAL
Rule 71    literal_double -> DOUBLE_LITERAL
Rule 72    literal_string -> STRING_LITERAL
Rule 73    literal_boolean -> BOOLEAN_LITERAL
Rule 74    literal_char -> CHAR_LITERAL
Rule 75    literal_float -> FLOAT_LITERAL
Rule 76    identifier -> ID
Rule 77    identifier -> ID L_S_BRACKET expression R_S_BRACKET
Rule 78    array -> L_S_BRACKET values_list R_S_BRACKET
Rule 79    array -> L_BRACKET R_BRACKET
Rule 80    values_list -> value COMMA values_list
Rule 81    values_list -> value
Rule 82    values_list -> <empty>
Rule 83    function_call -> ID L_PAREN arguments_list R_PAREN
Rule 84    arguments_list -> expression COMMA arguments_list
Rule 85    arguments_list -> expression
Rule 86    arguments_list -> <empty>

Terminals, with rules where they appear

AND                  : 39
BOOLEAN              : 56
BOOLEAN_LITERAL      : 73
CHAR                 : 57
CHAR_LITERAL         : 74
COLON                : 7 8 12
COLON_EQUALS         : 9 11
COMMA                : 13 80 84
DIFFERENT            : 38
DIVIDE               : 28
DOUBLE               : 54
DOUBLE_LITERAL       : 71
ELSE                 : 23 24 25
EQUALS               : 37
FLOAT                : 58
FLOAT_LITERAL        : 75
FUNCTION             : 12
GREATER              : 34
GREATER_EQUAL        : 35
ID                   : 7 8 11 12 76 77 83
IF                   : 22 23 24
IMMUTABLE_VARIABLE   : 8
INT                  : 53
INT_LITERAL          : 70
LESS                 : 33
LESS_EQUAL           : 36
L_BRACKET            : 12 22 23 24 25 26 79
L_PAREN              : 12 41 83
L_S_BRACKET          : 60 77 78
MINUS                : 32 43
MOD                  : 29
MULTIPLY             : 27
MUTABLE_VARIABLE     : 7
NOT                  : 44
OR                   : 40
PLUS                 : 31
POWER                : 30
R_BRACKET            : 12 22 23 24 25 26 79
R_PAREN              : 12 41 83
R_S_BRACKET          : 60 77 78
SEMICOLON            : 4 5 19 20 21
STRING               : 55
STRING_LITERAL       : 72
VOID                 : 59
WHILE                : 26
error                : 

Nonterminals, with rules where they appear

arguments_list       : 83 84
array                : 69
assign               : 5 19
block                : 12 15 22 23 24 25 26
create_variable      : 4 13 14 20
else_if_statements   : 22 23
expression           : 9 11 22 23 24 26 27 27 28 28 29 29 30 30 31 31 32 32 33 33 34 34 35 35 36 36 37 37 38 38 39 39 40 40 41 43 44 77 84 85
function             : 6
function_call        : 21 68
identifier           : 67
if_statement         : 17
literal_boolean      : 64
literal_char         : 65
literal_double       : 62
literal_float        : 66
literal_int          : 61
literal_string       : 63
parameter_list       : 12 13
start                : 0
statement            : 15 16
t                    : 7 8
top_level_declaration : 2 3
top_level_declarations : 1 2
type                 : 7 8 12 60
type_array           : 52
type_boolean         : 48
type_char            : 49
type_double          : 46
type_float           : 50
type_int             : 45
type_string          : 47
type_void            : 51
value                : 42 80 81
values_list          : 78 80
while_statement      : 18

Parsing method: LALR

state 0

    (0) S' -> . start
    (1) start -> . top_level_declarations
    (2) top_level_declarations -> . top_level_declaration top_level_declarations
    (3) top_level_declarations -> . top_level_declaration
    (4) top_level_declaration -> . create_variable SEMICOLON
    (5) top_level_declaration -> . assign SEMICOLON
    (6) top_level_declaration -> . function
    (7) create_variable -> . MUTABLE_VARIABLE ID COLON type t
    (8) create_variable -> . IMMUTABLE_VARIABLE ID COLON type t
    (11) assign -> . ID COLON_EQUALS expression
    (12) function -> . FUNCTION ID L_PAREN parameter_list R_PAREN COLON type L_BRACKET block R_BRACKET

    MUTABLE_VARIABLE shift and go to state 7
    IMMUTABLE_VARIABLE shift and go to state 9
    ID              shift and go to state 8
    FUNCTION        shift and go to state 10

    start                          shift and go to state 1
    top_level_declarations         shift and go to state 2
    top_level_declaration          shift and go to state 3
    create_variable                shift and go to state 4
    assign                         shift and go to state 5
    function                       shift and go to state 6

state 1

    (0) S' -> start .



state 2

    (1) start -> top_level_declarations .

    $end            reduce using rule 1 (start -> top_level_declarations .)


state 3

    (2) top_level_declarations -> top_level_declaration . top_level_declarations
    (3) top_level_declarations -> top_level_declaration .
    (2) top_level_declarations -> . top_level_declaration top_level_declarations
    (3) top_level_declarations -> . top_level_declaration
    (4) top_level_declaration -> . create_variable SEMICOLON
    (5) top_level_declaration -> . assign SEMICOLON
    (6) top_level_declaration -> . function
    (7) create_variable -> . MUTABLE_VARIABLE ID COLON type t
    (8) create_variable -> . IMMUTABLE_VARIABLE ID COLON type t
    (11) assign -> . ID COLON_EQUALS expression
    (12) function -> . FUNCTION ID L_PAREN parameter_list R_PAREN COLON type L_BRACKET block R_BRACKET

    $end            reduce using rule 3 (top_level_declarations -> top_level_declaration .)
    MUTABLE_VARIABLE shift and go to state 7
    IMMUTABLE_VARIABLE shift and go to state 9
    ID              shift and go to state 8
    FUNCTION        shift and go to state 10

    top_level_declaration          shift and go to state 3
    top_level_declarations         shift and go to state 11
    create_variable                shift and go to state 4
    assign                         shift and go to state 5
    function                       shift and go to state 6

state 4

    (4) top_level_declaration -> create_variable . SEMICOLON

    SEMICOLON       shift and go to state 12


state 5

    (5) top_level_declaration -> assign . SEMICOLON

    SEMICOLON       shift and go to state 13


state 6

    (6) top_level_declaration -> function .

    MUTABLE_VARIABLE reduce using rule 6 (top_level_declaration -> function .)
    IMMUTABLE_VARIABLE reduce using rule 6 (top_level_declaration -> function .)
    ID              reduce using rule 6 (top_level_declaration -> function .)
    FUNCTION        reduce using rule 6 (top_level_declaration -> function .)
    $end            reduce using rule 6 (top_level_declaration -> function .)


state 7

    (7) create_variable -> MUTABLE_VARIABLE . ID COLON type t

    ID              shift and go to state 14


state 8

    (11) assign -> ID . COLON_EQUALS expression

    COLON_EQUALS    shift and go to state 15


state 9

    (8) create_variable -> IMMUTABLE_VARIABLE . ID COLON type t

    ID              shift and go to state 16


state 10

    (12) function -> FUNCTION . ID L_PAREN parameter_list R_PAREN COLON type L_BRACKET block R_BRACKET

    ID              shift and go to state 17


state 11

    (2) top_level_declarations -> top_level_declaration top_level_declarations .

    $end            reduce using rule 2 (top_level_declarations -> top_level_declaration top_level_declarations .)


state 12

    (4) top_level_declaration -> create_variable SEMICOLON .

    MUTABLE_VARIABLE reduce using rule 4 (top_level_declaration -> create_variable SEMICOLON .)
    IMMUTABLE_VARIABLE reduce using rule 4 (top_level_declaration -> create_variable SEMICOLON .)
    ID              reduce using rule 4 (top_level_declaration -> create_variable SEMICOLON .)
    FUNCTION        reduce using rule 4 (top_level_declaration -> create_variable SEMICOLON .)
    $end            reduce using rule 4 (top_level_declaration -> create_variable SEMICOLON .)


state 13

    (5) top_level_declaration -> assign SEMICOLON .

    MUTABLE_VARIABLE reduce using rule 5 (top_level_declaration -> assign SEMICOLON .)
    IMMUTABLE_VARIABLE reduce using rule 5 (top_level_declaration -> assign SEMICOLON .)
    ID              reduce using rule 5 (top_level_declaration -> assign SEMICOLON .)
    FUNCTION        reduce using rule 5 (top_level_declaration -> assign SEMICOLON .)
    $end            reduce using rule 5 (top_level_declaration -> assign SEMICOLON .)


state 14

    (7) create_variable -> MUTABLE_VARIABLE ID . COLON type t

    COLON           shift and go to state 18


state 15

    (11) assign -> ID COLON_EQUALS . expression
    (27) expression -> . expression MULTIPLY expression
    (28) expression -> . expression DIVIDE expression
    (29) expression -> . expression MOD expression
    (30) expression -> . expression POWER expression
    (31) expression -> . expression PLUS expression
    (32) expression -> . expression MINUS expression
    (33) expression -> . expression LESS expression
    (34) expression -> . expression GREATER expression
    (35) expression -> . expression GREATER_EQUAL expression
    (36) expression -> . expression LESS_EQUAL expression
    (37) expression -> . expression EQUALS expression
    (38) expression -> . expression DIFFERENT expression
    (39) expression -> . expression AND expression
    (40) expression -> . expression OR expression
    (41) expression -> . L_PAREN expression R_PAREN
    (42) expression -> . value
    (43) expression -> . MINUS expression
    (44) expression -> . NOT expression
    (61) value -> . literal_int
    (62) value -> . literal_double
    (63) value -> . literal_string
    (64) value -> . literal_boolean
    (65) value -> . literal_char
    (66) value -> . literal_float
    (67) value -> . identifier
    (68) value -> . function_call
    (69) value -> . array
    (70) literal_int -> . INT_LITERAL
    (71) literal_double -> . DOUBLE_LITERAL
    (72) literal_string -> . STRING_LITERAL
    (73) literal_boolean -> . BOOLEAN_LITERAL
    (74) literal_char -> . CHAR_LITERAL
    (75) literal_float -> . FLOAT_LITERAL
    (76) identifier -> . ID
    (77) identifier -> . ID L_S_BRACKET expression R_S_BRACKET
    (83) function_call -> . ID L_PAREN arguments_list R_PAREN
    (78) array -> . L_S_BRACKET values_list R_S_BRACKET
    (79) array -> . L_BRACKET R_BRACKET

    L_PAREN         shift and go to state 22
    MINUS           shift and go to state 21
    NOT             shift and go to state 24
    INT_LITERAL     shift and go to state 34
    DOUBLE_LITERAL  shift and go to state 35
    STRING_LITERAL  shift and go to state 36
    BOOLEAN_LITERAL shift and go to state 37
    CHAR_LITERAL    shift and go to state 38
    FLOAT_LITERAL   shift and go to state 39
    ID              shift and go to state 19
    L_S_BRACKET     shift and go to state 40
    L_BRACKET       shift and go to state 41

    expression                     shift and go to state 20
    value                          shift and go to state 23
    literal_int                    shift and go to state 25
    literal_double                 shift and go to state 26
    literal_string                 shift and go to state 27
    literal_boolean                shift and go to state 28
    literal_char                   shift and go to state 29
    literal_float                  shift and go to state 30
    identifier                     shift and go to state 31
    function_call                  shift and go to state 32
    array                          shift and go to state 33

state 16

    (8) create_variable -> IMMUTABLE_VARIABLE ID . COLON type t

    COLON           shift and go to state 42


state 17

    (12) function -> FUNCTION ID . L_PAREN parameter_list R_PAREN COLON type L_BRACKET block R_BRACKET

    L_PAREN         shift and go to state 43


state 18

    (7) create_variable -> MUTABLE_VARIABLE ID COLON . type t
    (45) type -> . type_int
    (46) type -> . type_double
    (47) type -> . type_string
    (48) type -> . type_boolean
    (49) type -> . type_char
    (50) type -> . type_float
    (51) type -> . type_void
    (52) type -> . type_array
    (53) type_int -> . INT
    (54) type_double -> . DOUBLE
    (55) type_string -> . STRING
    (56) type_boolean -> . BOOLEAN
    (57) type_char -> . CHAR
    (58) type_float -> . FLOAT
    (59) type_void -> . VOID
    (60) type_array -> . L_S_BRACKET type R_S_BRACKET

    INT             shift and go to state 53
    DOUBLE          shift and go to state 54
    STRING          shift and go to state 55
    BOOLEAN         shift and go to state 56
    CHAR            shift and go to state 57
    FLOAT           shift and go to state 58
    VOID            shift and go to state 59
    L_S_BRACKET     shift and go to state 60

    type                           shift and go to state 44
    type_int                       shift and go to state 45
    type_double                    shift and go to state 46
    type_string                    shift and go to state 47
    type_boolean                   shift and go to state 48
    type_char                      shift and go to state 49
    type_float                     shift and go to state 50
    type_void                      shift and go to state 51
    type_array                     shift and go to state 52

state 19

    (76) identifier -> ID .
    (77) identifier -> ID . L_S_BRACKET expression R_S_BRACKET
    (83) function_call -> ID . L_PAREN arguments_list R_PAREN

    MULTIPLY        reduce using rule 76 (identifier -> ID .)
    DIVIDE          reduce using rule 76 (identifier -> ID .)
    MOD             reduce using rule 76 (identifier -> ID .)
    POWER           reduce using rule 76 (identifier -> ID .)
    PLUS            reduce using rule 76 (identifier -> ID .)
    MINUS           reduce using rule 76 (identifier -> ID .)
    LESS            reduce using rule 76 (identifier -> ID .)
    GREATER         reduce using rule 76 (identifier -> ID .)
    GREATER_EQUAL   reduce using rule 76 (identifier -> ID .)
    LESS_EQUAL      reduce using rule 76 (identifier -> ID .)
    EQUALS          reduce using rule 76 (identifier -> ID .)
    DIFFERENT       reduce using rule 76 (identifier -> ID .)
    AND             reduce using rule 76 (identifier -> ID .)
    OR              reduce using rule 76 (identifier -> ID .)
    SEMICOLON       reduce using rule 76 (identifier -> ID .)
    R_PAREN         reduce using rule 76 (identifier -> ID .)
    R_S_BRACKET     reduce using rule 76 (identifier -> ID .)
    COMMA           reduce using rule 76 (identifier -> ID .)
    L_BRACKET       reduce using rule 76 (identifier -> ID .)
    L_S_BRACKET     shift and go to state 61
    L_PAREN         shift and go to state 62


state 20

    (11) assign -> ID COLON_EQUALS expression .
    (27) expression -> expression . MULTIPLY expression
    (28) expression -> expression . DIVIDE expression
    (29) expression -> expression . MOD expression
    (30) expression -> expression . POWER expression
    (31) expression -> expression . PLUS expression
    (32) expression -> expression . MINUS expression
    (33) expression -> expression . LESS expression
    (34) expression -> expression . GREATER expression
    (35) expression -> expression . GREATER_EQUAL expression
    (36) expression -> expression . LESS_EQUAL expression
    (37) expression -> expression . EQUALS expression
    (38) expression -> expression . DIFFERENT expression
    (39) expression -> expression . AND expression
    (40) expression -> expression . OR expression

    SEMICOLON       reduce using rule 11 (assign -> ID COLON_EQUALS expression .)
    MULTIPLY        shift and go to state 63
    DIVIDE          shift and go to state 64
    MOD             shift and go to state 65
    POWER           shift and go to state 66
    PLUS            shift and go to state 67
    MINUS           shift and go to state 68
    LESS            shift and go to state 69
    GREATER         shift and go to state 70
    GREATER_EQUAL   shift and go to state 71
    LESS_EQUAL      shift and go to state 72
    EQUALS          shift and go to state 73
    DIFFERENT       shift and go to state 74
    AND             shift and go to state 75
    OR              shift and go to state 76


state 21

    (43) expression -> MINUS . expression
    (27) expression -> . expression MULTIPLY expression
    (28) expression -> . expression DIVIDE expression
    (29) expression -> . expression MOD expression
    (30) expression -> . expression POWER expression
    (31) expression -> . expression PLUS expression
    (32) expression -> . expression MINUS expression
    (33) expression -> . expression LESS expression
    (34) expression -> . expression GREATER expression
    (35) expression -> . expression GREATER_EQUAL expression
    (36) expression -> . expression LESS_EQUAL expression
    (37) expression -> . expression EQUALS expression
    (38) expression -> . expression DIFFERENT expression
    (39) expression -> . expression AND expression
    (40) expression -> . expression OR expression
    (41) expression -> . L_PAREN expression R_PAREN
    (42) expression -> . value
    (43) expression -> . MINUS expression
    (44) expression -> . NOT expression
    (61) value -> . literal_int
    (62) value -> . literal_double
    (63) value -> . literal_string
    (64) value -> . literal_boolean
    (65) value -> . literal_char
    (66) value -> . literal_float
    (67) value -> . identifier
    (68) value -> . function_call
    (69) value -> . array
    (70) literal_int -> . INT_LITERAL
    (71) literal_double -> . DOUBLE_LITERAL
    (72) literal_string -> . STRING_LITERAL
    (73) literal_boolean -> . BOOLEAN_LITERAL
    (74) literal_char -> . CHAR_LITERAL
    (75) literal_float -> . FLOAT_LITERAL
    (76) identifier -> . ID
    (77) identifier -> . ID L_S_BRACKET expression R_S_BRACKET
    (83) function_call -> . ID L_PAREN arguments_list R_PAREN
    (78) array -> . L_S_BRACKET values_list R_S_BRACKET
    (79) array -> . L_BRACKET R_BRACKET

    L_PAREN         shift and go to state 22
    MINUS           shift and go to state 21
    NOT             shift and go to state 24
    INT_LITERAL     shift and go to state 34
    DOUBLE_LITERAL  shift and go to state 35
    STRING_LITERAL  shift and go to state 36
    BOOLEAN_LITERAL shift and go to state 37
    CHAR_LITERAL    shift and go to state 38
    FLOAT_LITERAL   shift and go to state 39
    ID              shift and go to state 19
    L_S_BRACKET     shift and go to state 40
    L_BRACKET       shift and go to state 41

    expression                     shift and go to state 77
    value                          shift and go to state 23
    literal_int                    shift and go to state 25
    literal_double                 shift and go to state 26
    literal_string                 shift and go to state 27
    literal_boolean                shift and go to state 28
    literal_char                   shift and go to state 29
    literal_float                  shift and go to state 30
    identifier                     shift and go to state 31
    function_call                  shift and go to state 32
    array                          shift and go to state 33

state 22

    (41) expression -> L_PAREN . expression R_PAREN
    (27) expression -> . expression MULTIPLY expression
    (28) expression -> . expression DIVIDE expression
    (29) expression -> . expression MOD expression
    (30) expression -> . expression POWER expression
    (31) expression -> . expression PLUS expression
    (32) expression -> . expression MINUS expression
    (33) expression -> . expression LESS expression
    (34) expression -> . expression GREATER expression
    (35) expression -> . expression GREATER_EQUAL expression
    (36) expression -> . expression LESS_EQUAL expression
    (37) expression -> . expression EQUALS expression
    (38) expression -> . expression DIFFERENT expression
    (39) expression -> . expression AND expression
    (40) expression -> . expression OR expression
    (41) expression -> . L_PAREN expression R_PAREN
    (42) expression -> . value
    (43) expression -> . MINUS expression
    (44) expression -> . NOT expression
    (61) value -> . literal_int
    (62) value -> . literal_double
    (63) value -> . literal_string
    (64) value -> . literal_boolean
    (65) value -> . literal_char
    (66) value -> . literal_float
    (67) value -> . identifier
    (68) value -> . function_call
    (69) value -> . array
    (70) literal_int -> . INT_LITERAL
    (71) literal_double -> . DOUBLE_LITERAL
    (72) literal_string -> . STRING_LITERAL
    (73) literal_boolean -> . BOOLEAN_LITERAL
    (74) literal_char -> . CHAR_LITERAL
    (75) literal_float -> . FLOAT_LITERAL
    (76) identifier -> . ID
    (77) identifier -> . ID L_S_BRACKET expression R_S_BRACKET
    (83) function_call -> . ID L_PAREN arguments_list R_PAREN
    (78) array -> . L_S_BRACKET values_list R_S_BRACKET
    (79) array -> . L_BRACKET R_BRACKET

    L_PAREN         shift and go to state 22
    MINUS           shift and go to state 21
    NOT             shift and go to state 24
    INT_LITERAL     shift and go to state 34
    DOUBLE_LITERAL  shift and go to state 35
    STRING_LITERAL  shift and go to state 36
    BOOLEAN_LITERAL shift and go to state 37
    CHAR_LITERAL    shift and go to state 38
    FLOAT_LITERAL   shift and go to state 39
    ID              shift and go to state 19
    L_S_BRACKET     shift and go to state 40
    L_BRACKET       shift and go to state 41

    expression                     shift and go to state 78
    value                          shift and go to state 23
    literal_int                    shift and go to state 25
    literal_double                 shift and go to state 26
    literal_string                 shift and go to state 27
    literal_boolean                shift and go to state 28
    literal_char                   shift and go to state 29
    literal_float                  shift and go to state 30
    identifier                     shift and go to state 31
    function_call                  shift and go to state 32
    array                          shift and go to state 33

state 23

    (42) expression -> value .

    MULTIPLY        reduce using rule 42 (expression -> value .)
    DIVIDE          reduce using rule 42 (expression -> value .)
    MOD             reduce using rule 42 (expression -> value .)
    POWER           reduce using rule 42 (expression -> value .)
    PLUS            reduce using rule 42 (expression -> value .)
    MINUS           reduce using rule 42 (expression -> value .)
    LESS            reduce using rule 42 (expression -> value .)
    GREATER         reduce using rule 42 (expression -> value .)
    GREATER_EQUAL   reduce using rule 42 (expression -> value .)
    LESS_EQUAL      reduce using rule 42 (expression -> value .)
    EQUALS          reduce using rule 42 (expression -> value .)
    DIFFERENT       reduce using rule 42 (expression -> value .)
    AND             reduce using rule 42 (expression -> value .)
    OR              reduce using rule 42 (expression -> value .)
    SEMICOLON       reduce using rule 42 (expression -> value .)
    R_PAREN         reduce using rule 42 (expression -> value .)
    R_S_BRACKET     reduce using rule 42 (expression -> value .)
    COMMA           reduce using rule 42 (expression -> value .)
    L_BRACKET       reduce using rule 42 (expression -> value .)


state 24

    (44) expression -> NOT . expression
    (27) expression -> . expression MULTIPLY expression
    (28) expression -> . expression DIVIDE expression
    (29) expression -> . expression MOD expression
    (30) expression -> . expression POWER expression
    (31) expression -> . expression PLUS expression
    (32) expression -> . expression MINUS expression
    (33) expression -> . expression LESS expression
    (34) expression -> . expression GREATER expression
    (35) expression -> . expression GREATER_EQUAL expression
    (36) expression -> . expression LESS_EQUAL expression
    (37) expression -> . expression EQUALS expression
    (38) expression -> . expression DIFFERENT expression
    (39) expression -> . expression AND expression
    (40) expression -> . expression OR expression
    (41) expression -> . L_PAREN expression R_PAREN
    (42) expression -> . value
    (43) expression -> . MINUS expression
    (44) expression -> . NOT expression
    (61) value -> . literal_int
    (62) value -> . literal_double
    (63) value -> . literal_string
    (64) value -> . literal_boolean
    (65) value -> . literal_char
    (66) value -> . literal_float
    (67) value -> . identifier
    (68) value -> . function_call
    (69) value -> . array
    (70) literal_int -> . INT_LITERAL
    (71) literal_double -> . DOUBLE_LITERAL
    (72) literal_string -> . STRING_LITERAL
    (73) literal_boolean -> . BOOLEAN_LITERAL
    (74) literal_char -> . CHAR_LITERAL
    (75) literal_float -> . FLOAT_LITERAL
    (76) identifier -> . ID
    (77) identifier -> . ID L_S_BRACKET expression R_S_BRACKET
    (83) function_call -> . ID L_PAREN arguments_list R_PAREN
    (78) array -> . L_S_BRACKET values_list R_S_BRACKET
    (79) array -> . L_BRACKET R_BRACKET

    L_PAREN         shift and go to state 22
    MINUS           shift and go to state 21
    NOT             shift and go to state 24
    INT_LITERAL     shift and go to state 34
    DOUBLE_LITERAL  shift and go to state 35
    STRING_LITERAL  shift and go to state 36
    BOOLEAN_LITERAL shift and go to state 37
    CHAR_LITERAL    shift and go to state 38
    FLOAT_LITERAL   shift and go to state 39
    ID              shift and go to state 19
    L_S_BRACKET     shift and go to state 40
    L_BRACKET       shift and go to state 41

    expression                     shift and go to state 79
    value                          shift and go to state 23
    literal_int                    shift and go to state 25
    literal_double                 shift and go to state 26
    literal_string                 shift and go to state 27
    literal_boolean                shift and go to state 28
    literal_char                   shift and go to state 29
    literal_float                  shift and go to state 30
    identifier                     shift and go to state 31
    function_call                  shift and go to state 32
    array                          shift and go to state 33

state 25

    (61) value -> literal_int .

    MULTIPLY        reduce using rule 61 (value -> literal_int .)
    DIVIDE          reduce using rule 61 (value -> literal_int .)
    MOD             reduce using rule 61 (value -> literal_int .)
    POWER           reduce using rule 61 (value -> literal_int .)
    PLUS            reduce using rule 61 (value -> literal_int .)
    MINUS           reduce using rule 61 (value -> literal_int .)
    LESS            reduce using rule 61 (value -> literal_int .)
    GREATER         reduce using rule 61 (value -> literal_int .)
    GREATER_EQUAL   reduce using rule 61 (value -> literal_int .)
    LESS_EQUAL      reduce using rule 61 (value -> literal_int .)
    EQUALS          reduce using rule 61 (value -> literal_int .)
    DIFFERENT       reduce using rule 61 (value -> literal_int .)
    AND             reduce using rule 61 (value -> literal_int .)
    OR              reduce using rule 61 (value -> literal_int .)
    SEMICOLON       reduce using rule 61 (value -> literal_int .)
    R_PAREN         reduce using rule 61 (value -> literal_int .)
    R_S_BRACKET     reduce using rule 61 (value -> literal_int .)
    COMMA           reduce using rule 61 (value -> literal_int .)
    L_BRACKET       reduce using rule 61 (value -> literal_int .)


state 26

    (62) value -> literal_double .

    MULTIPLY        reduce using rule 62 (value -> literal_double .)
    DIVIDE          reduce using rule 62 (value -> literal_double .)
    MOD             reduce using rule 62 (value -> literal_double .)
    POWER           reduce using rule 62 (value -> literal_double .)
    PLUS            reduce using rule 62 (value -> literal_double .)
    MINUS           reduce using rule 62 (value -> literal_double .)
    LESS            reduce using rule 62 (value -> literal_double .)
    GREATER         reduce using rule 62 (value -> literal_double .)
    GREATER_EQUAL   reduce using rule 62 (value -> literal_double .)
    LESS_EQUAL      reduce using rule 62 (value -> literal_double .)
    EQUALS          reduce using rule 62 (value -> literal_double .)
    DIFFERENT       reduce using rule 62 (value -> literal_double .)
    AND             reduce using rule 62 (value -> literal_double .)
    OR              reduce using rule 62 (value -> literal_double .)
    SEMICOLON       reduce using rule 62 (value -> literal_double .)
    R_PAREN         reduce using rule 62 (value -> literal_double .)
    R_S_BRACKET     reduce using rule 62 (value -> literal_double .)
    COMMA           reduce using rule 62 (value -> literal_double .)
    L_BRACKET       reduce using rule 62 (value -> literal_double .)


state 27

    (63) value -> literal_string .

    MULTIPLY        reduce using rule 63 (value -> literal_string .)
    DIVIDE          reduce using rule 63 (value -> literal_string .)
    MOD             reduce using rule 63 (value -> literal_string .)
    POWER           reduce using rule 63 (value -> literal_string .)
    PLUS            reduce using rule 63 (value -> literal_string .)
    MINUS           reduce using rule 63 (value -> literal_string .)
    LESS            reduce using rule 63 (value -> literal_string .)
    GREATER         reduce using rule 63 (value -> literal_string .)
    GREATER_EQUAL   reduce using rule 63 (value -> literal_string .)
    LESS_EQUAL      reduce using rule 63 (value -> literal_string .)
    EQUALS          reduce using rule 63 (value -> literal_string .)
    DIFFERENT       reduce using rule 63 (value -> literal_string .)
    AND             reduce using rule 63 (value -> literal_string .)
    OR              reduce using rule 63 (value -> literal_string .)
    SEMICOLON       reduce using rule 63 (value -> literal_string .)
    R_PAREN         reduce using rule 63 (value -> literal_string .)
    R_S_BRACKET     reduce using rule 63 (value -> literal_string .)
    COMMA           reduce using rule 63 (value -> literal_string .)
    L_BRACKET       reduce using rule 63 (value -> literal_string .)


state 28

    (64) value -> literal_boolean .

    MULTIPLY        reduce using rule 64 (value -> literal_boolean .)
    DIVIDE          reduce using rule 64 (value -> literal_boolean .)
    MOD             reduce using rule 64 (value -> literal_boolean .)
    POWER           reduce using rule 64 (value -> literal_boolean .)
    PLUS            reduce using rule 64 (value -> literal_boolean .)
    MINUS           reduce using rule 64 (value -> literal_boolean .)
    LESS            reduce using rule 64 (value -> literal_boolean .)
    GREATER         reduce using rule 64 (value -> literal_boolean .)
    GREATER_EQUAL   reduce using rule 64 (value -> literal_boolean .)
    LESS_EQUAL      reduce using rule 64 (value -> literal_boolean .)
    EQUALS          reduce using rule 64 (value -> literal_boolean .)
    DIFFERENT       reduce using rule 64 (value -> literal_boolean .)
    AND             reduce using rule 64 (value -> literal_boolean .)
    OR              reduce using rule 64 (value -> literal_boolean .)
    SEMICOLON       reduce using rule 64 (value -> literal_boolean .)
    R_PAREN         reduce using rule 64 (value -> literal_boolean .)
    R_S_BRACKET     reduce using rule 64 (value -> literal_boolean .)
    COMMA           reduce using rule 64 (value -> literal_boolean .)
    L_BRACKET       reduce using rule 64 (value -> literal_boolean .)


state 29

    (65) value -> literal_char .

    MULTIPLY        reduce using rule 65 (value -> literal_char .)
    DIVIDE          reduce using rule 65 (value -> literal_char .)
    MOD             reduce using rule 65 (value -> literal_char .)
    POWER           reduce using rule 65 (value -> literal_char .)
    PLUS            reduce using rule 65 (value -> literal_char .)
    MINUS           reduce using rule 65 (value -> literal_char .)
    LESS            reduce using rule 65 (value -> literal_char .)
    GREATER         reduce using rule 65 (value -> literal_char .)
    GREATER_EQUAL   reduce using rule 65 (value -> literal_char .)
    LESS_EQUAL      reduce using rule 65 (value -> literal_char .)
    EQUALS          reduce using rule 65 (value -> literal_char .)
    DIFFERENT       reduce using rule 65 (value -> literal_char .)
    AND             reduce using rule 65 (value -> literal_char .)
    OR              reduce using rule 65 (value -> literal_char .)
    SEMICOLON       reduce using rule 65 (value -> literal_char .)
    R_PAREN         reduce using rule 65 (value -> literal_char .)
    R_S_BRACKET     reduce using rule 65 (value -> literal_char .)
    COMMA           reduce using rule 65 (value -> literal_char .)
    L_BRACKET       reduce using rule 65 (value -> literal_char .)


state 30

    (66) value -> literal_float .

    MULTIPLY        reduce using rule 66 (value -> literal_float .)
    DIVIDE          reduce using rule 66 (value -> literal_float .)
    MOD             reduce using rule 66 (value -> literal_float .)
    POWER           reduce using rule 66 (value -> literal_float .)
    PLUS            reduce using rule 66 (value -> literal_float .)
    MINUS           reduce using rule 66 (value -> literal_float .)
    LESS            reduce using rule 66 (value -> literal_float .)
    GREATER         reduce using rule 66 (value -> literal_float .)
    GREATER_EQUAL   reduce using rule 66 (value -> literal_float .)
    LESS_EQUAL      reduce using rule 66 (value -> literal_float .)
    EQUALS          reduce using rule 66 (value -> literal_float .)
    DIFFERENT       reduce using rule 66 (value -> literal_float .)
    AND             reduce using rule 66 (value -> literal_float .)
    OR              reduce using rule 66 (value -> literal_float .)
    SEMICOLON       reduce using rule 66 (value -> literal_float .)
    R_PAREN         reduce using rule 66 (value -> literal_float .)
    R_S_BRACKET     reduce using rule 66 (value -> literal_float .)
    COMMA           reduce using rule 66 (value -> literal_float .)
    L_BRACKET       reduce using rule 66 (value -> literal_float .)


state 31

    (67) value -> identifier .

    MULTIPLY        reduce using rule 67 (value -> identifier .)
    DIVIDE          reduce using rule 67 (value -> identifier .)
    MOD             reduce using rule 67 (value -> identifier .)
    POWER           reduce using rule 67 (value -> identifier .)
    PLUS            reduce using rule 67 (value -> identifier .)
    MINUS           reduce using rule 67 (value -> identifier .)
    LESS            reduce using rule 67 (value -> identifier .)
    GREATER         reduce using rule 67 (value -> identifier .)
    GREATER_EQUAL   reduce using rule 67 (value -> identifier .)
    LESS_EQUAL      reduce using rule 67 (value -> identifier .)
    EQUALS          reduce using rule 67 (value -> identifier .)
    DIFFERENT       reduce using rule 67 (value -> identifier .)
    AND             reduce using rule 67 (value -> identifier .)
    OR              reduce using rule 67 (value -> identifier .)
    SEMICOLON       reduce using rule 67 (value -> identifier .)
    R_PAREN         reduce using rule 67 (value -> identifier .)
    R_S_BRACKET     reduce using rule 67 (value -> identifier .)
    COMMA           reduce using rule 67 (value -> identifier .)
    L_BRACKET       reduce using rule 67 (value -> identifier .)


state 32

    (68) value -> function_call .

    MULTIPLY        reduce using rule 68 (value -> function_call .)
    DIVIDE          reduce using rule 68 (value -> function_call .)
    MOD             reduce using rule 68 (value -> function_call .)
    POWER           reduce using rule 68 (value -> function_call .)
    PLUS            reduce using rule 68 (value -> function_call .)
    MINUS           reduce using rule 68 (value -> function_call .)
    LESS            reduce using rule 68 (value -> function_call .)
    GREATER         reduce using rule 68 (value -> function_call .)
    GREATER_EQUAL   reduce using rule 68 (value -> function_call .)
    LESS_EQUAL      reduce using rule 68 (value -> function_call .)
    EQUALS          reduce using rule 68 (value -> function_call .)
    DIFFERENT       reduce using rule 68 (value -> function_call .)
    AND             reduce using rule 68 (value -> function_call .)
    OR              reduce using rule 68 (value -> function_call .)
    SEMICOLON       reduce using rule 68 (value -> function_call .)
    R_PAREN         reduce using rule 68 (value -> function_call .)
    R_S_BRACKET     reduce using rule 68 (value -> function_call .)
    COMMA           reduce using rule 68 (value -> function_call .)
    L_BRACKET       reduce using rule 68 (value -> function_call .)


state 33

    (69) value -> array .

    MULTIPLY        reduce using rule 69 (value -> array .)
    DIVIDE          reduce using rule 69 (value -> array .)
    MOD             reduce using rule 69 (value -> array .)
    POWER           reduce using rule 69 (value -> array .)
    PLUS            reduce using rule 69 (value -> array .)
    MINUS           reduce using rule 69 (value -> array .)
    LESS            reduce using rule 69 (value -> array .)
    GREATER         reduce using rule 69 (value -> array .)
    GREATER_EQUAL   reduce using rule 69 (value -> array .)
    LESS_EQUAL      reduce using rule 69 (value -> array .)
    EQUALS          reduce using rule 69 (value -> array .)
    DIFFERENT       reduce using rule 69 (value -> array .)
    AND             reduce using rule 69 (value -> array .)
    OR              reduce using rule 69 (value -> array .)
    SEMICOLON       reduce using rule 69 (value -> array .)
    R_PAREN         reduce using rule 69 (value -> array .)
    R_S_BRACKET     reduce using rule 69 (value -> array .)
    COMMA           reduce using rule 69 (value -> array .)
    L_BRACKET       reduce using rule 69 (value -> array .)


state 34

    (70) literal_int -> INT_LITERAL .

    MULTIPLY        reduce using rule 70 (literal_int -> INT_LITERAL .)
    DIVIDE          reduce using rule 70 (literal_int -> INT_LITERAL .)
    MOD             reduce using rule 70 (literal_int -> INT_LITERAL .)
    POWER           reduce using rule 70 (literal_int -> INT_LITERAL .)
    PLUS            reduce using rule 70 (literal_int -> INT_LITERAL .)
    MINUS           reduce using rule 70 (literal_int -> INT_LITERAL .)
    LESS            reduce using rule 70 (literal_int -> INT_LITERAL .)
    GREATER         reduce using rule 70 (literal_int -> INT_LITERAL .)
    GREATER_EQUAL   reduce using rule 70 (literal_int -> INT_LITERAL .)
    LESS_EQUAL      reduce using rule 70 (literal_int -> INT_LITERAL .)
    EQUALS          reduce using rule 70 (literal_int -> INT_LITERAL .)
    DIFFERENT       reduce using rule 70 (literal_int -> INT_LITERAL .)
    AND             reduce using rule 70 (literal_int -> INT_LITERAL .)
    OR              reduce using rule 70 (literal_int -> INT_LITERAL .)
    SEMICOLON       reduce using rule 70 (literal_int -> INT_LITERAL .)
    R_PAREN         reduce using rule 70 (literal_int -> INT_LITERAL .)
    R_S_BRACKET     reduce using rule 70 (literal_int -> INT_LITERAL .)
    COMMA           reduce using rule 70 (literal_int -> INT_LITERAL .)
    L_BRACKET       reduce using rule 70 (literal_int -> INT_LITERAL .)


state 35

    (71) literal_double -> DOUBLE_LITERAL .

    MULTIPLY        reduce using rule 71 (literal_double -> DOUBLE_LITERAL .)
    DIVIDE          reduce using rule 71 (literal_double -> DOUBLE_LITERAL .)
    MOD             reduce using rule 71 (literal_double -> DOUBLE_LITERAL .)
    POWER           reduce using rule 71 (literal_double -> DOUBLE_LITERAL .)
    PLUS            reduce using rule 71 (literal_double -> DOUBLE_LITERAL .)
    MINUS           reduce using rule 71 (literal_double -> DOUBLE_LITERAL .)
    LESS            reduce using rule 71 (literal_double -> DOUBLE_LITERAL .)
    GREATER         reduce using rule 71 (literal_double -> DOUBLE_LITERAL .)
    GREATER_EQUAL   reduce using rule 71 (literal_double -> DOUBLE_LITERAL .)
    LESS_EQUAL      reduce using rule 71 (literal_double -> DOUBLE_LITERAL .)
    EQUALS          reduce using rule 71 (literal_double -> DOUBLE_LITERAL .)
    DIFFERENT       reduce using rule 71 (literal_double -> DOUBLE_LITERAL .)
    AND             reduce using rule 71 (literal_double -> DOUBLE_LITERAL .)
    OR              reduce using rule 71 (literal_double -> DOUBLE_LITERAL .)
    SEMICOLON       reduce using rule 71 (literal_double -> DOUBLE_LITERAL .)
    R_PAREN         reduce using rule 71 (literal_double -> DOUBLE_LITERAL .)
    R_S_BRACKET     reduce using rule 71 (literal_double -> DOUBLE_LITERAL .)
    COMMA           reduce using rule 71 (literal_double -> DOUBLE_LITERAL .)
    L_BRACKET       reduce using rule 71 (literal_double -> DOUBLE_LITERAL .)


state 36

    (72) literal_string -> STRING_LITERAL .

    MULTIPLY        reduce using rule 72 (literal_string -> STRING_LITERAL .)
    DIVIDE          reduce using rule 72 (literal_string -> STRING_LITERAL .)
    MOD             reduce using rule 72 (literal_string -> STRING_LITERAL .)
    POWER           reduce using rule 72 (literal_string -> STRING_LITERAL .)
    PLUS            reduce using rule 72 (literal_string -> STRING_LITERAL .)
    MINUS           reduce using rule 72 (literal_string -> STRING_LITERAL .)
    LESS            reduce using rule 72 (literal_string -> STRING_LITERAL .)
    GREATER         reduce using rule 72 (literal_string -> STRING_LITERAL .)
    GREATER_EQUAL   reduce using rule 72 (literal_string -> STRING_LITERAL .)
    LESS_EQUAL      reduce using rule 72 (literal_string -> STRING_LITERAL .)
    EQUALS          reduce using rule 72 (literal_string -> STRING_LITERAL .)
    DIFFERENT       reduce using rule 72 (literal_string -> STRING_LITERAL .)
    AND             reduce using rule 72 (literal_string -> STRING_LITERAL .)
    OR              reduce using rule 72 (literal_string -> STRING_LITERAL .)
    SEMICOLON       reduce using rule 72 (literal_string -> STRING_LITERAL .)
    R_PAREN         reduce using rule 72 (literal_string -> STRING_LITERAL .)
    R_S_BRACKET     reduce using rule 72 (literal_string -> STRING_LITERAL .)
    COMMA           reduce using rule 72 (literal_string -> STRING_LITERAL .)
    L_BRACKET       reduce using rule 72 (literal_string -> STRING_LITERAL .)


state 37

    (73) literal_boolean -> BOOLEAN_LITERAL .

    MULTIPLY        reduce using rule 73 (literal_boolean -> BOOLEAN_LITERAL .)
    DIVIDE          reduce using rule 73 (literal_boolean -> BOOLEAN_LITERAL .)
    MOD             reduce using rule 73 (literal_boolean -> BOOLEAN_LITERAL .)
    POWER           reduce using rule 73 (literal_boolean -> BOOLEAN_LITERAL .)
    PLUS            reduce using rule 73 (literal_boolean -> BOOLEAN_LITERAL .)
    MINUS           reduce using rule 73 (literal_boolean -> BOOLEAN_LITERAL .)
    LESS            reduce using rule 73 (literal_boolean -> BOOLEAN_LITERAL .)
    GREATER         reduce using rule 73 (literal_boolean -> BOOLEAN_LITERAL .)
    GREATER_EQUAL   reduce using rule 73 (literal_boolean -> BOOLEAN_LITERAL .)
    LESS_EQUAL      reduce using rule 73 (literal_boolean -> BOOLEAN_LITERAL .)
    EQUALS          reduce using rule 73 (literal_boolean -> BOOLEAN_LITERAL .)
    DIFFERENT       reduce using rule 73 (literal_boolean -> BOOLEAN_LITERAL .)
    AND             reduce using rule 73 (literal_boolean -> BOOLEAN_LITERAL .)
    OR              reduce using rule 73 (literal_boolean -> BOOLEAN_LITERAL .)
    SEMICOLON       reduce using rule 73 (literal_boolean -> BOOLEAN_LITERAL .)
    R_PAREN         reduce using rule 73 (literal_boolean -> BOOLEAN_LITERAL .)
    R_S_BRACKET     reduce using rule 73 (literal_boolean -> BOOLEAN_LITERAL .)
    COMMA           reduce using rule 73 (literal_boolean -> BOOLEAN_LITERAL .)
    L_BRACKET       reduce using rule 73 (literal_boolean -> BOOLEAN_LITERAL .)


state 38

    (74) literal_char -> CHAR_LITERAL .

    MULTIPLY        reduce using rule 74 (literal_char -> CHAR_LITERAL .)
    DIVIDE          reduce using rule 74 (literal_char -> CHAR_LITERAL .)
    MOD             reduce using rule 74 (literal_char -> CHAR_LITERAL .)
    POWER           reduce using rule 74 (literal_char -> CHAR_LITERAL .)
    PLUS            reduce using rule 74 (literal_char -> CHAR_LITERAL .)
    MINUS           reduce using rule 74 (literal_char -> CHAR_LITERAL .)
    LESS            reduce using rule 74 (literal_char -> CHAR_LITERAL .)
    GREATER         reduce using rule 74 (literal_char -> CHAR_LITERAL .)
    GREATER_EQUAL   reduce using rule 74 (literal_char -> CHAR_LITERAL .)
    LESS_EQUAL      reduce using rule 74 (literal_char -> CHAR_LITERAL .)
    EQUALS          reduce using rule 74 (literal_char -> CHAR_LITERAL .)
    DIFFERENT       reduce using rule 74 (literal_char -> CHAR_LITERAL .)
    AND             reduce using rule 74 (literal_char -> CHAR_LITERAL .)
    OR              reduce using rule 74 (literal_char -> CHAR_LITERAL .)
    SEMICOLON       reduce using rule 74 (literal_char -> CHAR_LITERAL .)
    R_PAREN         reduce using rule 74 (literal_char -> CHAR_LITERAL .)
    R_S_BRACKET     reduce using rule 74 (literal_char -> CHAR_LITERAL .)
    COMMA           reduce using rule 74 (literal_char -> CHAR_LITERAL .)
    L_BRACKET       reduce using rule 74 (literal_char -> CHAR_LITERAL .)


state 39

    (75) literal_float -> FLOAT_LITERAL .

    MULTIPLY        reduce using rule 75 (literal_float -> FLOAT_LITERAL .)
    DIVIDE          reduce using rule 75 (literal_float -> FLOAT_LITERAL .)
    MOD             reduce using rule 75 (literal_float -> FLOAT_LITERAL .)
    POWER           reduce using rule 75 (literal_float -> FLOAT_LITERAL .)
    PLUS            reduce using rule 75 (literal_float -> FLOAT_LITERAL .)
    MINUS           reduce using rule 75 (literal_float -> FLOAT_LITERAL .)
    LESS            reduce using rule 75 (literal_float -> FLOAT_LITERAL .)
    GREATER         reduce using rule 75 (literal_float -> FLOAT_LITERAL .)
    GREATER_EQUAL   reduce using rule 75 (literal_float -> FLOAT_LITERAL .)
    LESS_EQUAL      reduce using rule 75 (literal_float -> FLOAT_LITERAL .)
    EQUALS          reduce using rule 75 (literal_float -> FLOAT_LITERAL .)
    DIFFERENT       reduce using rule 75 (literal_float -> FLOAT_LITERAL .)
    AND             reduce using rule 75 (literal_float -> FLOAT_LITERAL .)
    OR              reduce using rule 75 (literal_float -> FLOAT_LITERAL .)
    SEMICOLON       reduce using rule 75 (literal_float -> FLOAT_LITERAL .)
    R_PAREN         reduce using rule 75 (literal_float -> FLOAT_LITERAL .)
    R_S_BRACKET     reduce using rule 75 (literal_float -> FLOAT_LITERAL .)
    COMMA           reduce using rule 75 (literal_float -> FLOAT_LITERAL .)
    L_BRACKET       reduce using rule 75 (literal_float -> FLOAT_LITERAL .)


state 40

    (78) array -> L_S_BRACKET . values_list R_S_BRACKET
    (80) values_list -> . value COMMA values_list
    (81) values_list -> . value
    (82) values_list -> .
    (61) value -> . literal_int
    (62) value -> . literal_double
    (63) value -> . literal_string
    (64) value -> . literal_boolean
    (65) value -> . literal_char
    (66) value -> . literal_float
    (67) value -> . identifier
    (68) value -> . function_call
    (69) value -> . array
    (70) literal_int -> . INT_LITERAL
    (71) literal_double -> . DOUBLE_LITERAL
    (72) literal_string -> . STRING_LITERAL
    (73) literal_boolean -> . BOOLEAN_LITERAL
    (74) literal_char -> . CHAR_LITERAL
    (75) literal_float -> . FLOAT_LITERAL
    (76) identifier -> . ID
    (77) identifier -> . ID L_S_BRACKET expression R_S_BRACKET
    (83) function_call -> . ID L_PAREN arguments_list R_PAREN
    (78) array -> . L_S_BRACKET values_list R_S_BRACKET
    (79) array -> . L_BRACKET R_BRACKET

    R_S_BRACKET     reduce using rule 82 (values_list -> .)
    INT_LITERAL     shift and go to state 34
    DOUBLE_LITERAL  shift and go to state 35
    STRING_LITERAL  shift and go to state 36
    BOOLEAN_LITERAL shift and go to state 37
    CHAR_LITERAL    shift and go to state 38
    FLOAT_LITERAL   shift and go to state 39
    ID              shift and go to state 19
    L_S_BRACKET     shift and go to state 40
    L_BRACKET       shift and go to state 41

    values_list                    shift and go to state 80
    value                          shift and go to state 81
    literal_int                    shift and go to state 25
    literal_double                 shift and go to state 26
    literal_string                 shift and go to state 27
    literal_boolean                shift and go to state 28
    literal_char                   shift and go to state 29
    literal_float                  shift and go to state 30
    identifier                     shift and go to state 31
    function_call                  shift and go to state 32
    array                          shift and go to state 33

state 41

    (79) array -> L_BRACKET . R_BRACKET

    R_BRACKET       shift and go to state 82


state 42

    (8) create_variable -> IMMUTABLE_VARIABLE ID COLON . type t
    (45) type -> . type_int
    (46) type -> . type_double
    (47) type -> . type_string
    (48) type -> . type_boolean
    (49) type -> . type_char
    (50) type -> . type_float
    (51) type -> . type_void
    (52) type -> . type_array
    (53) type_int -> . INT
    (54) type_double -> . DOUBLE
    (55) type_string -> . STRING
    (56) type_boolean -> . BOOLEAN
    (57) type_char -> . CHAR
    (58) type_float -> . FLOAT
    (59) type_void -> . VOID
    (60) type_array -> . L_S_BRACKET type R_S_BRACKET

    INT             shift and go to state 53
    DOUBLE          shift and go to state 54
    STRING          shift and go to state 55
    BOOLEAN         shift and go to state 56
    CHAR            shift and go to state 57
    FLOAT           shift and go to state 58
    VOID            shift and go to state 59
    L_S_BRACKET     shift and go to state 60

    type                           shift and go to state 83
    type_int                       shift and go to state 45
    type_double                    shift and go to state 46
    type_string                    shift and go to state 47
    type_boolean                   shift and go to state 48
    type_char                      shift and go to state 49
    type_float                     shift and go to state 50
    type_void                      shift and go to state 51
    type_array                     shift and go to state 52

state 43

    (12) function -> FUNCTION ID L_PAREN . parameter_list R_PAREN COLON type L_BRACKET block R_BRACKET
    (13) parameter_list -> . create_variable COMMA parameter_list
    (14) parameter_list -> . create_variable
    (7) create_variable -> . MUTABLE_VARIABLE ID COLON type t
    (8) create_variable -> . IMMUTABLE_VARIABLE ID COLON type t

    MUTABLE_VARIABLE shift and go to state 7
    IMMUTABLE_VARIABLE shift and go to state 9

    parameter_list                 shift and go to state 84
    create_variable                shift and go to state 85

state 44

    (7) create_variable -> MUTABLE_VARIABLE ID COLON type . t
    (9) t -> . COLON_EQUALS expression
    (10) t -> .

    COLON_EQUALS    shift and go to state 87
    SEMICOLON       reduce using rule 10 (t -> .)
    COMMA           reduce using rule 10 (t -> .)
    R_PAREN         reduce using rule 10 (t -> .)

    t                              shift and go to state 86

state 45

    (45) type -> type_int .

    COLON_EQUALS    reduce using rule 45 (type -> type_int .)
    SEMICOLON       reduce using rule 45 (type -> type_int .)
    COMMA           reduce using rule 45 (type -> type_int .)
    R_PAREN         reduce using rule 45 (type -> type_int .)
    R_S_BRACKET     reduce using rule 45 (type -> type_int .)
    L_BRACKET       reduce using rule 45 (type -> type_int .)


state 46

    (46) type -> type_double .

    COLON_EQUALS    reduce using rule 46 (type -> type_double .)
    SEMICOLON       reduce using rule 46 (type -> type_double .)
    COMMA           reduce using rule 46 (type -> type_double .)
    R_PAREN         reduce using rule 46 (type -> type_double .)
    R_S_BRACKET     reduce using rule 46 (type -> type_double .)
    L_BRACKET       reduce using rule 46 (type -> type_double .)


state 47

    (47) type -> type_string .

    COLON_EQUALS    reduce using rule 47 (type -> type_string .)
    SEMICOLON       reduce using rule 47 (type -> type_string .)
    COMMA           reduce using rule 47 (type -> type_string .)
    R_PAREN         reduce using rule 47 (type -> type_string .)
    R_S_BRACKET     reduce using rule 47 (type -> type_string .)
    L_BRACKET       reduce using rule 47 (type -> type_string .)


state 48

    (48) type -> type_boolean .

    COLON_EQUALS    reduce using rule 48 (type -> type_boolean .)
    SEMICOLON       reduce using rule 48 (type -> type_boolean .)
    COMMA           reduce using rule 48 (type -> type_boolean .)
    R_PAREN         reduce using rule 48 (type -> type_boolean .)
    R_S_BRACKET     reduce using rule 48 (type -> type_boolean .)
    L_BRACKET       reduce using rule 48 (type -> type_boolean .)


state 49

    (49) type -> type_char .

    COLON_EQUALS    reduce using rule 49 (type -> type_char .)
    SEMICOLON       reduce using rule 49 (type -> type_char .)
    COMMA           reduce using rule 49 (type -> type_char .)
    R_PAREN         reduce using rule 49 (type -> type_char .)
    R_S_BRACKET     reduce using rule 49 (type -> type_char .)
    L_BRACKET       reduce using rule 49 (type -> type_char .)


state 50

    (50) type -> type_float .

    COLON_EQUALS    reduce using rule 50 (type -> type_float .)
    SEMICOLON       reduce using rule 50 (type -> type_float .)
    COMMA           reduce using rule 50 (type -> type_float .)
    R_PAREN         reduce using rule 50 (type -> type_float .)
    R_S_BRACKET     reduce using rule 50 (type -> type_float .)
    L_BRACKET       reduce using rule 50 (type -> type_float .)


state 51

    (51) type -> type_void .

    COLON_EQUALS    reduce using rule 51 (type -> type_void .)
    SEMICOLON       reduce using rule 51 (type -> type_void .)
    COMMA           reduce using rule 51 (type -> type_void .)
    R_PAREN         reduce using rule 51 (type -> type_void .)
    R_S_BRACKET     reduce using rule 51 (type -> type_void .)
    L_BRACKET       reduce using rule 51 (type -> type_void .)


state 52

    (52) type -> type_array .

    COLON_EQUALS    reduce using rule 52 (type -> type_array .)
    SEMICOLON       reduce using rule 52 (type -> type_array .)
    COMMA           reduce using rule 52 (type -> type_array .)
    R_PAREN         reduce using rule 52 (type -> type_array .)
    R_S_BRACKET     reduce using rule 52 (type -> type_array .)
    L_BRACKET       reduce using rule 52 (type -> type_array .)


state 53

    (53) type_int -> INT .

    COLON_EQUALS    reduce using rule 53 (type_int -> INT .)
    SEMICOLON       reduce using rule 53 (type_int -> INT .)
    COMMA           reduce using rule 53 (type_int -> INT .)
    R_PAREN         reduce using rule 53 (type_int -> INT .)
    R_S_BRACKET     reduce using rule 53 (type_int -> INT .)
    L_BRACKET       reduce using rule 53 (type_int -> INT .)


state 54

    (54) type_double -> DOUBLE .

    COLON_EQUALS    reduce using rule 54 (type_double -> DOUBLE .)
    SEMICOLON       reduce using rule 54 (type_double -> DOUBLE .)
    COMMA           reduce using rule 54 (type_double -> DOUBLE .)
    R_PAREN         reduce using rule 54 (type_double -> DOUBLE .)
    R_S_BRACKET     reduce using rule 54 (type_double -> DOUBLE .)
    L_BRACKET       reduce using rule 54 (type_double -> DOUBLE .)


state 55

    (55) type_string -> STRING .

    COLON_EQUALS    reduce using rule 55 (type_string -> STRING .)
    SEMICOLON       reduce using rule 55 (type_string -> STRING .)
    COMMA           reduce using rule 55 (type_string -> STRING .)
    R_PAREN         reduce using rule 55 (type_string -> STRING .)
    R_S_BRACKET     reduce using rule 55 (type_string -> STRING .)
    L_BRACKET       reduce using rule 55 (type_string -> STRING .)


state 56

    (56) type_boolean -> BOOLEAN .

    COLON_EQUALS    reduce using rule 56 (type_boolean -> BOOLEAN .)
    SEMICOLON       reduce using rule 56 (type_boolean -> BOOLEAN .)
    COMMA           reduce using rule 56 (type_boolean -> BOOLEAN .)
    R_PAREN         reduce using rule 56 (type_boolean -> BOOLEAN .)
    R_S_BRACKET     reduce using rule 56 (type_boolean -> BOOLEAN .)
    L_BRACKET       reduce using rule 56 (type_boolean -> BOOLEAN .)


state 57

    (57) type_char -> CHAR .

    COLON_EQUALS    reduce using rule 57 (type_char -> CHAR .)
    SEMICOLON       reduce using rule 57 (type_char -> CHAR .)
    COMMA           reduce using rule 57 (type_char -> CHAR .)
    R_PAREN         reduce using rule 57 (type_char -> CHAR .)
    R_S_BRACKET     reduce using rule 57 (type_char -> CHAR .)
    L_BRACKET       reduce using rule 57 (type_char -> CHAR .)


state 58

    (58) type_float -> FLOAT .

    COLON_EQUALS    reduce using rule 58 (type_float -> FLOAT .)
    SEMICOLON       reduce using rule 58 (type_float -> FLOAT .)
    COMMA           reduce using rule 58 (type_float -> FLOAT .)
    R_PAREN         reduce using rule 58 (type_float -> FLOAT .)
    R_S_BRACKET     reduce using rule 58 (type_float -> FLOAT .)
    L_BRACKET       reduce using rule 58 (type_float -> FLOAT .)


state 59

    (59) type_void -> VOID .

    COLON_EQUALS    reduce using rule 59 (type_void -> VOID .)
    SEMICOLON       reduce using rule 59 (type_void -> VOID .)
    COMMA           reduce using rule 59 (type_void -> VOID .)
    R_PAREN         reduce using rule 59 (type_void -> VOID .)
    R_S_BRACKET     reduce using rule 59 (type_void -> VOID .)
    L_BRACKET       reduce using rule 59 (type_void -> VOID .)


state 60

    (60) type_array -> L_S_BRACKET . type R_S_BRACKET
    (45) type -> . type_int
    (46) type -> . type_double
    (47) type -> . type_string
    (48) type -> . type_boolean
    (49) type -> . type_char
    (50) type -> . type_float
    (51) type -> . type_void
    (52) type -> . type_array
    (53) type_int -> . INT
    (54) type_double -> . DOUBLE
    (55) type_string -> . STRING
    (56) type_boolean -> . BOOLEAN
    (57) type_char -> . CHAR
    (58) type_float -> . FLOAT
    (59) type_void -> . VOID
    (60) type_array -> . L_S_BRACKET type R_S_BRACKET

    INT             shift and go to state 53
    DOUBLE          shift and go to state 54
    STRING          shift and go to state 55
    BOOLEAN         shift and go to state 56
    CHAR            shift and go to state 57
    FLOAT           shift and go to state 58
    VOID            shift and go to state 59
    L_S_BRACKET     shift and go to state 60

    type                           shift and go to state 88
    type_int                       shift and go to state 45
    type_double                    shift and go to state 46
    type_string                    shift and go to state 47
    type_boolean                   shift and go to state 48
    type_char                      shift and go to state 49
    type_float                     shift and go to state 50
    type_void                      shift and go to state 51
    type_array                     shift and go to state 52

state 61

    (77) identifier -> ID L_S_BRACKET . expression R_S_BRACKET
    (27) expression -> . expression MULTIPLY expression
    (28) expression -> . expression DIVIDE expression
    (29) expression -> . expression MOD expression
    (30) expression -> . expression POWER expression
    (31) expression -> . expression PLUS expression
    (32) expression -> . expression MINUS expression
    (33) expression -> . expression LESS expression
    (34) expression -> . expression GREATER expression
    (35) expression -> . expression GREATER_EQUAL expression
    (36) expression -> . expression LESS_EQUAL expression
    (37) expression -> . expression EQUALS expression
    (38) expression -> . expression DIFFERENT expression
    (39) expression -> . expression AND expression
    (40) expression -> . expression OR expression
    (41) expression -> . L_PAREN expression R_PAREN
    (42) expression -> . value
    (43) expression -> . MINUS expression
    (44) expression -> . NOT expression
    (61) value -> . literal_int
    (62) value -> . literal_double
    (63) value -> . literal_string
    (64) value -> . literal_boolean
    (65) value -> . literal_char
    (66) value -> . literal_float
    (67) value -> . identifier
    (68) value -> . function_call
    (69) value -> . array
    (70) literal_int -> . INT_LITERAL
    (71) literal_double -> . DOUBLE_LITERAL
    (72) literal_string -> . STRING_LITERAL
    (73) literal_boolean -> . BOOLEAN_LITERAL
    (74) literal_char -> . CHAR_LITERAL
    (75) literal_float -> . FLOAT_LITERAL
    (76) identifier -> . ID
    (77) identifier -> . ID L_S_BRACKET expression R_S_BRACKET
    (83) function_call -> . ID L_PAREN arguments_list R_PAREN
    (78) array -> . L_S_BRACKET values_list R_S_BRACKET
    (79) array -> . L_BRACKET R_BRACKET

    L_PAREN         shift and go to state 22
    MINUS           shift and go to state 21
    NOT             shift and go to state 24
    INT_LITERAL     shift and go to state 34
    DOUBLE_LITERAL  shift and go to state 35
    STRING_LITERAL  shift and go to state 36
    BOOLEAN_LITERAL shift and go to state 37
    CHAR_LITERAL    shift and go to state 38
    FLOAT_LITERAL   shift and go to state 39
    ID              shift and go to state 19
    L_S_BRACKET     shift and go to state 40
    L_BRACKET       shift and go to state 41

    expression                     shift and go to state 89
    value                          shift and go to state 23
    literal_int                    shift and go to state 25
    literal_double                 shift and go to state 26
    literal_string                 shift and go to state 27
    literal_boolean                shift and go to state 28
    literal_char                   shift and go to state 29
    literal_float                  shift and go to state 30
    identifier                     shift and go to state 31
    function_call                  shift and go to state 32
    array                          shift and go to state 33

state 62

    (83) function_call -> ID L_PAREN . arguments_list R_PAREN
    (84) arguments_list -> . expression COMMA arguments_list
    (85) arguments_list -> . expression
    (86) arguments_list -> .
    (27) expression -> . expression MULTIPLY expression
    (28) expression -> . expression DIVIDE expression
    (29) expression -> . expression MOD expression
    (30) expression -> . expression POWER expression
    (31) expression -> . expression PLUS expression
    (32) expression -> . expression MINUS expression
    (33) expression -> . expression LESS expression
    (34) expression -> . expression GREATER expression
    (35) expression -> . expression GREATER_EQUAL expression
    (36) expression -> . expression LESS_EQUAL expression
    (37) expression -> . expression EQUALS expression
    (38) expression -> . expression DIFFERENT expression
    (39) expression -> . expression AND expression
    (40) expression -> . expression OR expression
    (41) expression -> . L_PAREN expression R_PAREN
    (42) expression -> . value
    (43) expression -> . MINUS expression
    (44) expression -> . NOT expression
    (61) value -> . literal_int
    (62) value -> . literal_double
    (63) value -> . literal_string
    (64) value -> . literal_boolean
    (65) value -> . literal_char
    (66) value -> . literal_float
    (67) value -> . identifier
    (68) value -> . function_call
    (69) value -> . array
    (70) literal_int -> . INT_LITERAL
    (71) literal_double -> . DOUBLE_LITERAL
    (72) literal_string -> . STRING_LITERAL
    (73) literal_boolean -> . BOOLEAN_LITERAL
    (74) literal_char -> . CHAR_LITERAL
    (75) literal_float -> . FLOAT_LITERAL
    (76) identifier -> . ID
    (77) identifier -> . ID L_S_BRACKET expression R_S_BRACKET
    (83) function_call -> . ID L_PAREN arguments_list R_PAREN
    (78) array -> . L_S_BRACKET values_list R_S_BRACKET
    (79) array -> . L_BRACKET R_BRACKET

    R_PAREN         reduce using rule 86 (arguments_list -> .)
    L_PAREN         shift and go to state 22
    MINUS           shift and go to state 21
    NOT             shift and go to state 24
    INT_LITERAL     shift and go to state 34
    DOUBLE_LITERAL  shift and go to state 35
    STRING_LITERAL  shift and go to state 36
    BOOLEAN_LITERAL shift and go to state 37
    CHAR_LITERAL    shift and go to state 38
    FLOAT_LITERAL   shift and go to state 39
    ID              shift and go to state 19
    L_S_BRACKET     shift and go to state 40
    L_BRACKET       shift and go to state 41

    arguments_list                 shift and go to state 90
    expression                     shift and go to state 91
    value                          shift and go to state 23
    literal_int                    shift and go to state 25
    literal_double                 shift and go to state 26
    literal_string                 shift and go to state 27
    literal_boolean                shift and go to state 28
    literal_char                   shift and go to state 29
    literal_float                  shift and go to state 30
    identifier                     shift and go to state 31
    function_call                  shift and go to state 32
    array                          shift and go to state 33

state 63

    (27) expression -> expression MULTIPLY . expression
    (27) expression -> . expression MULTIPLY expression
    (28) expression -> . expression DIVIDE expression
    (29) expression -> . expression MOD expression
    (30) expression -> . expression POWER expression
    (31) expression -> . expression PLUS expression
    (32) expression -> . expression MINUS expression
    (33) expression -> . expression LESS expression
    (34) expression -> . expression GREATER expression
    (35) expression -> . expression GREATER_EQUAL expression
    (36) expression -> . expression LESS_EQUAL expression
    (37) expression -> . expression EQUALS expression
    (38) expression -> . expression DIFFERENT expression
    (39) expression -> . expression AND expression
    (40) expression -> . expression OR expression
    (41) expression -> . L_PAREN expression R_PAREN
    (42) expression -> . value
    (43) expression -> . MINUS expression
    (44) expression -> . NOT expression
    (61) value -> . literal_int
    (62) value -> . literal_double
    (63) value -> . literal_string
    (64) value -> . literal_boolean
    (65) value -> . literal_char
    (66) value -> . literal_float
    (67) value -> . identifier
    (68) value -> . function_call
    (69) value -> . array
    (70) literal_int -> . INT_LITERAL
    (71) literal_double -> . DOUBLE_LITERAL
    (72) literal_string -> . STRING_LITERAL
    (73) literal_boolean -> . BOOLEAN_LITERAL
    (74) literal_char -> . CHAR_LITERAL
    (75) literal_float -> . FLOAT_LITERAL
    (76) identifier -> . ID
    (77) identifier -> . ID L_S_BRACKET expression R_S_BRACKET
    (83) function_call -> . ID L_PAREN arguments_list R_PAREN
    (78) array -> . L_S_BRACKET values_list R_S_BRACKET
    (79) array -> . L_BRACKET R_BRACKET

    L_PAREN         shift and go to state 22
    MINUS           shift and go to state 21
    NOT             shift and go to state 24
    INT_LITERAL     shift and go to state 34
    DOUBLE_LITERAL  shift and go to state 35
    STRING_LITERAL  shift and go to state 36
    BOOLEAN_LITERAL shift and go to state 37
    CHAR_LITERAL    shift and go to state 38
    FLOAT_LITERAL   shift and go to state 39
    ID              shift and go to state 19
    L_S_BRACKET     shift and go to state 40
    L_BRACKET       shift and go to state 41

    expression                     shift and go to state 92
    value                          shift and go to state 23
    literal_int                    shift and go to state 25
    literal_double                 shift and go to state 26
    literal_string                 shift and go to state 27
    literal_boolean                shift and go to state 28
    literal_char                   shift and go to state 29
    literal_float                  shift and go to state 30
    identifier                     shift and go to state 31
    function_call                  shift and go to state 32
    array                          shift and go to state 33

state 64

    (28) expression -> expression DIVIDE . expression
    (27) expression -> . expression MULTIPLY expression
    (28) expression -> . expression DIVIDE expression
    (29) expression -> . expression MOD expression
    (30) expression -> . expression POWER expression
    (31) expression -> . expression PLUS expression
    (32) expression -> . expression MINUS expression
    (33) expression -> . expression LESS expression
    (34) expression -> . expression GREATER expression
    (35) expression -> . expression GREATER_EQUAL expression
    (36) expression -> . expression LESS_EQUAL expression
    (37) expression -> . expression EQUALS expression
    (38) expression -> . expression DIFFERENT expression
    (39) expression -> . expression AND expression
    (40) expression -> . expression OR expression
    (41) expression -> . L_PAREN expression R_PAREN
    (42) expression -> . value
    (43) expression -> . MINUS expression
    (44) expression -> . NOT expression
    (61) value -> . literal_int
    (62) value -> . literal_double
    (63) value -> . literal_string
    (64) value -> . literal_boolean
    (65) value -> . literal_char
    (66) value -> . literal_float
    (67) value -> . identifier
    (68) value -> . function_call
    (69) value -> . array
    (70) literal_int -> . INT_LITERAL
    (71) literal_double -> . DOUBLE_LITERAL
    (72) literal_string -> . STRING_LITERAL
    (73) literal_boolean -> . BOOLEAN_LITERAL
    (74) literal_char -> . CHAR_LITERAL
    (75) literal_float -> . FLOAT_LITERAL
    (76) identifier -> . ID
    (77) identifier -> . ID L_S_BRACKET expression R_S_BRACKET
    (83) function_call -> . ID L_PAREN arguments_list R_PAREN
    (78) array -> . L_S_BRACKET values_list R_S_BRACKET
    (79) array -> . L_BRACKET R_BRACKET

    L_PAREN         shift and go to state 22
    MINUS           shift and go to state 21
    NOT             shift and go to state 24
    INT_LITERAL     shift and go to state 34
    DOUBLE_LITERAL  shift and go to state 35
    STRING_LITERAL  shift and go to state 36
    BOOLEAN_LITERAL shift and go to state 37
    CHAR_LITERAL    shift and go to state 38
    FLOAT_LITERAL   shift and go to state 39
    ID              shift and go to state 19
    L_S_BRACKET     shift and go to state 40
    L_BRACKET       shift and go to state 41

    expression                     shift and go to state 93
    value                          shift and go to state 23
    literal_int                    shift and go to state 25
    literal_double                 shift and go to state 26
    literal_string                 shift and go to state 27
    literal_boolean                shift and go to state 28
    literal_char                   shift and go to state 29
    literal_float                  shift and go to state 30
    identifier                     shift and go to state 31
    function_call                  shift and go to state 32
    array                          shift and go to state 33

state 65

    (29) expression -> expression MOD . expression
    (27) expression -> . expression MULTIPLY expression
    (28) expression -> . expression DIVIDE expression
    (29) expression -> . expression MOD expression
    (30) expression -> . expression POWER expression
    (31) expression -> . expression PLUS expression
    (32) expression -> . expression MINUS expression
    (33) expression -> . expression LESS expression
    (34) expression -> . expression GREATER expression
    (35) expression -> . expression GREATER_EQUAL expression
    (36) expression -> . expression LESS_EQUAL expression
    (37) expression -> . expression EQUALS expression
    (38) expression -> . expression DIFFERENT expression
    (39) expression -> . expression AND expression
    (40) expression -> . expression OR expression
    (41) expression -> . L_PAREN expression R_PAREN
    (42) expression -> . value
    (43) expression -> . MINUS expression
    (44) expression -> . NOT expression
    (61) value -> . literal_int
    (62) value -> . literal_double
    (63) value -> . literal_string
    (64) value -> . literal_boolean
    (65) value -> . literal_char
    (66) value -> . literal_float
    (67) value -> . identifier
    (68) value -> . function_call
    (69) value -> . array
    (70) literal_int -> . INT_LITERAL
    (71) literal_double -> . DOUBLE_LITERAL
    (72) literal_string -> . STRING_LITERAL
    (73) literal_boolean -> . BOOLEAN_LITERAL
    (74) literal_char -> . CHAR_LITERAL
    (75) literal_float -> . FLOAT_LITERAL
    (76) identifier -> . ID
    (77) identifier -> . ID L_S_BRACKET expression R_S_BRACKET
    (83) function_call -> . ID L_PAREN arguments_list R_PAREN
    (78) array -> . L_S_BRACKET values_list R_S_BRACKET
    (79) array -> . L_BRACKET R_BRACKET

    L_PAREN         shift and go to state 22
    MINUS           shift and go to state 21
    NOT             shift and go to state 24
    INT_LITERAL     shift and go to state 34
    DOUBLE_LITERAL  shift and go to state 35
    STRING_LITERAL  shift and go to state 36
    BOOLEAN_LITERAL shift and go to state 37
    CHAR_LITERAL    shift and go to state 38
    FLOAT_LITERAL   shift and go to state 39
    ID              shift and go to state 19
    L_S_BRACKET     shift and go to state 40
    L_BRACKET       shift and go to state 41

    expression                     shift and go to state 94
    value                          shift and go to state 23
    literal_int                    shift and go to state 25
    literal_double                 shift and go to state 26
    literal_string                 shift and go to state 27
    literal_boolean                shift and go to state 28
    literal_char                   shift and go to state 29
    literal_float                  shift and go to state 30
    identifier                     shift and go to state 31
    function_call                  shift and go to state 32
    array                          shift and go to state 33

state 66

    (30) expression -> expression POWER . expression
    (27) expression -> . expression MULTIPLY expression
    (28) expression -> . expression DIVIDE expression
    (29) expression -> . expression MOD expression
    (30) expression -> . expression POWER expression
    (31) expression -> . expression PLUS expression
    (32) expression -> . expression MINUS expression
    (33) expression -> . expression LESS expression
    (34) expression -> . expression GREATER expression
    (35) expression -> . expression GREATER_EQUAL expression
    (36) expression -> . expression LESS_EQUAL expression
    (37) expression -> . expression EQUALS expression
    (38) expression -> . expression DIFFERENT expression
    (39) expression -> . expression AND expression
    (40) expression -> . expression OR expression
    (41) expression -> . L_PAREN expression R_PAREN
    (42) expression -> . value
    (43) expression -> . MINUS expression
    (44) expression -> . NOT expression
    (61) value -> . literal_int
    (62) value -> . literal_double
    (63) value -> . literal_string
    (64) value -> . literal_boolean
    (65) value -> . literal_char
    (66) value -> . literal_float
    (67) value -> . identifier
    (68) value -> . function_call
    (69) value -> . array
    (70) literal_int -> . INT_LITERAL
    (71) literal_double -> . DOUBLE_LITERAL
    (72) literal_string -> . STRING_LITERAL
    (73) literal_boolean -> . BOOLEAN_LITERAL
    (74) literal_char -> . CHAR_LITERAL
    (75) literal_float -> . FLOAT_LITERAL
    (76) identifier -> . ID
    (77) identifier -> . ID L_S_BRACKET expression R_S_BRACKET
    (83) function_call -> . ID L_PAREN arguments_list R_PAREN
    (78) array -> . L_S_BRACKET values_list R_S_BRACKET
    (79) array -> . L_BRACKET R_BRACKET

    L_PAREN         shift and go to state 22
    MINUS           shift and go to state 21
    NOT             shift and go to state 24
    INT_LITERAL     shift and go to state 34
    DOUBLE_LITERAL  shift and go to state 35
    STRING_LITERAL  shift and go to state 36
    BOOLEAN_LITERAL shift and go to state 37
    CHAR_LITERAL    shift and go to state 38
    FLOAT_LITERAL   shift and go to state 39
    ID              shift and go to state 19
    L_S_BRACKET     shift and go to state 40
    L_BRACKET       shift and go to state 41

    expression                     shift and go to state 95
    value                          shift and go to state 23
    literal_int                    shift and go to state 25
    literal_double                 shift and go to state 26
    literal_string                 shift and go to state 27
    literal_boolean                shift and go to state 28
    literal_char                   shift and go to state 29
    literal_float                  shift and go to state 30
    identifier                     shift and go to state 31
    function_call                  shift and go to state 32
    array                          shift and go to state 33

state 67

    (31) expression -> expression PLUS . expression
    (27) expression -> . expression MULTIPLY expression
    (28) expression -> . expression DIVIDE expression
    (29) expression -> . expression MOD expression
    (30) expression -> . expression POWER expression
    (31) expression -> . expression PLUS expression
    (32) expression -> . expression MINUS expression
    (33) expression -> . expression LESS expression
    (34) expression -> . expression GREATER expression
    (35) expression -> . expression GREATER_EQUAL expression
    (36) expression -> . expression LESS_EQUAL expression
    (37) expression -> . expression EQUALS expression
    (38) expression -> . expression DIFFERENT expression
    (39) expression -> . expression AND expression
    (40) expression -> . expression OR expression
    (41) expression -> . L_PAREN expression R_PAREN
    (42) expression -> . value
    (43) expression -> . MINUS expression
    (44) expression -> . NOT expression
    (61) value -> . literal_int
    (62) value -> . literal_double
    (63) value -> . literal_string
    (64) value -> . literal_boolean
    (65) value -> . literal_char
    (66) value -> . literal_float
    (67) value -> . identifier
    (68) value -> . function_call
    (69) value -> . array
    (70) literal_int -> . INT_LITERAL
    (71) literal_double -> . DOUBLE_LITERAL
    (72) literal_string -> . STRING_LITERAL
    (73) literal_boolean -> . BOOLEAN_LITERAL
    (74) literal_char -> . CHAR_LITERAL
    (75) literal_float -> . FLOAT_LITERAL
    (76) identifier -> . ID
    (77) identifier -> . ID L_S_BRACKET expression R_S_BRACKET
    (83) function_call -> . ID L_PAREN arguments_list R_PAREN
    (78) array -> . L_S_BRACKET values_list R_S_BRACKET
    (79) array -> . L_BRACKET R_BRACKET

    L_PAREN         shift and go to state 22
    MINUS           shift and go to state 21
    NOT             shift and go to state 24
    INT_LITERAL     shift and go to state 34
    DOUBLE_LITERAL  shift and go to state 35
    STRING_LITERAL  shift and go to state 36
    BOOLEAN_LITERAL shift and go to state 37
    CHAR_LITERAL    shift and go to state 38
    FLOAT_LITERAL   shift and go to state 39
    ID              shift and go to state 19
    L_S_BRACKET     shift and go to state 40
    L_BRACKET       shift and go to state 41

    expression                     shift and go to state 96
    value                          shift and go to state 23
    literal_int                    shift and go to state 25
    literal_double                 shift and go to state 26
    literal_string                 shift and go to state 27
    literal_boolean                shift and go to state 28
    literal_char                   shift and go to state 29
    literal_float                  shift and go to state 30
    identifier                     shift and go to state 31
    function_call                  shift and go to state 32
    array                          shift and go to state 33

state 68

    (32) expression -> expression MINUS . expression
    (27) expression -> . expression MULTIPLY expression
    (28) expression -> . expression DIVIDE expression
    (29) expression -> . expression MOD expression
    (30) expression -> . expression POWER expression
    (31) expression -> . expression PLUS expression
    (32) expression -> . expression MINUS expression
    (33) expression -> . expression LESS expression
    (34) expression -> . expression GREATER expression
    (35) expression -> . expression GREATER_EQUAL expression
    (36) expression -> . expression LESS_EQUAL expression
    (37) expression -> . expression EQUALS expression
    (38) expression -> . expression DIFFERENT expression
    (39) expression -> . expression AND expression
    (40) expression -> . expression OR expression
    (41) expression -> . L_PAREN expression R_PAREN
    (42) expression -> . value
    (43) expression -> . MINUS expression
    (44) expression -> . NOT expression
    (61) value -> . literal_int
    (62) value -> . literal_double
    (63) value -> . literal_string
    (64) value -> . literal_boolean
    (65) value -> . literal_char
    (66) value -> . literal_float
    (67) value -> . identifier
    (68) value -> . function_call
    (69) value -> . array
    (70) literal_int -> . INT_LITERAL
    (71) literal_double -> . DOUBLE_LITERAL
    (72) literal_string -> . STRING_LITERAL
    (73) literal_boolean -> . BOOLEAN_LITERAL
    (74) literal_char -> . CHAR_LITERAL
    (75) literal_float -> . FLOAT_LITERAL
    (76) identifier -> . ID
    (77) identifier -> . ID L_S_BRACKET expression R_S_BRACKET
    (83) function_call -> . ID L_PAREN arguments_list R_PAREN
    (78) array -> . L_S_BRACKET values_list R_S_BRACKET
    (79) array -> . L_BRACKET R_BRACKET

    L_PAREN         shift and go to state 22
    MINUS           shift and go to state 21
    NOT             shift and go to state 24
    INT_LITERAL     shift and go to state 34
    DOUBLE_LITERAL  shift and go to state 35
    STRING_LITERAL  shift and go to state 36
    BOOLEAN_LITERAL shift and go to state 37
    CHAR_LITERAL    shift and go to state 38
    FLOAT_LITERAL   shift and go to state 39
    ID              shift and go to state 19
    L_S_BRACKET     shift and go to state 40
    L_BRACKET       shift and go to state 41

    expression                     shift and go to state 97
    value                          shift and go to state 23
    literal_int                    shift and go to state 25
    literal_double                 shift and go to state 26
    literal_string                 shift and go to state 27
    literal_boolean                shift and go to state 28
    literal_char                   shift and go to state 29
    literal_float                  shift and go to state 30
    identifier                     shift and go to state 31
    function_call                  shift and go to state 32
    array                          shift and go to state 33

state 69

    (33) expression -> expression LESS . expression
    (27) expression -> . expression MULTIPLY expression
    (28) expression -> . expression DIVIDE expression
    (29) expression -> . expression MOD expression
    (30) expression -> . expression POWER expression
    (31) expression -> . expression PLUS expression
    (32) expression -> . expression MINUS expression
    (33) expression -> . expression LESS expression
    (34) expression -> . expression GREATER expression
    (35) expression -> . expression GREATER_EQUAL expression
    (36) expression -> . expression LESS_EQUAL expression
    (37) expression -> . expression EQUALS expression
    (38) expression -> . expression DIFFERENT expression
    (39) expression -> . expression AND expression
    (40) expression -> . expression OR expression
    (41) expression -> . L_PAREN expression R_PAREN
    (42) expression -> . value
    (43) expression -> . MINUS expression
    (44) expression -> . NOT expression
    (61) value -> . literal_int
    (62) value -> . literal_double
    (63) value -> . literal_string
    (64) value -> . literal_boolean
    (65) value -> . literal_char
    (66) value -> . literal_float
    (67) value -> . identifier
    (68) value -> . function_call
    (69) value -> . array
    (70) literal_int -> . INT_LITERAL
    (71) literal_double -> . DOUBLE_LITERAL
    (72) literal_string -> . STRING_LITERAL
    (73) literal_boolean -> . BOOLEAN_LITERAL
    (74) literal_char -> . CHAR_LITERAL
    (75) literal_float -> . FLOAT_LITERAL
    (76) identifier -> . ID
    (77) identifier -> . ID L_S_BRACKET expression R_S_BRACKET
    (83) function_call -> . ID L_PAREN arguments_list R_PAREN
    (78) array -> . L_S_BRACKET values_list R_S_BRACKET
    (79) array -> . L_BRACKET R_BRACKET

    L_PAREN         shift and go to state 22
    MINUS           shift and go to state 21
    NOT             shift and go to state 24
    INT_LITERAL     shift and go to state 34
    DOUBLE_LITERAL  shift and go to state 35
    STRING_LITERAL  shift and go to state 36
    BOOLEAN_LITERAL shift and go to state 37
    CHAR_LITERAL    shift and go to state 38
    FLOAT_LITERAL   shift and go to state 39
    ID              shift and go to state 19
    L_S_BRACKET     shift and go to state 40
    L_BRACKET       shift and go to state 41

    expression                     shift and go to state 98
    value                          shift and go to state 23
    literal_int                    shift and go to state 25
    literal_double                 shift and go to state 26
    literal_string                 shift and go to state 27
    literal_boolean                shift and go to state 28
    literal_char                   shift and go to state 29
    literal_float                  shift and go to state 30
    identifier                     shift and go to state 31
    function_call                  shift and go to state 32
    array                          shift and go to state 33

state 70

    (34) expression -> expression GREATER . expression
    (27) expression -> . expression MULTIPLY expression
    (28) expression -> . expression DIVIDE expression
    (29) expression -> . expression MOD expression
    (30) expression -> . expression POWER expression
    (31) expression -> . expression PLUS expression
    (32) expression -> . expression MINUS expression
    (33) expression -> . expression LESS expression
    (34) expression -> . expression GREATER expression
    (35) expression -> . expression GREATER_EQUAL expression
    (36) expression -> . expression LESS_EQUAL expression
    (37) expression -> . expression EQUALS expression
    (38) expression -> . expression DIFFERENT expression
    (39) expression -> . expression AND expression
    (40) expression -> . expression OR expression
    (41) expression -> . L_PAREN expression R_PAREN
    (42) expression -> . value
    (43) expression -> . MINUS expression
    (44) expression -> . NOT expression
    (61) value -> . literal_int
    (62) value -> . literal_double
    (63) value -> . literal_string
    (64) value -> . literal_boolean
    (65) value -> . literal_char
    (66) value -> . literal_float
    (67) value -> . identifier
    (68) value -> . function_call
    (69) value -> . array
    (70) literal_int -> . INT_LITERAL
    (71) literal_double -> . DOUBLE_LITERAL
    (72) literal_string -> . STRING_LITERAL
    (73) literal_boolean -> . BOOLEAN_LITERAL
    (74) literal_char -> . CHAR_LITERAL
    (75) literal_float -> . FLOAT_LITERAL
    (76) identifier -> . ID
    (77) identifier -> . ID L_S_BRACKET expression R_S_BRACKET
    (83) function_call -> . ID L_PAREN arguments_list R_PAREN
    (78) array -> . L_S_BRACKET values_list R_S_BRACKET
    (79) array -> . L_BRACKET R_BRACKET

    L_PAREN         shift and go to state 22
    MINUS           shift and go to state 21
    NOT             shift and go to state 24
    INT_LITERAL     shift and go to state 34
    DOUBLE_LITERAL  shift and go to state 35
    STRING_LITERAL  shift and go to state 36
    BOOLEAN_LITERAL shift and go to state 37
    CHAR_LITERAL    shift and go to state 38
    FLOAT_LITERAL   shift and go to state 39
    ID              shift and go to state 19
    L_S_BRACKET     shift and go to state 40
    L_BRACKET       shift and go to state 41

    expression                     shift and go to state 99
    value                          shift and go to state 23
    literal_int                    shift and go to state 25
    literal_double                 shift and go to state 26
    literal_string                 shift and go to state 27
    literal_boolean                shift and go to state 28
    literal_char                   shift and go to state 29
    literal_float                  shift and go to state 30
    identifier                     shift and go to state 31
    function_call                  shift and go to state 32
    array                          shift and go to state 33

state 71

    (35) expression -> expression GREATER_EQUAL . expression
    (27) expression -> . expression MULTIPLY expression
    (28) expression -> . expression DIVIDE expression
    (29) expression -> . expression MOD expression
    (30) expression -> . expression POWER expression
    (31) expression -> . expression PLUS expression
    (32) expression -> . expression MINUS expression
    (33) expression -> . expression LESS expression
    (34) expression -> . expression GREATER expression
    (35) expression -> . expression GREATER_EQUAL expression
    (36) expression -> . expression LESS_EQUAL expression
    (37) expression -> . expression EQUALS expression
    (38) expression -> . expression DIFFERENT expression
    (39) expression -> . expression AND expression
    (40) expression -> . expression OR expression
    (41) expression -> . L_PAREN expression R_PAREN
    (42) expression -> . value
    (43) expression -> . MINUS expression
    (44) expression -> . NOT expression
    (61) value -> . literal_int
    (62) value -> . literal_double
    (63) value -> . literal_string
    (64) value -> . literal_boolean
    (65) value -> . literal_char
    (66) value -> . literal_float
    (67) value -> . identifier
    (68) value -> . function_call
    (69) value -> . array
    (70) literal_int -> . INT_LITERAL
    (71) literal_double -> . DOUBLE_LITERAL
    (72) literal_string -> . STRING_LITERAL
    (73) literal_boolean -> . BOOLEAN_LITERAL
    (74) literal_char -> . CHAR_LITERAL
    (75) literal_float -> . FLOAT_LITERAL
    (76) identifier -> . ID
    (77) identifier -> . ID L_S_BRACKET expression R_S_BRACKET
    (83) function_call -> . ID L_PAREN arguments_list R_PAREN
    (78) array -> . L_S_BRACKET values_list R_S_BRACKET
    (79) array -> . L_BRACKET R_BRACKET

    L_PAREN         shift and go to state 22
    MINUS           shift and go to state 21
    NOT             shift and go to state 24
    INT_LITERAL     shift and go to state 34
    DOUBLE_LITERAL  shift and go to state 35
    STRING_LITERAL  shift and go to state 36
    BOOLEAN_LITERAL shift and go to state 37
    CHAR_LITERAL    shift and go to state 38
    FLOAT_LITERAL   shift and go to state 39
    ID              shift and go to state 19
    L_S_BRACKET     shift and go to state 40
    L_BRACKET       shift and go to state 41

    expression                     shift and go to state 100
    value                          shift and go to state 23
    literal_int                    shift and go to state 25
    literal_double                 shift and go to state 26
    literal_string                 shift and go to state 27
    literal_boolean                shift and go to state 28
    literal_char                   shift and go to state 29
    literal_float                  shift and go to state 30
    identifier                     shift and go to state 31
    function_call                  shift and go to state 32
    array                          shift and go to state 33

state 72

    (36) expression -> expression LESS_EQUAL . expression
    (27) expression -> . expression MULTIPLY expression
    (28) expression -> . expression DIVIDE expression
    (29) expression -> . expression MOD expression
    (30) expression -> . expression POWER expression
    (31) expression -> . expression PLUS expression
    (32) expression -> . expression MINUS expression
    (33) expression -> . expression LESS expression
    (34) expression -> . expression GREATER expression
    (35) expression -> . expression GREATER_EQUAL expression
    (36) expression -> . expression LESS_EQUAL expression
    (37) expression -> . expression EQUALS expression
    (38) expression -> . expression DIFFERENT expression
    (39) expression -> . expression AND expression
    (40) expression -> . expression OR expression
    (41) expression -> . L_PAREN expression R_PAREN
    (42) expression -> . value
    (43) expression -> . MINUS expression
    (44) expression -> . NOT expression
    (61) value -> . literal_int
    (62) value -> . literal_double
    (63) value -> . literal_string
    (64) value -> . literal_boolean
    (65) value -> . literal_char
    (66) value -> . literal_float
    (67) value -> . identifier
    (68) value -> . function_call
    (69) value -> . array
    (70) literal_int -> . INT_LITERAL
    (71) literal_double -> . DOUBLE_LITERAL
    (72) literal_string -> . STRING_LITERAL
    (73) literal_boolean -> . BOOLEAN_LITERAL
    (74) literal_char -> . CHAR_LITERAL
    (75) literal_float -> . FLOAT_LITERAL
    (76) identifier -> . ID
    (77) identifier -> . ID L_S_BRACKET expression R_S_BRACKET
    (83) function_call -> . ID L_PAREN arguments_list R_PAREN
    (78) array -> . L_S_BRACKET values_list R_S_BRACKET
    (79) array -> . L_BRACKET R_BRACKET

    L_PAREN         shift and go to state 22
    MINUS           shift and go to state 21
    NOT             shift and go to state 24
    INT_LITERAL     shift and go to state 34
    DOUBLE_LITERAL  shift and go to state 35
    STRING_LITERAL  shift and go to state 36
    BOOLEAN_LITERAL shift and go to state 37
    CHAR_LITERAL    shift and go to state 38
    FLOAT_LITERAL   shift and go to state 39
    ID              shift and go to state 19
    L_S_BRACKET     shift and go to state 40
    L_BRACKET       shift and go to state 41

    expression                     shift and go to state 101
    value                          shift and go to state 23
    literal_int                    shift and go to state 25
    literal_double                 shift and go to state 26
    literal_string                 shift and go to state 27
    literal_boolean                shift and go to state 28
    literal_char                   shift and go to state 29
    literal_float                  shift and go to state 30
    identifier                     shift and go to state 31
    function_call                  shift and go to state 32
    array                          shift and go to state 33

state 73

    (37) expression -> expression EQUALS . expression
    (27) expression -> . expression MULTIPLY expression
    (28) expression -> . expression DIVIDE expression
    (29) expression -> . expression MOD expression
    (30) expression -> . expression POWER expression
    (31) expression -> . expression PLUS expression
    (32) expression -> . expression MINUS expression
    (33) expression -> . expression LESS expression
    (34) expression -> . expression GREATER expression
    (35) expression -> . expression GREATER_EQUAL expression
    (36) expression -> . expression LESS_EQUAL expression
    (37) expression -> . expression EQUALS expression
    (38) expression -> . expression DIFFERENT expression
    (39) expression -> . expression AND expression
    (40) expression -> . expression OR expression
    (41) expression -> . L_PAREN expression R_PAREN
    (42) expression -> . value
    (43) expression -> . MINUS expression
    (44) expression -> . NOT expression
    (61) value -> . literal_int
    (62) value -> . literal_double
    (63) value -> . literal_string
    (64) value -> . literal_boolean
    (65) value -> . literal_char
    (66) value -> . literal_float
    (67) value -> . identifier
    (68) value -> . function_call
    (69) value -> . array
    (70) literal_int -> . INT_LITERAL
    (71) literal_double -> . DOUBLE_LITERAL
    (72) literal_string -> . STRING_LITERAL
    (73) literal_boolean -> . BOOLEAN_LITERAL
    (74) literal_char -> . CHAR_LITERAL
    (75) literal_float -> . FLOAT_LITERAL
    (76) identifier -> . ID
    (77) identifier -> . ID L_S_BRACKET expression R_S_BRACKET
    (83) function_call -> . ID L_PAREN arguments_list R_PAREN
    (78) array -> . L_S_BRACKET values_list R_S_BRACKET
    (79) array -> . L_BRACKET R_BRACKET

    L_PAREN         shift and go to state 22
    MINUS           shift and go to state 21
    NOT             shift and go to state 24
    INT_LITERAL     shift and go to state 34
    DOUBLE_LITERAL  shift and go to state 35
    STRING_LITERAL  shift and go to state 36
    BOOLEAN_LITERAL shift and go to state 37
    CHAR_LITERAL    shift and go to state 38
    FLOAT_LITERAL   shift and go to state 39
    ID              shift and go to state 19
    L_S_BRACKET     shift and go to state 40
    L_BRACKET       shift and go to state 41

    expression                     shift and go to state 102
    value                          shift and go to state 23
    literal_int                    shift and go to state 25
    literal_double                 shift and go to state 26
    literal_string                 shift and go to state 27
    literal_boolean                shift and go to state 28
    literal_char                   shift and go to state 29
    literal_float                  shift and go to state 30
    identifier                     shift and go to state 31
    function_call                  shift and go to state 32
    array                          shift and go to state 33

state 74

    (38) expression -> expression DIFFERENT . expression
    (27) expression -> . expression MULTIPLY expression
    (28) expression -> . expression DIVIDE expression
    (29) expression -> . expression MOD expression
    (30) expression -> . expression POWER expression
    (31) expression -> . expression PLUS expression
    (32) expression -> . expression MINUS expression
    (33) expression -> . expression LESS expression
    (34) expression -> . expression GREATER expression
    (35) expression -> . expression GREATER_EQUAL expression
    (36) expression -> . expression LESS_EQUAL expression
    (37) expression -> . expression EQUALS expression
    (38) expression -> . expression DIFFERENT expression
    (39) expression -> . expression AND expression
    (40) expression -> . expression OR expression
    (41) expression -> . L_PAREN expression R_PAREN
    (42) expression -> . value
    (43) expression -> . MINUS expression
    (44) expression -> . NOT expression
    (61) value -> . literal_int
    (62) value -> . literal_double
    (63) value -> . literal_string
    (64) value -> . literal_boolean
    (65) value -> . literal_char
    (66) value -> . literal_float
    (67) value -> . identifier
    (68) value -> . function_call
    (69) value -> . array
    (70) literal_int -> . INT_LITERAL
    (71) literal_double -> . DOUBLE_LITERAL
    (72) literal_string -> . STRING_LITERAL
    (73) literal_boolean -> . BOOLEAN_LITERAL
    (74) literal_char -> . CHAR_LITERAL
    (75) literal_float -> . FLOAT_LITERAL
    (76) identifier -> . ID
    (77) identifier -> . ID L_S_BRACKET expression R_S_BRACKET
    (83) function_call -> . ID L_PAREN arguments_list R_PAREN
    (78) array -> . L_S_BRACKET values_list R_S_BRACKET
    (79) array -> . L_BRACKET R_BRACKET

    L_PAREN         shift and go to state 22
    MINUS           shift and go to state 21
    NOT             shift and go to state 24
    INT_LITERAL     shift and go to state 34
    DOUBLE_LITERAL  shift and go to state 35
    STRING_LITERAL  shift and go to state 36
    BOOLEAN_LITERAL shift and go to state 37
    CHAR_LITERAL    shift and go to state 38
    FLOAT_LITERAL   shift and go to state 39
    ID              shift and go to state 19
    L_S_BRACKET     shift and go to state 40
    L_BRACKET       shift and go to state 41

    expression                     shift and go to state 103
    value                          shift and go to state 23
    literal_int                    shift and go to state 25
    literal_double                 shift and go to state 26
    literal_string                 shift and go to state 27
    literal_boolean                shift and go to state 28
    literal_char                   shift and go to state 29
    literal_float                  shift and go to state 30
    identifier                     shift and go to state 31
    function_call                  shift and go to state 32
    array                          shift and go to state 33

state 75

    (39) expression -> expression AND . expression
    (27) expression -> . expression MULTIPLY expression
    (28) expression -> . expression DIVIDE expression
    (29) expression -> . expression MOD expression
    (30) expression -> . expression POWER expression
    (31) expression -> . expression PLUS expression
    (32) expression -> . expression MINUS expression
    (33) expression -> . expression LESS expression
    (34) expression -> . expression GREATER expression
    (35) expression -> . expression GREATER_EQUAL expression
    (36) expression -> . expression LESS_EQUAL expression
    (37) expression -> . expression EQUALS expression
    (38) expression -> . expression DIFFERENT expression
    (39) expression -> . expression AND expression
    (40) expression -> . expression OR expression
    (41) expression -> . L_PAREN expression R_PAREN
    (42) expression -> . value
    (43) expression -> . MINUS expression
    (44) expression -> . NOT expression
    (61) value -> . literal_int
    (62) value -> . literal_double
    (63) value -> . literal_string
    (64) value -> . literal_boolean
    (65) value -> . literal_char
    (66) value -> . literal_float
    (67) value -> . identifier
    (68) value -> . function_call
    (69) value -> . array
    (70) literal_int -> . INT_LITERAL
    (71) literal_double -> . DOUBLE_LITERAL
    (72) literal_string -> . STRING_LITERAL
    (73) literal_boolean -> . BOOLEAN_LITERAL
    (74) literal_char -> . CHAR_LITERAL
    (75) literal_float -> . FLOAT_LITERAL
    (76) identifier -> . ID
    (77) identifier -> . ID L_S_BRACKET expression R_S_BRACKET
    (83) function_call -> . ID L_PAREN arguments_list R_PAREN
    (78) array -> . L_S_BRACKET values_list R_S_BRACKET
    (79) array -> . L_BRACKET R_BRACKET

    L_PAREN         shift and go to state 22
    MINUS           shift and go to state 21
    NOT             shift and go to state 24
    INT_LITERAL     shift and go to state 34
    DOUBLE_LITERAL  shift and go to state 35
    STRING_LITERAL  shift and go to state 36
    BOOLEAN_LITERAL shift and go to state 37
    CHAR_LITERAL    shift and go to state 38
    FLOAT_LITERAL   shift and go to state 39
    ID              shift and go to state 19
    L_S_BRACKET     shift and go to state 40
    L_BRACKET       shift and go to state 41

    expression                     shift and go to state 104
    value                          shift and go to state 23
    literal_int                    shift and go to state 25
    literal_double                 shift and go to state 26
    literal_string                 shift and go to state 27
    literal_boolean                shift and go to state 28
    literal_char                   shift and go to state 29
    literal_float                  shift and go to state 30
    identifier                     shift and go to state 31
    function_call                  shift and go to state 32
    array                          shift and go to state 33

state 76

    (40) expression -> expression OR . expression
    (27) expression -> . expression MULTIPLY expression
    (28) expression -> . expression DIVIDE expression
    (29) expression -> . expression MOD expression
    (30) expression -> . expression POWER expression
    (31) expression -> . expression PLUS expression
    (32) expression -> . expression MINUS expression
    (33) expression -> . expression LESS expression
    (34) expression -> . expression GREATER expression
    (35) expression -> . expression GREATER_EQUAL expression
    (36) expression -> . expression LESS_EQUAL expression
    (37) expression -> . expression EQUALS expression
    (38) expression -> . expression DIFFERENT expression
    (39) expression -> . expression AND expression
    (40) expression -> . expression OR expression
    (41) expression -> . L_PAREN expression R_PAREN
    (42) expression -> . value
    (43) expression -> . MINUS expression
    (44) expression -> . NOT expression
    (61) value -> . literal_int
    (62) value -> . literal_double
    (63) value -> . literal_string
    (64) value -> . literal_boolean
    (65) value -> . literal_char
    (66) value -> . literal_float
    (67) value -> . identifier
    (68) value -> . function_call
    (69) value -> . array
    (70) literal_int -> . INT_LITERAL
    (71) literal_double -> . DOUBLE_LITERAL
    (72) literal_string -> . STRING_LITERAL
    (73) literal_boolean -> . BOOLEAN_LITERAL
    (74) literal_char -> . CHAR_LITERAL
    (75) literal_float -> . FLOAT_LITERAL
    (76) identifier -> . ID
    (77) identifier -> . ID L_S_BRACKET expression R_S_BRACKET
    (83) function_call -> . ID L_PAREN arguments_list R_PAREN
    (78) array -> . L_S_BRACKET values_list R_S_BRACKET
    (79) array -> . L_BRACKET R_BRACKET

    L_PAREN         shift and go to state 22
    MINUS           shift and go to state 21
    NOT             shift and go to state 24
    INT_LITERAL     shift and go to state 34
    DOUBLE_LITERAL  shift and go to state 35
    STRING_LITERAL  shift and go to state 36
    BOOLEAN_LITERAL shift and go to state 37
    CHAR_LITERAL    shift and go to state 38
    FLOAT_LITERAL   shift and go to state 39
    ID              shift and go to state 19
    L_S_BRACKET     shift and go to state 40
    L_BRACKET       shift and go to state 41

    expression                     shift and go to state 105
    value                          shift and go to state 23
    literal_int                    shift and go to state 25
    literal_double                 shift and go to state 26
    literal_string                 shift and go to state 27
    literal_boolean                shift and go to state 28
    literal_char                   shift and go to state 29
    literal_float                  shift and go to state 30
    identifier                     shift and go to state 31
    function_call                  shift and go to state 32
    array                          shift and go to state 33

state 77

    (43) expression -> MINUS expression .
    (27) expression -> expression . MULTIPLY expression
    (28) expression -> expression . DIVIDE expression
    (29) expression -> expression . MOD expression
    (30) expression -> expression . POWER expression
    (31) expression -> expression . PLUS expression
    (32) expression -> expression . MINUS expression
    (33) expression -> expression . LESS expression
    (34) expression -> expression . GREATER expression
    (35) expression -> expression . GREATER_EQUAL expression
    (36) expression -> expression . LESS_EQUAL expression
    (37) expression -> expression . EQUALS expression
    (38) expression -> expression . DIFFERENT expression
    (39) expression -> expression . AND expression
    (40) expression -> expression . OR expression

    MULTIPLY        reduce using rule 43 (expression -> MINUS expression .)
    DIVIDE          reduce using rule 43 (expression -> MINUS expression .)
    MOD             reduce using rule 43 (expression -> MINUS expression .)
    POWER           reduce using rule 43 (expression -> MINUS expression .)
    PLUS            reduce using rule 43 (expression -> MINUS expression .)
    MINUS           reduce using rule 43 (expression -> MINUS expression .)
    LESS            reduce using rule 43 (expression -> MINUS expression .)
    GREATER         reduce using rule 43 (expression -> MINUS expression .)
    GREATER_EQUAL   reduce using rule 43 (expression -> MINUS expression .)
    LESS_EQUAL      reduce using rule 43 (expression -> MINUS expression .)
    EQUALS          reduce using rule 43 (expression -> MINUS expression .)
    DIFFERENT       reduce using rule 43 (expression -> MINUS expression .)
    AND             reduce using rule 43 (expression -> MINUS expression .)
    OR              reduce using rule 43 (expression -> MINUS expression .)
    SEMICOLON       reduce using rule 43 (expression -> MINUS expression .)
    R_PAREN         reduce using rule 43 (expression -> MINUS expression .)
    R_S_BRACKET     reduce using rule 43 (expression -> MINUS expression .)
    COMMA           reduce using rule 43 (expression -> MINUS expression .)
    L_BRACKET       reduce using rule 43 (expression -> MINUS expression .)

  ! MULTIPLY        [ shift and go to state 63 ]
  ! DIVIDE          [ shift and go to state 64 ]
  ! MOD             [ shift and go to state 65 ]
  ! POWER           [ shift and go to state 66 ]
  ! PLUS            [ shift and go to state 67 ]
  ! MINUS           [ shift and go to state 68 ]
  ! LESS            [ shift and go to state 69 ]
  ! GREATER         [ shift and go to state 70 ]
  ! GREATER_EQUAL   [ shift and go to state 71 ]
  ! LESS_EQUAL      [ shift and go to state 72 ]
  ! EQUALS          [ shift and go to state 73 ]
  ! DIFFERENT       [ shift and go to state 74 ]
  ! AND             [ shift and go to state 75 ]
  ! OR              [ shift and go to state 76 ]


state 78

    (41) expression -> L_PAREN expression . R_PAREN
    (27) expression -> expression . MULTIPLY expression
    (28) expression -> expression . DIVIDE expression
    (29) expression -> expression . MOD expression
    (30) expression -> expression . POWER expression
    (31) expression -> expression . PLUS expression
    (32) expression -> expression . MINUS expression
    (33) expression -> expression . LESS expression
    (34) expression -> expression . GREATER expression
    (35) expression -> expression . GREATER_EQUAL expression
    (36) expression -> expression . LESS_EQUAL expression
    (37) expression -> expression . EQUALS expression
    (38) expression -> expression . DIFFERENT expression
    (39) expression -> expression . AND expression
    (40) expression -> expression . OR expression

    R_PAREN         shift and go to state 106
    MULTIPLY        shift and go to state 63
    DIVIDE          shift and go to state 64
    MOD             shift and go to state 65
    POWER           shift and go to state 66
    PLUS            shift and go to state 67
    MINUS           shift and go to state 68
    LESS            shift and go to state 69
    GREATER         shift and go to state 70
    GREATER_EQUAL   shift and go to state 71
    LESS_EQUAL      shift and go to state 72
    EQUALS          shift and go to state 73
    DIFFERENT       shift and go to state 74
    AND             shift and go to state 75
    OR              shift and go to state 76


state 79

    (44) expression -> NOT expression .
    (27) expression -> expression . MULTIPLY expression
    (28) expression -> expression . DIVIDE expression
    (29) expression -> expression . MOD expression
    (30) expression -> expression . POWER expression
    (31) expression -> expression . PLUS expression
    (32) expression -> expression . MINUS expression
    (33) expression -> expression . LESS expression
    (34) expression -> expression . GREATER expression
    (35) expression -> expression . GREATER_EQUAL expression
    (36) expression -> expression . LESS_EQUAL expression
    (37) expression -> expression . EQUALS expression
    (38) expression -> expression . DIFFERENT expression
    (39) expression -> expression . AND expression
    (40) expression -> expression . OR expression

    MULTIPLY        reduce using rule 44 (expression -> NOT expression .)
    DIVIDE          reduce using rule 44 (expression -> NOT expression .)
    MOD             reduce using rule 44 (expression -> NOT expression .)
    POWER           reduce using rule 44 (expression -> NOT expression .)
    PLUS            reduce using rule 44 (expression -> NOT expression .)
    MINUS           reduce using rule 44 (expression -> NOT expression .)
    LESS            reduce using rule 44 (expression -> NOT expression .)
    GREATER         reduce using rule 44 (expression -> NOT expression .)
    GREATER_EQUAL   reduce using rule 44 (expression -> NOT expression .)
    LESS_EQUAL      reduce using rule 44 (expression -> NOT expression .)
    EQUALS          reduce using rule 44 (expression -> NOT expression .)
    DIFFERENT       reduce using rule 44 (expression -> NOT expression .)
    AND             reduce using rule 44 (expression -> NOT expression .)
    OR              reduce using rule 44 (expression -> NOT expression .)
    SEMICOLON       reduce using rule 44 (expression -> NOT expression .)
    R_PAREN         reduce using rule 44 (expression -> NOT expression .)
    R_S_BRACKET     reduce using rule 44 (expression -> NOT expression .)
    COMMA           reduce using rule 44 (expression -> NOT expression .)
    L_BRACKET       reduce using rule 44 (expression -> NOT expression .)

  ! MULTIPLY        [ shift and go to state 63 ]
  ! DIVIDE          [ shift and go to state 64 ]
  ! MOD             [ shift and go to state 65 ]
  ! POWER           [ shift and go to state 66 ]
  ! PLUS            [ shift and go to state 67 ]
  ! MINUS           [ shift and go to state 68 ]
  ! LESS            [ shift and go to state 69 ]
  ! GREATER         [ shift and go to state 70 ]
  ! GREATER_EQUAL   [ shift and go to state 71 ]
  ! LESS_EQUAL      [ shift and go to state 72 ]
  ! EQUALS          [ shift and go to state 73 ]
  ! DIFFERENT       [ shift and go to state 74 ]
  ! AND             [ shift and go to state 75 ]
  ! OR              [ shift and go to state 76 ]


state 80

    (78) array -> L_S_BRACKET values_list . R_S_BRACKET

    R_S_BRACKET     shift and go to state 107


state 81

    (80) values_list -> value . COMMA values_list
    (81) values_list -> value .

    COMMA           shift and go to state 108
    R_S_BRACKET     reduce using rule 81 (values_list -> value .)


state 82

    (79) array -> L_BRACKET R_BRACKET .

    MULTIPLY        reduce using rule 79 (array -> L_BRACKET R_BRACKET .)
    DIVIDE          reduce using rule 79 (array -> L_BRACKET R_BRACKET .)
    MOD             reduce using rule 79 (array -> L_BRACKET R_BRACKET .)
    POWER           reduce using rule 79 (array -> L_BRACKET R_BRACKET .)
    PLUS            reduce using rule 79 (array -> L_BRACKET R_BRACKET .)
    MINUS           reduce using rule 79 (array -> L_BRACKET R_BRACKET .)
    LESS            reduce using rule 79 (array -> L_BRACKET R_BRACKET .)
    GREATER         reduce using rule 79 (array -> L_BRACKET R_BRACKET .)
    GREATER_EQUAL   reduce using rule 79 (array -> L_BRACKET R_BRACKET .)
    LESS_EQUAL      reduce using rule 79 (array -> L_BRACKET R_BRACKET .)
    EQUALS          reduce using rule 79 (array -> L_BRACKET R_BRACKET .)
    DIFFERENT       reduce using rule 79 (array -> L_BRACKET R_BRACKET .)
    AND             reduce using rule 79 (array -> L_BRACKET R_BRACKET .)
    OR              reduce using rule 79 (array -> L_BRACKET R_BRACKET .)
    SEMICOLON       reduce using rule 79 (array -> L_BRACKET R_BRACKET .)
    R_PAREN         reduce using rule 79 (array -> L_BRACKET R_BRACKET .)
    R_S_BRACKET     reduce using rule 79 (array -> L_BRACKET R_BRACKET .)
    COMMA           reduce using rule 79 (array -> L_BRACKET R_BRACKET .)
    L_BRACKET       reduce using rule 79 (array -> L_BRACKET R_BRACKET .)


state 83

    (8) create_variable -> IMMUTABLE_VARIABLE ID COLON type . t
    (9) t -> . COLON_EQUALS expression
    (10) t -> .

    COLON_EQUALS    shift and go to state 87
    SEMICOLON       reduce using rule 10 (t -> .)
    COMMA           reduce using rule 10 (t -> .)
    R_PAREN         reduce using rule 10 (t -> .)

    t                              shift and go to state 109

state 84

    (12) function -> FUNCTION ID L_PAREN parameter_list . R_PAREN COLON type L_BRACKET block R_BRACKET

    R_PAREN         shift and go to state 110


state 85

    (13) parameter_list -> create_variable . COMMA parameter_list
    (14) parameter_list -> create_variable .

    COMMA           shift and go to state 111
    R_PAREN         reduce using rule 14 (parameter_list -> create_variable .)


state 86

    (7) create_variable -> MUTABLE_VARIABLE ID COLON type t .

    SEMICOLON       reduce using rule 7 (create_variable -> MUTABLE_VARIABLE ID COLON type t .)
    COMMA           reduce using rule 7 (create_variable -> MUTABLE_VARIABLE ID COLON type t .)
    R_PAREN         reduce using rule 7 (create_variable -> MUTABLE_VARIABLE ID COLON type t .)


state 87

    (9) t -> COLON_EQUALS . expression
    (27) expression -> . expression MULTIPLY expression
    (28) expression -> . expression DIVIDE expression
    (29) expression -> . expression MOD expression
    (30) expression -> . expression POWER expression
    (31) expression -> . expression PLUS expression
    (32) expression -> . expression MINUS expression
    (33) expression -> . expression LESS expression
    (34) expression -> . expression GREATER expression
    (35) expression -> . expression GREATER_EQUAL expression
    (36) expression -> . expression LESS_EQUAL expression
    (37) expression -> . expression EQUALS expression
    (38) expression -> . expression DIFFERENT expression
    (39) expression -> . expression AND expression
    (40) expression -> . expression OR expression
    (41) expression -> . L_PAREN expression R_PAREN
    (42) expression -> . value
    (43) expression -> . MINUS expression
    (44) expression -> . NOT expression
    (61) value -> . literal_int
    (62) value -> . literal_double
    (63) value -> . literal_string
    (64) value -> . literal_boolean
    (65) value -> . literal_char
    (66) value -> . literal_float
    (67) value -> . identifier
    (68) value -> . function_call
    (69) value -> . array
    (70) literal_int -> . INT_LITERAL
    (71) literal_double -> . DOUBLE_LITERAL
    (72) literal_string -> . STRING_LITERAL
    (73) literal_boolean -> . BOOLEAN_LITERAL
    (74) literal_char -> . CHAR_LITERAL
    (75) literal_float -> . FLOAT_LITERAL
    (76) identifier -> . ID
    (77) identifier -> . ID L_S_BRACKET expression R_S_BRACKET
    (83) function_call -> . ID L_PAREN arguments_list R_PAREN
    (78) array -> . L_S_BRACKET values_list R_S_BRACKET
    (79) array -> . L_BRACKET R_BRACKET

    L_PAREN         shift and go to state 22
    MINUS           shift and go to state 21
    NOT             shift and go to state 24
    INT_LITERAL     shift and go to state 34
    DOUBLE_LITERAL  shift and go to state 35
    STRING_LITERAL  shift and go to state 36
    BOOLEAN_LITERAL shift and go to state 37
    CHAR_LITERAL    shift and go to state 38
    FLOAT_LITERAL   shift and go to state 39
    ID              shift and go to state 19
    L_S_BRACKET     shift and go to state 40
    L_BRACKET       shift and go to state 41

    expression                     shift and go to state 112
    value                          shift and go to state 23
    literal_int                    shift and go to state 25
    literal_double                 shift and go to state 26
    literal_string                 shift and go to state 27
    literal_boolean                shift and go to state 28
    literal_char                   shift and go to state 29
    literal_float                  shift and go to state 30
    identifier                     shift and go to state 31
    function_call                  shift and go to state 32
    array                          shift and go to state 33

state 88

    (60) type_array -> L_S_BRACKET type . R_S_BRACKET

    R_S_BRACKET     shift and go to state 113


state 89

    (77) identifier -> ID L_S_BRACKET expression . R_S_BRACKET
    (27) expression -> expression . MULTIPLY expression
    (28) expression -> expression . DIVIDE expression
    (29) expression -> expression . MOD expression
    (30) expression -> expression . POWER expression
    (31) expression -> expression . PLUS expression
    (32) expression -> expression . MINUS expression
    (33) expression -> expression . LESS expression
    (34) expression -> expression . GREATER expression
    (35) expression -> expression . GREATER_EQUAL expression
    (36) expression -> expression . LESS_EQUAL expression
    (37) expression -> expression . EQUALS expression
    (38) expression -> expression . DIFFERENT expression
    (39) expression -> expression . AND expression
    (40) expression -> expression . OR expression

    R_S_BRACKET     shift and go to state 114
    MULTIPLY        shift and go to state 63
    DIVIDE          shift and go to state 64
    MOD             shift and go to state 65
    POWER           shift and go to state 66
    PLUS            shift and go to state 67
    MINUS           shift and go to state 68
    LESS            shift and go to state 69
    GREATER         shift and go to state 70
    GREATER_EQUAL   shift and go to state 71
    LESS_EQUAL      shift and go to state 72
    EQUALS          shift and go to state 73
    DIFFERENT       shift and go to state 74
    AND             shift and go to state 75
    OR              shift and go to state 76


state 90

    (83) function_call -> ID L_PAREN arguments_list . R_PAREN

    R_PAREN         shift and go to state 115


state 91

    (84) arguments_list -> expression . COMMA arguments_list
    (85) arguments_list -> expression .
    (27) expression -> expression . MULTIPLY expression
    (28) expression -> expression . DIVIDE expression
    (29) expression -> expression . MOD expression
    (30) expression -> expression . POWER expression
    (31) expression -> expression . PLUS expression
    (32) expression -> expression . MINUS expression
    (33) expression -> expression . LESS expression
    (34) expression -> expression . GREATER expression
    (35) expression -> expression . GREATER_EQUAL expression
    (36) expression -> expression . LESS_EQUAL expression
    (37) expression -> expression . EQUALS expression
    (38) expression -> expression . DIFFERENT expression
    (39) expression -> expression . AND expression
    (40) expression -> expression . OR expression

    COMMA           shift and go to state 116
    R_PAREN         reduce using rule 85 (arguments_list -> expression .)
    MULTIPLY        shift and go to state 63
    DIVIDE          shift and go to state 64
    MOD             shift and go to state 65
    POWER           shift and go to state 66
    PLUS            shift and go to state 67
    MINUS           shift and go to state 68
    LESS            shift and go to state 69
    GREATER         shift and go to state 70
    GREATER_EQUAL   shift and go to state 71
    LESS_EQUAL      shift and go to state 72
    EQUALS          shift and go to state 73
    DIFFERENT       shift and go to state 74
    AND             shift and go to state 75
    OR              shift and go to state 76


state 92

    (27) expression -> expression MULTIPLY expression .
    (27) expression -> expression . MULTIPLY expression
    (28) expression -> expression . DIVIDE expression
    (29) expression -> expression . MOD expression
    (30) expression -> expression . POWER expression
    (31) expression -> expression . PLUS expression
    (32) expression -> expression . MINUS expression
    (33) expression -> expression . LESS expression
    (34) expression -> expression . GREATER expression
    (35) expression -> expression . GREATER_EQUAL expression
    (36) expression -> expression . LESS_EQUAL expression
    (37) expression -> expression . EQUALS expression
    (38) expression -> expression . DIFFERENT expression
    (39) expression -> expression . AND expression
    (40) expression -> expression . OR expression

    MULTIPLY        reduce using rule 27 (expression -> expression MULTIPLY expression .)
    DIVIDE          reduce using rule 27 (expression -> expression MULTIPLY expression .)
    MOD             reduce using rule 27 (expression -> expression MULTIPLY expression .)
    PLUS            reduce using rule 27 (expression -> expression MULTIPLY expression .)
    MINUS           reduce using rule 27 (expression -> expression MULTIPLY expression .)
    SEMICOLON       reduce using rule 27 (expression -> expression MULTIPLY expression .)
    R_PAREN         reduce using rule 27 (expression -> expression MULTIPLY expression .)
    R_S_BRACKET     reduce using rule 27 (expression -> expression MULTIPLY expression .)
    COMMA           reduce using rule 27 (expression -> expression MULTIPLY expression .)
    L_BRACKET       reduce using rule 27 (expression -> expression MULTIPLY expression .)
    POWER           shift and go to state 66
    LESS            shift and go to state 69
    GREATER         shift and go to state 70
    GREATER_EQUAL   shift and go to state 71
    LESS_EQUAL      shift and go to state 72
    EQUALS          shift and go to state 73
    DIFFERENT       shift and go to state 74
    AND             shift and go to state 75
    OR              shift and go to state 76

  ! POWER           [ reduce using rule 27 (expression -> expression MULTIPLY expression .) ]
  ! LESS            [ reduce using rule 27 (expression -> expression MULTIPLY expression .) ]
  ! GREATER         [ reduce using rule 27 (expression -> expression MULTIPLY expression .) ]
  ! GREATER_EQUAL   [ reduce using rule 27 (expression -> expression MULTIPLY expression .) ]
  ! LESS_EQUAL      [ reduce using rule 27 (expression -> expression MULTIPLY expression .) ]
  ! EQUALS          [ reduce using rule 27 (expression -> expression MULTIPLY expression .) ]
  ! DIFFERENT       [ reduce using rule 27 (expression -> expression MULTIPLY expression .) ]
  ! AND             [ reduce using rule 27 (expression -> expression MULTIPLY expression .) ]
  ! OR              [ reduce using rule 27 (expression -> expression MULTIPLY expression .) ]
  ! MULTIPLY        [ shift and go to state 63 ]
  ! DIVIDE          [ shift and go to state 64 ]
  ! MOD             [ shift and go to state 65 ]
  ! PLUS            [ shift and go to state 67 ]
  ! MINUS           [ shift and go to state 68 ]


state 93

    (28) expression -> expression DIVIDE expression .
    (27) expression -> expression . MULTIPLY expression
    (28) expression -> expression . DIVIDE expression
    (29) expression -> expression . MOD expression
    (30) expression -> expression . POWER expression
    (31) expression -> expression . PLUS expression
    (32) expression -> expression . MINUS expression
    (33) expression -> expression . LESS expression
    (34) expression -> expression . GREATER expression
    (35) expression -> expression . GREATER_EQUAL expression
    (36) expression -> expression . LESS_EQUAL expression
    (37) expression -> expression . EQUALS expression
    (38) expression -> expression . DIFFERENT expression
    (39) expression -> expression . AND expression
    (40) expression -> expression . OR expression

    MULTIPLY        reduce using rule 28 (expression -> expression DIVIDE expression .)
    DIVIDE          reduce using rule 28 (expression -> expression DIVIDE expression .)
    MOD             reduce using rule 28 (expression -> expression DIVIDE expression .)
    PLUS            reduce using rule 28 (expression -> expression DIVIDE expression .)
    MINUS           reduce using rule 28 (expression -> expression DIVIDE expression .)
    SEMICOLON       reduce using rule 28 (expression -> expression DIVIDE expression .)
    R_PAREN         reduce using rule 28 (expression -> expression DIVIDE expression .)
    R_S_BRACKET     reduce using rule 28 (expression -> expression DIVIDE expression .)
    COMMA           reduce using rule 28 (expression -> expression DIVIDE expression .)
    L_BRACKET       reduce using rule 28 (expression -> expression DIVIDE expression .)
    POWER           shift and go to state 66
    LESS            shift and go to state 69
    GREATER         shift and go to state 70
    GREATER_EQUAL   shift and go to state 71
    LESS_EQUAL      shift and go to state 72
    EQUALS          shift and go to state 73
    DIFFERENT       shift and go to state 74
    AND             shift and go to state 75
    OR              shift and go to state 76

  ! POWER           [ reduce using rule 28 (expression -> expression DIVIDE expression .) ]
  ! LESS            [ reduce using rule 28 (expression -> expression DIVIDE expression .) ]
  ! GREATER         [ reduce using rule 28 (expression -> expression DIVIDE expression .) ]
  ! GREATER_EQUAL   [ reduce using rule 28 (expression -> expression DIVIDE expression .) ]
  ! LESS_EQUAL      [ reduce using rule 28 (expression -> expression DIVIDE expression .) ]
  ! EQUALS          [ reduce using rule 28 (expression -> expression DIVIDE expression .) ]
  ! DIFFERENT       [ reduce using rule 28 (expression -> expression DIVIDE expression .) ]
  ! AND             [ reduce using rule 28 (expression -> expression DIVIDE expression .) ]
  ! OR              [ reduce using rule 28 (expression -> expression DIVIDE expression .) ]
  ! MULTIPLY        [ shift and go to state 63 ]
  ! DIVIDE          [ shift and go to state 64 ]
  ! MOD             [ shift and go to state 65 ]
  ! PLUS            [ shift and go to state 67 ]
  ! MINUS           [ shift and go to state 68 ]


state 94

    (29) expression -> expression MOD expression .
    (27) expression -> expression . MULTIPLY expression
    (28) expression -> expression . DIVIDE expression
    (29) expression -> expression . MOD expression
    (30) expression -> expression . POWER expression
    (31) expression -> expression . PLUS expression
    (32) expression -> expression . MINUS expression
    (33) expression -> expression . LESS expression
    (34) expression -> expression . GREATER expression
    (35) expression -> expression . GREATER_EQUAL expression
    (36) expression -> expression . LESS_EQUAL expression
    (37) expression -> expression . EQUALS expression
    (38) expression -> expression . DIFFERENT expression
    (39) expression -> expression . AND expression
    (40) expression -> expression . OR expression

    MULTIPLY        reduce using rule 29 (expression -> expression MOD expression .)
    DIVIDE          reduce using rule 29 (expression -> expression MOD expression .)
    MOD             reduce using rule 29 (expression -> expression MOD expression .)
    PLUS            reduce using rule 29 (expression -> expression MOD expression .)
    MINUS           reduce using rule 29 (expression -> expression MOD expression .)
    SEMICOLON       reduce using rule 29 (expression -> expression MOD expression .)
    R_PAREN         reduce using rule 29 (expression -> expression MOD expression .)
    R_S_BRACKET     reduce using rule 29 (expression -> expression MOD expression .)
    COMMA           reduce using rule 29 (expression -> expression MOD expression .)
    L_BRACKET       reduce using rule 29 (expression -> expression MOD expression .)
    POWER           shift and go to state 66
    LESS            shift and go to state 69
    GREATER         shift and go to state 70
    GREATER_EQUAL   shift and go to state 71
    LESS_EQUAL      shift and go to state 72
    EQUALS          shift and go to state 73
    DIFFERENT       shift and go to state 74
    AND             shift and go to state 75
    OR              shift and go to state 76

  ! POWER           [ reduce using rule 29 (expression -> expression MOD expression .) ]
  ! LESS            [ reduce using rule 29 (expression -> expression MOD expression .) ]
  ! GREATER         [ reduce using rule 29 (expression -> expression MOD expression .) ]
  ! GREATER_EQUAL   [ reduce using rule 29 (expression -> expression MOD expression .) ]
  ! LESS_EQUAL      [ reduce using rule 29 (expression -> expression MOD expression .) ]
  ! EQUALS          [ reduce using rule 29 (expression -> expression MOD expression .) ]
  ! DIFFERENT       [ reduce using rule 29 (expression -> expression MOD expression .) ]
  ! AND             [ reduce using rule 29 (expression -> expression MOD expression .) ]
  ! OR              [ reduce using rule 29 (expression -> expression MOD expression .) ]
  ! MULTIPLY        [ shift and go to state 63 ]
  ! DIVIDE          [ shift and go to state 64 ]
  ! MOD             [ shift and go to state 65 ]
  ! PLUS            [ shift and go to state 67 ]
  ! MINUS           [ shift and go to state 68 ]


state 95

    (30) expression -> expression POWER expression .
    (27) expression -> expression . MULTIPLY expression
    (28) expression -> expression . DIVIDE expression
    (29) expression -> expression . MOD expression
    (30) expression -> expression . POWER expression
    (31) expression -> expression . PLUS expression
    (32) expression -> expression . MINUS expression
    (33) expression -> expression . LESS expression
    (34) expression -> expression . GREATER expression
    (35) expression -> expression . GREATER_EQUAL expression
    (36) expression -> expression . LESS_EQUAL expression
    (37) expression -> expression . EQUALS expression
    (38) expression -> expression . DIFFERENT expression
    (39) expression -> expression . AND expression
    (40) expression -> expression . OR expression

    MULTIPLY        reduce using rule 30 (expression -> expression POWER expression .)
    DIVIDE          reduce using rule 30 (expression -> expression POWER expression .)
    MOD             reduce using rule 30 (expression -> expression POWER expression .)
    PLUS            reduce using rule 30 (expression -> expression POWER expression .)
    MINUS           reduce using rule 30 (expression -> expression POWER expression .)
    SEMICOLON       reduce using rule 30 (expression -> expression POWER expression .)
    R_PAREN         reduce using rule 30 (expression -> expression POWER expression .)
    R_S_BRACKET     reduce using rule 30 (expression -> expression POWER expression .)
    COMMA           reduce using rule 30 (expression -> expression POWER expression .)
    L_BRACKET       reduce using rule 30 (expression -> expression POWER expression .)
    POWER           shift and go to state 66
    LESS            shift and go to state 69
    GREATER         shift and go to state 70
    GREATER_EQUAL   shift and go to state 71
    LESS_EQUAL      shift and go to state 72
    EQUALS          shift and go to state 73
    DIFFERENT       shift and go to state 74
    AND             shift and go to state 75
    OR              shift and go to state 76

  ! POWER           [ reduce using rule 30 (expression -> expression POWER expression .) ]
  ! LESS            [ reduce using rule 30 (expression -> expression POWER expression .) ]
  ! GREATER         [ reduce using rule 30 (expression -> expression POWER expression .) ]
  ! GREATER_EQUAL   [ reduce using rule 30 (expression -> expression POWER expression .) ]
  ! LESS_EQUAL      [ reduce using rule 30 (expression -> expression POWER expression .) ]
  ! EQUALS          [ reduce using rule 30 (expression -> expression POWER expression .) ]
  ! DIFFERENT       [ reduce using rule 30 (expression -> expression POWER expression .) ]
  ! AND             [ reduce using rule 30 (expression -> expression POWER expression .) ]
  ! OR              [ reduce using rule 30 (expression -> expression POWER expression .) ]
  ! MULTIPLY        [ shift and go to state 63 ]
  ! DIVIDE          [ shift and go to state 64 ]
  ! MOD             [ shift and go to state 65 ]
  ! PLUS            [ shift and go to state 67 ]
  ! MINUS           [ shift and go to state 68 ]


state 96

    (31) expression -> expression PLUS expression .
    (27) expression -> expression . MULTIPLY expression
    (28) expression -> expression . DIVIDE expression
    (29) expression -> expression . MOD expression
    (30) expression -> expression . POWER expression
    (31) expression -> expression . PLUS expression
    (32) expression -> expression . MINUS expression
    (33) expression -> expression . LESS expression
    (34) expression -> expression . GREATER expression
    (35) expression -> expression . GREATER_EQUAL expression
    (36) expression -> expression . LESS_EQUAL expression
    (37) expression -> expression . EQUALS expression
    (38) expression -> expression . DIFFERENT expression
    (39) expression -> expression . AND expression
    (40) expression -> expression . OR expression

    PLUS            reduce using rule 31 (expression -> expression PLUS expression .)
    MINUS           reduce using rule 31 (expression -> expression PLUS expression .)
    SEMICOLON       reduce using rule 31 (expression -> expression PLUS expression .)
    R_PAREN         reduce using rule 31 (expression -> expression PLUS expression .)
    R_S_BRACKET     reduce using rule 31 (expression -> expression PLUS expression .)
    COMMA           reduce using rule 31 (expression -> expression PLUS expression .)
    L_BRACKET       reduce using rule 31 (expression -> expression PLUS expression .)
    MULTIPLY        shift and go to state 63
    DIVIDE          shift and go to state 64
    MOD             shift and go to state 65
    POWER           shift and go to state 66
    LESS            shift and go to state 69
    GREATER         shift and go to state 70
    GREATER_EQUAL   shift and go to state 71
    LESS_EQUAL      shift and go to state 72
    EQUALS          shift and go to state 73
    DIFFERENT       shift and go to state 74
    AND             shift and go to state 75
    OR              shift and go to state 76

  ! MULTIPLY        [ reduce using rule 31 (expression -> expression PLUS expression .) ]
  ! DIVIDE          [ reduce using rule 31 (expression -> expression PLUS expression .) ]
  ! MOD             [ reduce using rule 31 (expression -> expression PLUS expression .) ]
  ! POWER           [ reduce using rule 31 (expression -> expression PLUS expression .) ]
  ! LESS            [ reduce using rule 31 (expression -> expression PLUS expression .) ]
  ! GREATER         [ reduce using rule 31 (expression -> expression PLUS expression .) ]
  ! GREATER_EQUAL   [ reduce using rule 31 (expression -> expression PLUS expression .) ]
  ! LESS_EQUAL      [ reduce using rule 31 (expression -> expression PLUS expression .) ]
  ! EQUALS          [ reduce using rule 31 (expression -> expression PLUS expression .) ]
  ! DIFFERENT       [ reduce using rule 31 (expression -> expression PLUS expression .) ]
  ! AND             [ reduce using rule 31 (expression -> expression PLUS expression .) ]
  ! OR              [ reduce using rule 31 (expression -> expression PLUS expression .) ]
  ! PLUS            [ shift and go to state 67 ]
  ! MINUS           [ shift and go to state 68 ]


state 97

    (32) expression -> expression MINUS expression .
    (27) expression -> expression . MULTIPLY expression
    (28) expression -> expression . DIVIDE expression
    (29) expression -> expression . MOD expression
    (30) expression -> expression . POWER expression
    (31) expression -> expression . PLUS expression
    (32) expression -> expression . MINUS expression
    (33) expression -> expression . LESS expression
    (34) expression -> expression . GREATER expression
    (35) expression -> expression . GREATER_EQUAL expression
    (36) expression -> expression . LESS_EQUAL expression
    (37) expression -> expression . EQUALS expression
    (38) expression -> expression . DIFFERENT expression
    (39) expression -> expression . AND expression
    (40) expression -> expression . OR expression

    PLUS            reduce using rule 32 (expression -> expression MINUS expression .)
    MINUS           reduce using rule 32 (expression -> expression MINUS expression .)
    SEMICOLON       reduce using rule 32 (expression -> expression MINUS expression .)
    R_PAREN         reduce using rule 32 (expression -> expression MINUS expression .)
    R_S_BRACKET     reduce using rule 32 (expression -> expression MINUS expression .)
    COMMA           reduce using rule 32 (expression -> expression MINUS expression .)
    L_BRACKET       reduce using rule 32 (expression -> expression MINUS expression .)
    MULTIPLY        shift and go to state 63
    DIVIDE          shift and go to state 64
    MOD             shift and go to state 65
    POWER           shift and go to state 66
    LESS            shift and go to state 69
    GREATER         shift and go to state 70
    GREATER_EQUAL   shift and go to state 71
    LESS_EQUAL      shift and go to state 72
    EQUALS          shift and go to state 73
    DIFFERENT       shift and go to state 74
    AND             shift and go to state 75
    OR              shift and go to state 76

  ! MULTIPLY        [ reduce using rule 32 (expression -> expression MINUS expression .) ]
  ! DIVIDE          [ reduce using rule 32 (expression -> expression MINUS expression .) ]
  ! MOD             [ reduce using rule 32 (expression -> expression MINUS expression .) ]
  ! POWER           [ reduce using rule 32 (expression -> expression MINUS expression .) ]
  ! LESS            [ reduce using rule 32 (expression -> expression MINUS expression .) ]
  ! GREATER         [ reduce using rule 32 (expression -> expression MINUS expression .) ]
  ! GREATER_EQUAL   [ reduce using rule 32 (expression -> expression MINUS expression .) ]
  ! LESS_EQUAL      [ reduce using rule 32 (expression -> expression MINUS expression .) ]
  ! EQUALS          [ reduce using rule 32 (expression -> expression MINUS expression .) ]
  ! DIFFERENT       [ reduce using rule 32 (expression -> expression MINUS expression .) ]
  ! AND             [ reduce using rule 32 (expression -> expression MINUS expression .) ]
  ! OR              [ reduce using rule 32 (expression -> expression MINUS expression .) ]
  ! PLUS            [ shift and go to state 67 ]
  ! MINUS           [ shift and go to state 68 ]


state 98

    (33) expression -> expression LESS expression .
    (27) expression -> expression . MULTIPLY expression
    (28) expression -> expression . DIVIDE expression
    (29) expression -> expression . MOD expression
    (30) expression -> expression . POWER expression
    (31) expression -> expression . PLUS expression
    (32) expression -> expression . MINUS expression
    (33) expression -> expression . LESS expression
    (34) expression -> expression . GREATER expression
    (35) expression -> expression . GREATER_EQUAL expression
    (36) expression -> expression . LESS_EQUAL expression
    (37) expression -> expression . EQUALS expression
    (38) expression -> expression . DIFFERENT expression
    (39) expression -> expression . AND expression
    (40) expression -> expression . OR expression

    MULTIPLY        reduce using rule 33 (expression -> expression LESS expression .)
    DIVIDE          reduce using rule 33 (expression -> expression LESS expression .)
    MOD             reduce using rule 33 (expression -> expression LESS expression .)
    POWER           reduce using rule 33 (expression -> expression LESS expression .)
    PLUS            reduce using rule 33 (expression -> expression LESS expression .)
    MINUS           reduce using rule 33 (expression -> expression LESS expression .)
    LESS            reduce using rule 33 (expression -> expression LESS expression .)
    GREATER         reduce using rule 33 (expression -> expression LESS expression .)
    GREATER_EQUAL   reduce using rule 33 (expression -> expression LESS expression .)
    LESS_EQUAL      reduce using rule 33 (expression -> expression LESS expression .)
    EQUALS          reduce using rule 33 (expression -> expression LESS expression .)
    DIFFERENT       reduce using rule 33 (expression -> expression LESS expression .)
    SEMICOLON       reduce using rule 33 (expression -> expression LESS expression .)
    R_PAREN         reduce using rule 33 (expression -> expression LESS expression .)
    R_S_BRACKET     reduce using rule 33 (expression -> expression LESS expression .)
    COMMA           reduce using rule 33 (expression -> expression LESS expression .)
    L_BRACKET       reduce using rule 33 (expression -> expression LESS expression .)
    AND             shift and go to state 75
    OR              shift and go to state 76

  ! AND             [ reduce using rule 33 (expression -> expression LESS expression .) ]
  ! OR              [ reduce using rule 33 (expression -> expression LESS expression .) ]
  ! MULTIPLY        [ shift and go to state 63 ]
  ! DIVIDE          [ shift and go to state 64 ]
  ! MOD             [ shift and go to state 65 ]
  ! POWER           [ shift and go to state 66 ]
  ! PLUS            [ shift and go to state 67 ]
  ! MINUS           [ shift and go to state 68 ]
  ! LESS            [ shift and go to state 69 ]
  ! GREATER         [ shift and go to state 70 ]
  ! GREATER_EQUAL   [ shift and go to state 71 ]
  ! LESS_EQUAL      [ shift and go to state 72 ]
  ! EQUALS          [ shift and go to state 73 ]
  ! DIFFERENT       [ shift and go to state 74 ]


state 99

    (34) expression -> expression GREATER expression .
    (27) expression -> expression . MULTIPLY expression
    (28) expression -> expression . DIVIDE expression
    (29) expression -> expression . MOD expression
    (30) expression -> expression . POWER expression
    (31) expression -> expression . PLUS expression
    (32) expression -> expression . MINUS expression
    (33) expression -> expression . LESS expression
    (34) expression -> expression . GREATER expression
    (35) expression -> expression . GREATER_EQUAL expression
    (36) expression -> expression . LESS_EQUAL expression
    (37) expression -> expression . EQUALS expression
    (38) expression -> expression . DIFFERENT expression
    (39) expression -> expression . AND expression
    (40) expression -> expression . OR expression

    MULTIPLY        reduce using rule 34 (expression -> expression GREATER expression .)
    DIVIDE          reduce using rule 34 (expression -> expression GREATER expression .)
    MOD             reduce using rule 34 (expression -> expression GREATER expression .)
    POWER           reduce using rule 34 (expression -> expression GREATER expression .)
    PLUS            reduce using rule 34 (expression -> expression GREATER expression .)
    MINUS           reduce using rule 34 (expression -> expression GREATER expression .)
    LESS            reduce using rule 34 (expression -> expression GREATER expression .)
    GREATER         reduce using rule 34 (expression -> expression GREATER expression .)
    GREATER_EQUAL   reduce using rule 34 (expression -> expression GREATER expression .)
    LESS_EQUAL      reduce using rule 34 (expression -> expression GREATER expression .)
    EQUALS          reduce using rule 34 (expression -> expression GREATER expression .)
    DIFFERENT       reduce using rule 34 (expression -> expression GREATER expression .)
    SEMICOLON       reduce using rule 34 (expression -> expression GREATER expression .)
    R_PAREN         reduce using rule 34 (expression -> expression GREATER expression .)
    R_S_BRACKET     reduce using rule 34 (expression -> expression GREATER expression .)
    COMMA           reduce using rule 34 (expression -> expression GREATER expression .)
    L_BRACKET       reduce using rule 34 (expression -> expression GREATER expression .)
    AND             shift and go to state 75
    OR              shift and go to state 76

  ! AND             [ reduce using rule 34 (expression -> expression GREATER expression .) ]
  ! OR              [ reduce using rule 34 (expression -> expression GREATER expression .) ]
  ! MULTIPLY        [ shift and go to state 63 ]
  ! DIVIDE          [ shift and go to state 64 ]
  ! MOD             [ shift and go to state 65 ]
  ! POWER           [ shift and go to state 66 ]
  ! PLUS            [ shift and go to state 67 ]
  ! MINUS           [ shift and go to state 68 ]
  ! LESS            [ shift and go to state 69 ]
  ! GREATER         [ shift and go to state 70 ]
  ! GREATER_EQUAL   [ shift and go to state 71 ]
  ! LESS_EQUAL      [ shift and go to state 72 ]
  ! EQUALS          [ shift and go to state 73 ]
  ! DIFFERENT       [ shift and go to state 74 ]


state 100

    (35) expression -> expression GREATER_EQUAL expression .
    (27) expression -> expression . MULTIPLY expression
    (28) expression -> expression . DIVIDE expression
    (29) expression -> expression . MOD expression
    (30) expression -> expression . POWER expression
    (31) expression -> expression . PLUS expression
    (32) expression -> expression . MINUS expression
    (33) expression -> expression . LESS expression
    (34) expression -> expression . GREATER expression
    (35) expression -> expression . GREATER_EQUAL expression
    (36) expression -> expression . LESS_EQUAL expression
    (37) expression -> expression . EQUALS expression
    (38) expression -> expression . DIFFERENT expression
    (39) expression -> expression . AND expression
    (40) expression -> expression . OR expression

    MULTIPLY        reduce using rule 35 (expression -> expression GREATER_EQUAL expression .)
    DIVIDE          reduce using rule 35 (expression -> expression GREATER_EQUAL expression .)
    MOD             reduce using rule 35 (expression -> expression GREATER_EQUAL expression .)
    POWER           reduce using rule 35 (expression -> expression GREATER_EQUAL expression .)
    PLUS            reduce using rule 35 (expression -> expression GREATER_EQUAL expression .)
    MINUS           reduce using rule 35 (expression -> expression GREATER_EQUAL expression .)
    LESS            reduce using rule 35 (expression -> expression GREATER_EQUAL expression .)
    GREATER         reduce using rule 35 (expression -> expression GREATER_EQUAL expression .)
    GREATER_EQUAL   reduce using rule 35 (expression -> expression GREATER_EQUAL expression .)
    LESS_EQUAL      reduce using rule 35 (expression -> expression GREATER_EQUAL expression .)
    EQUALS          reduce using rule 35 (expression -> expression GREATER_EQUAL expression .)
    DIFFERENT       reduce using rule 35 (expression -> expression GREATER_EQUAL expression .)
    SEMICOLON       reduce using rule 35 (expression -> expression GREATER_EQUAL expression .)
    R_PAREN         reduce using rule 35 (expression -> expression GREATER_EQUAL expression .)
    R_S_BRACKET     reduce using rule 35 (expression -> expression GREATER_EQUAL expression .)
    COMMA           reduce using rule 35 (expression -> expression GREATER_EQUAL expression .)
    L_BRACKET       reduce using rule 35 (expression -> expression GREATER_EQUAL expression .)
    AND             shift and go to state 75
    OR              shift and go to state 76

  ! AND             [ reduce using rule 35 (expression -> expression GREATER_EQUAL expression .) ]
  ! OR              [ reduce using rule 35 (expression -> expression GREATER_EQUAL expression .) ]
  ! MULTIPLY        [ shift and go to state 63 ]
  ! DIVIDE          [ shift and go to state 64 ]
  ! MOD             [ shift and go to state 65 ]
  ! POWER           [ shift and go to state 66 ]
  ! PLUS            [ shift and go to state 67 ]
  ! MINUS           [ shift and go to state 68 ]
  ! LESS            [ shift and go to state 69 ]
  ! GREATER         [ shift and go to state 70 ]
  ! GREATER_EQUAL   [ shift and go to state 71 ]
  ! LESS_EQUAL      [ shift and go to state 72 ]
  ! EQUALS          [ shift and go to state 73 ]
  ! DIFFERENT       [ shift and go to state 74 ]


state 101

    (36) expression -> expression LESS_EQUAL expression .
    (27) expression -> expression . MULTIPLY expression
    (28) expression -> expression . DIVIDE expression
    (29) expression -> expression . MOD expression
    (30) expression -> expression . POWER expression
    (31) expression -> expression . PLUS expression
    (32) expression -> expression . MINUS expression
    (33) expression -> expression . LESS expression
    (34) expression -> expression . GREATER expression
    (35) expression -> expression . GREATER_EQUAL expression
    (36) expression -> expression . LESS_EQUAL expression
    (37) expression -> expression . EQUALS expression
    (38) expression -> expression . DIFFERENT expression
    (39) expression -> expression . AND expression
    (40) expression -> expression . OR expression

    MULTIPLY        reduce using rule 36 (expression -> expression LESS_EQUAL expression .)
    DIVIDE          reduce using rule 36 (expression -> expression LESS_EQUAL expression .)
    MOD             reduce using rule 36 (expression -> expression LESS_EQUAL expression .)
    POWER           reduce using rule 36 (expression -> expression LESS_EQUAL expression .)
    PLUS            reduce using rule 36 (expression -> expression LESS_EQUAL expression .)
    MINUS           reduce using rule 36 (expression -> expression LESS_EQUAL expression .)
    LESS            reduce using rule 36 (expression -> expression LESS_EQUAL expression .)
    GREATER         reduce using rule 36 (expression -> expression LESS_EQUAL expression .)
    GREATER_EQUAL   reduce using rule 36 (expression -> expression LESS_EQUAL expression .)
    LESS_EQUAL      reduce using rule 36 (expression -> expression LESS_EQUAL expression .)
    EQUALS          reduce using rule 36 (expression -> expression LESS_EQUAL expression .)
    DIFFERENT       reduce using rule 36 (expression -> expression LESS_EQUAL expression .)
    SEMICOLON       reduce using rule 36 (expression -> expression LESS_EQUAL expression .)
    R_PAREN         reduce using rule 36 (expression -> expression LESS_EQUAL expression .)
    R_S_BRACKET     reduce using rule 36 (expression -> expression LESS_EQUAL expression .)
    COMMA           reduce using rule 36 (expression -> expression LESS_EQUAL expression .)
    L_BRACKET       reduce using rule 36 (expression -> expression LESS_EQUAL expression .)
    AND             shift and go to state 75
    OR              shift and go to state 76

  ! AND             [ reduce using rule 36 (expression -> expression LESS_EQUAL expression .) ]
  ! OR              [ reduce using rule 36 (expression -> expression LESS_EQUAL expression .) ]
  ! MULTIPLY        [ shift and go to state 63 ]
  ! DIVIDE          [ shift and go to state 64 ]
  ! MOD             [ shift and go to state 65 ]
  ! POWER           [ shift and go to state 66 ]
  ! PLUS            [ shift and go to state 67 ]
  ! MINUS           [ shift and go to state 68 ]
  ! LESS            [ shift and go to state 69 ]
  ! GREATER         [ shift and go to state 70 ]
  ! GREATER_EQUAL   [ shift and go to state 71 ]
  ! LESS_EQUAL      [ shift and go to state 72 ]
  ! EQUALS          [ shift and go to state 73 ]
  ! DIFFERENT       [ shift and go to state 74 ]


state 102

    (37) expression -> expression EQUALS expression .
    (27) expression -> expression . MULTIPLY expression
    (28) expression -> expression . DIVIDE expression
    (29) expression -> expression . MOD expression
    (30) expression -> expression . POWER expression
    (31) expression -> expression . PLUS expression
    (32) expression -> expression . MINUS expression
    (33) expression -> expression . LESS expression
    (34) expression -> expression . GREATER expression
    (35) expression -> expression . GREATER_EQUAL expression
    (36) expression -> expression . LESS_EQUAL expression
    (37) expression -> expression . EQUALS expression
    (38) expression -> expression . DIFFERENT expression
    (39) expression -> expression . AND expression
    (40) expression -> expression . OR expression

    MULTIPLY        reduce using rule 37 (expression -> expression EQUALS expression .)
    DIVIDE          reduce using rule 37 (expression -> expression EQUALS expression .)
    MOD             reduce using rule 37 (expression -> expression EQUALS expression .)
    POWER           reduce using rule 37 (expression -> expression EQUALS expression .)
    PLUS            reduce using rule 37 (expression -> expression EQUALS expression .)
    MINUS           reduce using rule 37 (expression -> expression EQUALS expression .)
    LESS            reduce using rule 37 (expression -> expression EQUALS expression .)
    GREATER         reduce using rule 37 (expression -> expression EQUALS expression .)
    GREATER_EQUAL   reduce using rule 37 (expression -> expression EQUALS expression .)
    LESS_EQUAL      reduce using rule 37 (expression -> expression EQUALS expression .)
    EQUALS          reduce using rule 37 (expression -> expression EQUALS expression .)
    DIFFERENT       reduce using rule 37 (expression -> expression EQUALS expression .)
    SEMICOLON       reduce using rule 37 (expression -> expression EQUALS expression .)
    R_PAREN         reduce using rule 37 (expression -> expression EQUALS expression .)
    R_S_BRACKET     reduce using rule 37 (expression -> expression EQUALS expression .)
    COMMA           reduce using rule 37 (expression -> expression EQUALS expression .)
    L_BRACKET       reduce using rule 37 (expression -> expression EQUALS expression .)
    AND             shift and go to state 75
    OR              shift and go to state 76

  ! AND             [ reduce using rule 37 (expression -> expression EQUALS expression .) ]
  ! OR              [ reduce using rule 37 (expression -> expression EQUALS expression .) ]
  ! MULTIPLY        [ shift and go to state 63 ]
  ! DIVIDE          [ shift and go to state 64 ]
  ! MOD             [ shift and go to state 65 ]
  ! POWER           [ shift and go to state 66 ]
  ! PLUS            [ shift and go to state 67 ]
  ! MINUS           [ shift and go to state 68 ]
  ! LESS            [ shift and go to state 69 ]
  ! GREATER         [ shift and go to state 70 ]
  ! GREATER_EQUAL   [ shift and go to state 71 ]
  ! LESS_EQUAL      [ shift and go to state 72 ]
  ! EQUALS          [ shift and go to state 73 ]
  ! DIFFERENT       [ shift and go to state 74 ]


state 103

    (38) expression -> expression DIFFERENT expression .
    (27) expression -> expression . MULTIPLY expression
    (28) expression -> expression . DIVIDE expression
    (29) expression -> expression . MOD expression
    (30) expression -> expression . POWER expression
    (31) expression -> expression . PLUS expression
    (32) expression -> expression . MINUS expression
    (33) expression -> expression . LESS expression
    (34) expression -> expression . GREATER expression
    (35) expression -> expression . GREATER_EQUAL expression
    (36) expression -> expression . LESS_EQUAL expression
    (37) expression -> expression . EQUALS expression
    (38) expression -> expression . DIFFERENT expression
    (39) expression -> expression . AND expression
    (40) expression -> expression . OR expression

    MULTIPLY        reduce using rule 38 (expression -> expression DIFFERENT expression .)
    DIVIDE          reduce using rule 38 (expression -> expression DIFFERENT expression .)
    MOD             reduce using rule 38 (expression -> expression DIFFERENT expression .)
    POWER           reduce using rule 38 (expression -> expression DIFFERENT expression .)
    PLUS            reduce using rule 38 (expression -> expression DIFFERENT expression .)
    MINUS           reduce using rule 38 (expression -> expression DIFFERENT expression .)
    LESS            reduce using rule 38 (expression -> expression DIFFERENT expression .)
    GREATER         reduce using rule 38 (expression -> expression DIFFERENT expression .)
    GREATER_EQUAL   reduce using rule 38 (expression -> expression DIFFERENT expression .)
    LESS_EQUAL      reduce using rule 38 (expression -> expression DIFFERENT expression .)
    EQUALS          reduce using rule 38 (expression -> expression DIFFERENT expression .)
    DIFFERENT       reduce using rule 38 (expression -> expression DIFFERENT expression .)
    SEMICOLON       reduce using rule 38 (expression -> expression DIFFERENT expression .)
    R_PAREN         reduce using rule 38 (expression -> expression DIFFERENT expression .)
    R_S_BRACKET     reduce using rule 38 (expression -> expression DIFFERENT expression .)
    COMMA           reduce using rule 38 (expression -> expression DIFFERENT expression .)
    L_BRACKET       reduce using rule 38 (expression -> expression DIFFERENT expression .)
    AND             shift and go to state 75
    OR              shift and go to state 76

  ! AND             [ reduce using rule 38 (expression -> expression DIFFERENT expression .) ]
  ! OR              [ reduce using rule 38 (expression -> expression DIFFERENT expression .) ]
  ! MULTIPLY        [ shift and go to state 63 ]
  ! DIVIDE          [ shift and go to state 64 ]
  ! MOD             [ shift and go to state 65 ]
  ! POWER           [ shift and go to state 66 ]
  ! PLUS            [ shift and go to state 67 ]
  ! MINUS           [ shift and go to state 68 ]
  ! LESS            [ shift and go to state 69 ]
  ! GREATER         [ shift and go to state 70 ]
  ! GREATER_EQUAL   [ shift and go to state 71 ]
  ! LESS_EQUAL      [ shift and go to state 72 ]
  ! EQUALS          [ shift and go to state 73 ]
  ! DIFFERENT       [ shift and go to state 74 ]


state 104

    (39) expression -> expression AND expression .
    (27) expression -> expression . MULTIPLY expression
    (28) expression -> expression . DIVIDE expression
    (29) expression -> expression . MOD expression
    (30) expression -> expression . POWER expression
    (31) expression -> expression . PLUS expression
    (32) expression -> expression . MINUS expression
    (33) expression -> expression . LESS expression
    (34) expression -> expression . GREATER expression
    (35) expression -> expression . GREATER_EQUAL expression
    (36) expression -> expression . LESS_EQUAL expression
    (37) expression -> expression . EQUALS expression
    (38) expression -> expression . DIFFERENT expression
    (39) expression -> expression . AND expression
    (40) expression -> expression . OR expression

    MULTIPLY        reduce using rule 39 (expression -> expression AND expression .)
    DIVIDE          reduce using rule 39 (expression -> expression AND expression .)
    MOD             reduce using rule 39 (expression -> expression AND expression .)
    POWER           reduce using rule 39 (expression -> expression AND expression .)
    PLUS            reduce using rule 39 (expression -> expression AND expression .)
    MINUS           reduce using rule 39 (expression -> expression AND expression .)
    LESS            reduce using rule 39 (expression -> expression AND expression .)
    GREATER         reduce using rule 39 (expression -> expression AND expression .)
    GREATER_EQUAL   reduce using rule 39 (expression -> expression AND expression .)
    LESS_EQUAL      reduce using rule 39 (expression -> expression AND expression .)
    EQUALS          reduce using rule 39 (expression -> expression AND expression .)
    DIFFERENT       reduce using rule 39 (expression -> expression AND expression .)
    AND             reduce using rule 39 (expression -> expression AND expression .)
    SEMICOLON       reduce using rule 39 (expression -> expression AND expression .)
    R_PAREN         reduce using rule 39 (expression -> expression AND expression .)
    R_S_BRACKET     reduce using rule 39 (expression -> expression AND expression .)
    COMMA           reduce using rule 39 (expression -> expression AND expression .)
    L_BRACKET       reduce using rule 39 (expression -> expression AND expression .)
    OR              shift and go to state 76

  ! OR              [ reduce using rule 39 (expression -> expression AND expression .) ]
  ! MULTIPLY        [ shift and go to state 63 ]
  ! DIVIDE          [ shift and go to state 64 ]
  ! MOD             [ shift and go to state 65 ]
  ! POWER           [ shift and go to state 66 ]
  ! PLUS            [ shift and go to state 67 ]
  ! MINUS           [ shift and go to state 68 ]
  ! LESS            [ shift and go to state 69 ]
  ! GREATER         [ shift and go to state 70 ]
  ! GREATER_EQUAL   [ shift and go to state 71 ]
  ! LESS_EQUAL      [ shift and go to state 72 ]
  ! EQUALS          [ shift and go to state 73 ]
  ! DIFFERENT       [ shift and go to state 74 ]
  ! AND             [ shift and go to state 75 ]


state 105

    (40) expression -> expression OR expression .
    (27) expression -> expression . MULTIPLY expression
    (28) expression -> expression . DIVIDE expression
    (29) expression -> expression . MOD expression
    (30) expression -> expression . POWER expression
    (31) expression -> expression . PLUS expression
    (32) expression -> expression . MINUS expression
    (33) expression -> expression . LESS expression
    (34) expression -> expression . GREATER expression
    (35) expression -> expression . GREATER_EQUAL expression
    (36) expression -> expression . LESS_EQUAL expression
    (37) expression -> expression . EQUALS expression
    (38) expression -> expression . DIFFERENT expression
    (39) expression -> expression . AND expression
    (40) expression -> expression . OR expression

    MULTIPLY        reduce using rule 40 (expression -> expression OR expression .)
    DIVIDE          reduce using rule 40 (expression -> expression OR expression .)
    MOD             reduce using rule 40 (expression -> expression OR expression .)
    POWER           reduce using rule 40 (expression -> expression OR expression .)
    PLUS            reduce using rule 40 (expression -> expression OR expression .)
    MINUS           reduce using rule 40 (expression -> expression OR expression .)
    LESS            reduce using rule 40 (expression -> expression OR expression .)
    GREATER         reduce using rule 40 (expression -> expression OR expression .)
    GREATER_EQUAL   reduce using rule 40 (expression -> expression OR expression .)
    LESS_EQUAL      reduce using rule 40 (expression -> expression OR expression .)
    EQUALS          reduce using rule 40 (expression -> expression OR expression .)
    DIFFERENT       reduce using rule 40 (expression -> expression OR expression .)
    AND             reduce using rule 40 (expression -> expression OR expression .)
    OR              reduce using rule 40 (expression -> expression OR expression .)
    SEMICOLON       reduce using rule 40 (expression -> expression OR expression .)
    R_PAREN         reduce using rule 40 (expression -> expression OR expression .)
    R_S_BRACKET     reduce using rule 40 (expression -> expression OR expression .)
    COMMA           reduce using rule 40 (expression -> expression OR expression .)
    L_BRACKET       reduce using rule 40 (expression -> expression OR expression .)

  ! MULTIPLY        [ shift and go to state 63 ]
  ! DIVIDE          [ shift and go to state 64 ]
  ! MOD             [ shift and go to state 65 ]
  ! POWER           [ shift and go to state 66 ]
  ! PLUS            [ shift and go to state 67 ]
  ! MINUS           [ shift and go to state 68 ]
  ! LESS            [ shift and go to state 69 ]
  ! GREATER         [ shift and go to state 70 ]
  ! GREATER_EQUAL   [ shift and go to state 71 ]
  ! LESS_EQUAL      [ shift and go to state 72 ]
  ! EQUALS          [ shift and go to state 73 ]
  ! DIFFERENT       [ shift and go to state 74 ]
  ! AND             [ shift and go to state 75 ]
  ! OR              [ shift and go to state 76 ]


state 106

    (41) expression -> L_PAREN expression R_PAREN .

    MULTIPLY        reduce using rule 41 (expression -> L_PAREN expression R_PAREN .)
    DIVIDE          reduce using rule 41 (expression -> L_PAREN expression R_PAREN .)
    MOD             reduce using rule 41 (expression -> L_PAREN expression R_PAREN .)
    POWER           reduce using rule 41 (expression -> L_PAREN expression R_PAREN .)
    PLUS            reduce using rule 41 (expression -> L_PAREN expression R_PAREN .)
    MINUS           reduce using rule 41 (expression -> L_PAREN expression R_PAREN .)
    LESS            reduce using rule 41 (expression -> L_PAREN expression R_PAREN .)
    GREATER         reduce using rule 41 (expression -> L_PAREN expression R_PAREN .)
    GREATER_EQUAL   reduce using rule 41 (expression -> L_PAREN expression R_PAREN .)
    LESS_EQUAL      reduce using rule 41 (expression -> L_PAREN expression R_PAREN .)
    EQUALS          reduce using rule 41 (expression -> L_PAREN expression R_PAREN .)
    DIFFERENT       reduce using rule 41 (expression -> L_PAREN expression R_PAREN .)
    AND             reduce using rule 41 (expression -> L_PAREN expression R_PAREN .)
    OR              reduce using rule 41 (expression -> L_PAREN expression R_PAREN .)
    SEMICOLON       reduce using rule 41 (expression -> L_PAREN expression R_PAREN .)
    R_PAREN         reduce using rule 41 (expression -> L_PAREN expression R_PAREN .)
    R_S_BRACKET     reduce using rule 41 (expression -> L_PAREN expression R_PAREN .)
    COMMA           reduce using rule 41 (expression -> L_PAREN expression R_PAREN .)
    L_BRACKET       reduce using rule 41 (expression -> L_PAREN expression R_PAREN .)


state 107

    (78) array -> L_S_BRACKET values_list R_S_BRACKET .

    MULTIPLY        reduce using rule 78 (array -> L_S_BRACKET values_list R_S_BRACKET .)
    DIVIDE          reduce using rule 78 (array -> L_S_BRACKET values_list R_S_BRACKET .)
    MOD             reduce using rule 78 (array -> L_S_BRACKET values_list R_S_BRACKET .)
    POWER           reduce using rule 78 (array -> L_S_BRACKET values_list R_S_BRACKET .)
    PLUS            reduce using rule 78 (array -> L_S_BRACKET values_list R_S_BRACKET .)
    MINUS           reduce using rule 78 (array -> L_S_BRACKET values_list R_S_BRACKET .)
    LESS            reduce using rule 78 (array -> L_S_BRACKET values_list R_S_BRACKET .)
    GREATER         reduce using rule 78 (array -> L_S_BRACKET values_list R_S_BRACKET .)
    GREATER_EQUAL   reduce using rule 78 (array -> L_S_BRACKET values_list R_S_BRACKET .)
    LESS_EQUAL      reduce using rule 78 (array -> L_S_BRACKET values_list R_S_BRACKET .)
    EQUALS          reduce using rule 78 (array -> L_S_BRACKET values_list R_S_BRACKET .)
    DIFFERENT       reduce using rule 78 (array -> L_S_BRACKET values_list R_S_BRACKET .)
    AND             reduce using rule 78 (array -> L_S_BRACKET values_list R_S_BRACKET .)
    OR              reduce using rule 78 (array -> L_S_BRACKET values_list R_S_BRACKET .)
    SEMICOLON       reduce using rule 78 (array -> L_S_BRACKET values_list R_S_BRACKET .)
    R_PAREN         reduce using rule 78 (array -> L_S_BRACKET values_list R_S_BRACKET .)
    R_S_BRACKET     reduce using rule 78 (array -> L_S_BRACKET values_list R_S_BRACKET .)
    COMMA           reduce using rule 78 (array -> L_S_BRACKET values_list R_S_BRACKET .)
    L_BRACKET       reduce using rule 78 (array -> L_S_BRACKET values_list R_S_BRACKET .)


state 108

    (80) values_list -> value COMMA . values_list
    (80) values_list -> . value COMMA values_list
    (81) values_list -> . value
    (82) values_list -> .
    (61) value -> . literal_int
    (62) value -> . literal_double
    (63) value -> . literal_string
    (64) value -> . literal_boolean
    (65) value -> . literal_char
    (66) value -> . literal_float
    (67) value -> . identifier
    (68) value -> . function_call
    (69) value -> . array
    (70) literal_int -> . INT_LITERAL
    (71) literal_double -> . DOUBLE_LITERAL
    (72) literal_string -> . STRING_LITERAL
    (73) literal_boolean -> . BOOLEAN_LITERAL
    (74) literal_char -> . CHAR_LITERAL
    (75) literal_float -> . FLOAT_LITERAL
    (76) identifier -> . ID
    (77) identifier -> . ID L_S_BRACKET expression R_S_BRACKET
    (83) function_call -> . ID L_PAREN arguments_list R_PAREN
    (78) array -> . L_S_BRACKET values_list R_S_BRACKET
    (79) array -> . L_BRACKET R_BRACKET

    R_S_BRACKET     reduce using rule 82 (values_list -> .)
    INT_LITERAL     shift and go to state 34
    DOUBLE_LITERAL  shift and go to state 35
    STRING_LITERAL  shift and go to state 36
    BOOLEAN_LITERAL shift and go to state 37
    CHAR_LITERAL    shift and go to state 38
    FLOAT_LITERAL   shift and go to state 39
    ID              shift and go to state 19
    L_S_BRACKET     shift and go to state 40
    L_BRACKET       shift and go to state 41

    value                          shift and go to state 81
    values_list                    shift and go to state 117
    literal_int                    shift and go to state 25
    literal_double                 shift and go to state 26
    literal_string                 shift and go to state 27
    literal_boolean                shift and go to state 28
    literal_char                   shift and go to state 29
    literal_float                  shift and go to state 30
    identifier                     shift and go to state 31
    function_call                  shift and go to state 32
    array                          shift and go to state 33

state 109

    (8) create_variable -> IMMUTABLE_VARIABLE ID COLON type t .

    SEMICOLON       reduce using rule 8 (create_variable -> IMMUTABLE_VARIABLE ID COLON type t .)
    COMMA           reduce using rule 8 (create_variable -> IMMUTABLE_VARIABLE ID COLON type t .)
    R_PAREN         reduce using rule 8 (create_variable -> IMMUTABLE_VARIABLE ID COLON type t .)


state 110

    (12) function -> FUNCTION ID L_PAREN parameter_list R_PAREN . COLON type L_BRACKET block R_BRACKET

    COLON           shift and go to state 118


state 111

    (13) parameter_list -> create_variable COMMA . parameter_list
    (13) parameter_list -> . create_variable COMMA parameter_list
    (14) parameter_list -> . create_variable
    (7) create_variable -> . MUTABLE_VARIABLE ID COLON type t
    (8) create_variable -> . IMMUTABLE_VARIABLE ID COLON type t

    MUTABLE_VARIABLE shift and go to state 7
    IMMUTABLE_VARIABLE shift and go to state 9

    create_variable                shift and go to state 85
    parameter_list                 shift and go to state 119

state 112

    (9) t -> COLON_EQUALS expression .
    (27) expression -> expression . MULTIPLY expression
    (28) expression -> expression . DIVIDE expression
    (29) expression -> expression . MOD expression
    (30) expression -> expression . POWER expression
    (31) expression -> expression . PLUS expression
    (32) expression -> expression . MINUS expression
    (33) expression -> expression . LESS expression
    (34) expression -> expression . GREATER expression
    (35) expression -> expression . GREATER_EQUAL expression
    (36) expression -> expression . LESS_EQUAL expression
    (37) expression -> expression . EQUALS expression
    (38) expression -> expression . DIFFERENT expression
    (39) expression -> expression . AND expression
    (40) expression -> expression . OR expression

    SEMICOLON       reduce using rule 9 (t -> COLON_EQUALS expression .)
    COMMA           reduce using rule 9 (t -> COLON_EQUALS expression .)
    R_PAREN         reduce using rule 9 (t -> COLON_EQUALS expression .)
    MULTIPLY        shift and go to state 63
    DIVIDE          shift and go to state 64
    MOD             shift and go to state 65
    POWER           shift and go to state 66
    PLUS            shift and go to state 67
    MINUS           shift and go to state 68
    LESS            shift and go to state 69
    GREATER         shift and go to state 70
    GREATER_EQUAL   shift and go to state 71
    LESS_EQUAL      shift and go to state 72
    EQUALS          shift and go to state 73
    DIFFERENT       shift and go to state 74
    AND             shift and go to state 75
    OR              shift and go to state 76


state 113

    (60) type_array -> L_S_BRACKET type R_S_BRACKET .

    COLON_EQUALS    reduce using rule 60 (type_array -> L_S_BRACKET type R_S_BRACKET .)
    SEMICOLON       reduce using rule 60 (type_array -> L_S_BRACKET type R_S_BRACKET .)
    COMMA           reduce using rule 60 (type_array -> L_S_BRACKET type R_S_BRACKET .)
    R_PAREN         reduce using rule 60 (type_array -> L_S_BRACKET type R_S_BRACKET .)
    R_S_BRACKET     reduce using rule 60 (type_array -> L_S_BRACKET type R_S_BRACKET .)
    L_BRACKET       reduce using rule 60 (type_array -> L_S_BRACKET type R_S_BRACKET .)


state 114

    (77) identifier -> ID L_S_BRACKET expression R_S_BRACKET .

    MULTIPLY        reduce using rule 77 (identifier -> ID L_S_BRACKET expression R_S_BRACKET .)
    DIVIDE          reduce using rule 77 (identifier -> ID L_S_BRACKET expression R_S_BRACKET .)
    MOD             reduce using rule 77 (identifier -> ID L_S_BRACKET expression R_S_BRACKET .)
    POWER           reduce using rule 77 (identifier -> ID L_S_BRACKET expression R_S_BRACKET .)
    PLUS            reduce using rule 77 (identifier -> ID L_S_BRACKET expression R_S_BRACKET .)
    MINUS           reduce using rule 77 (identifier -> ID L_S_BRACKET expression R_S_BRACKET .)
    LESS            reduce using rule 77 (identifier -> ID L_S_BRACKET expression R_S_BRACKET .)
    GREATER         reduce using rule 77 (identifier -> ID L_S_BRACKET expression R_S_BRACKET .)
    GREATER_EQUAL   reduce using rule 77 (identifier -> ID L_S_BRACKET expression R_S_BRACKET .)
    LESS_EQUAL      reduce using rule 77 (identifier -> ID L_S_BRACKET expression R_S_BRACKET .)
    EQUALS          reduce using rule 77 (identifier -> ID L_S_BRACKET expression R_S_BRACKET .)
    DIFFERENT       reduce using rule 77 (identifier -> ID L_S_BRACKET expression R_S_BRACKET .)
    AND             reduce using rule 77 (identifier -> ID L_S_BRACKET expression R_S_BRACKET .)
    OR              reduce using rule 77 (identifier -> ID L_S_BRACKET expression R_S_BRACKET .)
    SEMICOLON       reduce using rule 77 (identifier -> ID L_S_BRACKET expression R_S_BRACKET .)
    R_PAREN         reduce using rule 77 (identifier -> ID L_S_BRACKET expression R_S_BRACKET .)
    R_S_BRACKET     reduce using rule 77 (identifier -> ID L_S_BRACKET expression R_S_BRACKET .)
    COMMA           reduce using rule 77 (identifier -> ID L_S_BRACKET expression R_S_BRACKET .)
    L_BRACKET       reduce using rule 77 (identifier -> ID L_S_BRACKET expression R_S_BRACKET .)


state 115

    (83) function_call -> ID L_PAREN arguments_list R_PAREN .

    MULTIPLY        reduce using rule 83 (function_call -> ID L_PAREN arguments_list R_PAREN .)
    DIVIDE          reduce using rule 83 (function_call -> ID L_PAREN arguments_list R_PAREN .)
    MOD             reduce using rule 83 (function_call -> ID L_PAREN arguments_list R_PAREN .)
    POWER           reduce using rule 83 (function_call -> ID L_PAREN arguments_list R_PAREN .)
    PLUS            reduce using rule 83 (function_call -> ID L_PAREN arguments_list R_PAREN .)
    MINUS           reduce using rule 83 (function_call -> ID L_PAREN arguments_list R_PAREN .)
    LESS            reduce using rule 83 (function_call -> ID L_PAREN arguments_list R_PAREN .)
    GREATER         reduce using rule 83 (function_call -> ID L_PAREN arguments_list R_PAREN .)
    GREATER_EQUAL   reduce using rule 83 (function_call -> ID L_PAREN arguments_list R_PAREN .)
    LESS_EQUAL      reduce using rule 83 (function_call -> ID L_PAREN arguments_list R_PAREN .)
    EQUALS          reduce using rule 83 (function_call -> ID L_PAREN arguments_list R_PAREN .)
    DIFFERENT       reduce using rule 83 (function_call -> ID L_PAREN arguments_list R_PAREN .)
    AND             reduce using rule 83 (function_call -> ID L_PAREN arguments_list R_PAREN .)
    OR              reduce using rule 83 (function_call -> ID L_PAREN arguments_list R_PAREN .)
    SEMICOLON       reduce using rule 83 (function_call -> ID L_PAREN arguments_list R_PAREN .)
    R_PAREN         reduce using rule 83 (function_call -> ID L_PAREN arguments_list R_PAREN .)
    R_S_BRACKET     reduce using rule 83 (function_call -> ID L_PAREN arguments_list R_PAREN .)
    COMMA           reduce using rule 83 (function_call -> ID L_PAREN arguments_list R_PAREN .)
    L_BRACKET       reduce using rule 83 (function_call -> ID L_PAREN arguments_list R_PAREN .)


state 116

    (84) arguments_list -> expression COMMA . arguments_list
    (84) arguments_list -> . expression COMMA arguments_list
    (85) arguments_list -> . expression
    (86) arguments_list -> .
    (27) expression -> . expression MULTIPLY expression
    (28) expression -> . expression DIVIDE expression
    (29) expression -> . expression MOD expression
    (30) expression -> . expression POWER expression
    (31) expression -> . expression PLUS expression
    (32) expression -> . expression MINUS expression
    (33) expression -> . expression LESS expression
    (34) expression -> . expression GREATER expression
    (35) expression -> . expression GREATER_EQUAL expression
    (36) expression -> . expression LESS_EQUAL expression
    (37) expression -> . expression EQUALS expression
    (38) expression -> . expression DIFFERENT expression
    (39) expression -> . expression AND expression
    (40) expression -> . expression OR expression
    (41) expression -> . L_PAREN expression R_PAREN
    (42) expression -> . value
    (43) expression -> . MINUS expression
    (44) expression -> . NOT expression
    (61) value -> . literal_int
    (62) value -> . literal_double
    (63) value -> . literal_string
    (64) value -> . literal_boolean
    (65) value -> . literal_char
    (66) value -> . literal_float
    (67) value -> . identifier
    (68) value -> . function_call
    (69) value -> . array
    (70) literal_int -> . INT_LITERAL
    (71) literal_double -> . DOUBLE_LITERAL
    (72) literal_string -> . STRING_LITERAL
    (73) literal_boolean -> . BOOLEAN_LITERAL
    (74) literal_char -> . CHAR_LITERAL
    (75) literal_float -> . FLOAT_LITERAL
    (76) identifier -> . ID
    (77) identifier -> . ID L_S_BRACKET expression R_S_BRACKET
    (83) function_call -> . ID L_PAREN arguments_list R_PAREN
    (78) array -> . L_S_BRACKET values_list R_S_BRACKET
    (79) array -> . L_BRACKET R_BRACKET

    R_PAREN         reduce using rule 86 (arguments_list -> .)
    L_PAREN         shift and go to state 22
    MINUS           shift and go to state 21
    NOT             shift and go to state 24
    INT_LITERAL     shift and go to state 34
    DOUBLE_LITERAL  shift and go to state 35
    STRING_LITERAL  shift and go to state 36
    BOOLEAN_LITERAL shift and go to state 37
    CHAR_LITERAL    shift and go to state 38
    FLOAT_LITERAL   shift and go to state 39
    ID              shift and go to state 19
    L_S_BRACKET     shift and go to state 40
    L_BRACKET       shift and go to state 41

    expression                     shift and go to state 91
    arguments_list                 shift and go to state 120
    value                          shift and go to state 23
    literal_int                    shift and go to state 25
    literal_double                 shift and go to state 26
    literal_string                 shift and go to state 27
    literal_boolean                shift and go to state 28
    literal_char                   shift and go to state 29
    literal_float                  shift and go to state 30
    identifier                     shift and go to state 31
    function_call                  shift and go to state 32
    array                          shift and go to state 33

state 117

    (80) values_list -> value COMMA values_list .

    R_S_BRACKET     reduce using rule 80 (values_list -> value COMMA values_list .)


state 118

    (12) function -> FUNCTION ID L_PAREN parameter_list R_PAREN COLON . type L_BRACKET block R_BRACKET
    (45) type -> . type_int
    (46) type -> . type_double
    (47) type -> . type_string
    (48) type -> . type_boolean
    (49) type -> . type_char
    (50) type -> . type_float
    (51) type -> . type_void
    (52) type -> . type_array
    (53) type_int -> . INT
    (54) type_double -> . DOUBLE
    (55) type_string -> . STRING
    (56) type_boolean -> . BOOLEAN
    (57) type_char -> . CHAR
    (58) type_float -> . FLOAT
    (59) type_void -> . VOID
    (60) type_array -> . L_S_BRACKET type R_S_BRACKET

    INT             shift and go to state 53
    DOUBLE          shift and go to state 54
    STRING          shift and go to state 55
    BOOLEAN         shift and go to state 56
    CHAR            shift and go to state 57
    FLOAT           shift and go to state 58
    VOID            shift and go to state 59
    L_S_BRACKET     shift and go to state 60

    type                           shift and go to state 121
    type_int                       shift and go to state 45
    type_double                    shift and go to state 46
    type_string                    shift and go to state 47
    type_boolean                   shift and go to state 48
    type_char                      shift and go to state 49
    type_float                     shift and go to state 50
    type_void                      shift and go to state 51
    type_array                     shift and go to state 52

state 119

    (13) parameter_list -> create_variable COMMA parameter_list .

    R_PAREN         reduce using rule 13 (parameter_list -> create_variable COMMA parameter_list .)


state 120

    (84) arguments_list -> expression COMMA arguments_list .

    R_PAREN         reduce using rule 84 (arguments_list -> expression COMMA arguments_list .)


state 121

    (12) function -> FUNCTION ID L_PAREN parameter_list R_PAREN COLON type . L_BRACKET block R_BRACKET

    L_BRACKET       shift and go to state 122


state 122

    (12) function -> FUNCTION ID L_PAREN parameter_list R_PAREN COLON type L_BRACKET . block R_BRACKET
    (15) block -> . statement block
    (16) block -> . statement
    (17) statement -> . if_statement
    (18) statement -> . while_statement
    (19) statement -> . assign SEMICOLON
    (20) statement -> . create_variable SEMICOLON
    (21) statement -> . function_call SEMICOLON
    (22) if_statement -> . IF expression L_BRACKET block R_BRACKET else_if_statements
    (26) while_statement -> . WHILE expression L_BRACKET block R_BRACKET
    (11) assign -> . ID COLON_EQUALS expression
    (7) create_variable -> . MUTABLE_VARIABLE ID COLON type t
    (8) create_variable -> . IMMUTABLE_VARIABLE ID COLON type t
    (83) function_call -> . ID L_PAREN arguments_list R_PAREN

    IF              shift and go to state 131
    WHILE           shift and go to state 132
    ID              shift and go to state 123
    MUTABLE_VARIABLE shift and go to state 7
    IMMUTABLE_VARIABLE shift and go to state 9

    block                          shift and go to state 124
    statement                      shift and go to state 125
    if_statement                   shift and go to state 126
    while_statement                shift and go to state 127
    assign                         shift and go to state 128
    create_variable                shift and go to state 129
    function_call                  shift and go to state 130

state 123

    (11) assign -> ID . COLON_EQUALS expression
    (83) function_call -> ID . L_PAREN arguments_list R_PAREN

    COLON_EQUALS    shift and go to state 15
    L_PAREN         shift and go to state 62


state 124

    (12) function -> FUNCTION ID L_PAREN parameter_list R_PAREN COLON type L_BRACKET block . R_BRACKET

    R_BRACKET       shift and go to state 133


state 125

    (15) block -> statement . block
    (16) block -> statement .
    (15) block -> . statement block
    (16) block -> . statement
    (17) statement -> . if_statement
    (18) statement -> . while_statement
    (19) statement -> . assign SEMICOLON
    (20) statement -> . create_variable SEMICOLON
    (21) statement -> . function_call SEMICOLON
    (22) if_statement -> . IF expression L_BRACKET block R_BRACKET else_if_statements
    (26) while_statement -> . WHILE expression L_BRACKET block R_BRACKET
    (11) assign -> . ID COLON_EQUALS expression
    (7) create_variable -> . MUTABLE_VARIABLE ID COLON type t
    (8) create_variable -> . IMMUTABLE_VARIABLE ID COLON type t
    (83) function_call -> . ID L_PAREN arguments_list R_PAREN

    R_BRACKET       reduce using rule 16 (block -> statement .)
    IF              shift and go to state 131
    WHILE           shift and go to state 132
    ID              shift and go to state 123
    MUTABLE_VARIABLE shift and go to state 7
    IMMUTABLE_VARIABLE shift and go to state 9

    statement                      shift and go to state 125
    block                          shift and go to state 134
    if_statement                   shift and go to state 126
    while_statement                shift and go to state 127
    assign                         shift and go to state 128
    create_variable                shift and go to state 129
    function_call                  shift and go to state 130

state 126

    (17) statement -> if_statement .

    IF              reduce using rule 17 (statement -> if_statement .)
    WHILE           reduce using rule 17 (statement -> if_statement .)
    ID              reduce using rule 17 (statement -> if_statement .)
    MUTABLE_VARIABLE reduce using rule 17 (statement -> if_statement .)
    IMMUTABLE_VARIABLE reduce using rule 17 (statement -> if_statement .)
    R_BRACKET       reduce using rule 17 (statement -> if_statement .)


state 127

    (18) statement -> while_statement .

    IF              reduce using rule 18 (statement -> while_statement .)
    WHILE           reduce using rule 18 (statement -> while_statement .)
    ID              reduce using rule 18 (statement -> while_statement .)
    MUTABLE_VARIABLE reduce using rule 18 (statement -> while_statement .)
    IMMUTABLE_VARIABLE reduce using rule 18 (statement -> while_statement .)
    R_BRACKET       reduce using rule 18 (statement -> while_statement .)


state 128

    (19) statement -> assign . SEMICOLON

    SEMICOLON       shift and go to state 135


state 129

    (20) statement -> create_variable . SEMICOLON

    SEMICOLON       shift and go to state 136


state 130

    (21) statement -> function_call . SEMICOLON

    SEMICOLON       shift and go to state 137


state 131

    (22) if_statement -> IF . expression L_BRACKET block R_BRACKET else_if_statements
    (27) expression -> . expression MULTIPLY expression
    (28) expression -> . expression DIVIDE expression
    (29) expression -> . expression MOD expression
    (30) expression -> . expression POWER expression
    (31) expression -> . expression PLUS expression
    (32) expression -> . expression MINUS expression
    (33) expression -> . expression LESS expression
    (34) expression -> . expression GREATER expression
    (35) expression -> . expression GREATER_EQUAL expression
    (36) expression -> . expression LESS_EQUAL expression
    (37) expression -> . expression EQUALS expression
    (38) expression -> . expression DIFFERENT expression
    (39) expression -> . expression AND expression
    (40) expression -> . expression OR expression
    (41) expression -> . L_PAREN expression R_PAREN
    (42) expression -> . value
    (43) expression -> . MINUS expression
    (44) expression -> . NOT expression
    (61) value -> . literal_int
    (62) value -> . literal_double
    (63) value -> . literal_string
    (64) value -> . literal_boolean
    (65) value -> . literal_char
    (66) value -> . literal_float
    (67) value -> . identifier
    (68) value -> . function_call
    (69) value -> . array
    (70) literal_int -> . INT_LITERAL
    (71) literal_double -> . DOUBLE_LITERAL
    (72) literal_string -> . STRING_LITERAL
    (73) literal_boolean -> . BOOLEAN_LITERAL
    (74) literal_char -> . CHAR_LITERAL
    (75) literal_float -> . FLOAT_LITERAL
    (76) identifier -> . ID
    (77) identifier -> . ID L_S_BRACKET expression R_S_BRACKET
    (83) function_call -> . ID L_PAREN arguments_list R_PAREN
    (78) array -> . L_S_BRACKET values_list R_S_BRACKET
    (79) array -> . L_BRACKET R_BRACKET

    L_PAREN         shift and go to state 22
    MINUS           shift and go to state 21
    NOT             shift and go to state 24
    INT_LITERAL     shift and go to state 34
    DOUBLE_LITERAL  shift and go to state 35
    STRING_LITERAL  shift and go to state 36
    BOOLEAN_LITERAL shift and go to state 37
    CHAR_LITERAL    shift and go to state 38
    FLOAT_LITERAL   shift and go to state 39
    ID              shift and go to state 19
    L_S_BRACKET     shift and go to state 40
    L_BRACKET       shift and go to state 41

    expression                     shift and go to state 138
    value                          shift and go to state 23
    literal_int                    shift and go to state 25
    literal_double                 shift and go to state 26
    literal_string                 shift and go to state 27
    literal_boolean                shift and go to state 28
    literal_char                   shift and go to state 29
    literal_float                  shift and go to state 30
    identifier                     shift and go to state 31
    function_call                  shift and go to state 32
    array                          shift and go to state 33

state 132

    (26) while_statement -> WHILE . expression L_BRACKET block R_BRACKET
    (27) expression -> . expression MULTIPLY expression
    (28) expression -> . expression DIVIDE expression
    (29) expression -> . expression MOD expression
    (30) expression -> . expression POWER expression
    (31) expression -> . expression PLUS expression
    (32) expression -> . expression MINUS expression
    (33) expression -> . expression LESS expression
    (34) expression -> . expression GREATER expression
    (35) expression -> . expression GREATER_EQUAL expression
    (36) expression -> . expression LESS_EQUAL expression
    (37) expression -> . expression EQUALS expression
    (38) expression -> . expression DIFFERENT expression
    (39) expression -> . expression AND expression
    (40) expression -> . expression OR expression
    (41) expression -> . L_PAREN expression R_PAREN
    (42) expression -> . value
    (43) expression -> . MINUS expression
    (44) expression -> . NOT expression
    (61) value -> . literal_int
    (62) value -> . literal_double
    (63) value -> . literal_string
    (64) value -> . literal_boolean
    (65) value -> . literal_char
    (66) value -> . literal_float
    (67) value -> . identifier
    (68) value -> . function_call
    (69) value -> . array
    (70) literal_int -> . INT_LITERAL
    (71) literal_double -> . DOUBLE_LITERAL
    (72) literal_string -> . STRING_LITERAL
    (73) literal_boolean -> . BOOLEAN_LITERAL
    (74) literal_char -> . CHAR_LITERAL
    (75) literal_float -> . FLOAT_LITERAL
    (76) identifier -> . ID
    (77) identifier -> . ID L_S_BRACKET expression R_S_BRACKET
    (83) function_call -> . ID L_PAREN arguments_list R_PAREN
    (78) array -> . L_S_BRACKET values_list R_S_BRACKET
    (79) array -> . L_BRACKET R_BRACKET

    L_PAREN         shift and go to state 22
    MINUS           shift and go to state 21
    NOT             shift and go to state 24
    INT_LITERAL     shift and go to state 34
    DOUBLE_LITERAL  shift and go to state 35
    STRING_LITERAL  shift and go to state 36
    BOOLEAN_LITERAL shift and go to state 37
    CHAR_LITERAL    shift and go to state 38
    FLOAT_LITERAL   shift and go to state 39
    ID              shift and go to state 19
    L_S_BRACKET     shift and go to state 40
    L_BRACKET       shift and go to state 41

    expression                     shift and go to state 139
    value                          shift and go to state 23
    literal_int                    shift and go to state 25
    literal_double                 shift and go to state 26
    literal_string                 shift and go to state 27
    literal_boolean                shift and go to state 28
    literal_char                   shift and go to state 29
    literal_float                  shift and go to state 30
    identifier                     shift and go to state 31
    function_call                  shift and go to state 32
    array                          shift and go to state 33

state 133

    (12) function -> FUNCTION ID L_PAREN parameter_list R_PAREN COLON type L_BRACKET block R_BRACKET .

    MUTABLE_VARIABLE reduce using rule 12 (function -> FUNCTION ID L_PAREN parameter_list R_PAREN COLON type L_BRACKET block R_BRACKET .)
    IMMUTABLE_VARIABLE reduce using rule 12 (function -> FUNCTION ID L_PAREN parameter_list R_PAREN COLON type L_BRACKET block R_BRACKET .)
    ID              reduce using rule 12 (function -> FUNCTION ID L_PAREN parameter_list R_PAREN COLON type L_BRACKET block R_BRACKET .)
    FUNCTION        reduce using rule 12 (function -> FUNCTION ID L_PAREN parameter_list R_PAREN COLON type L_BRACKET block R_BRACKET .)
    $end            reduce using rule 12 (function -> FUNCTION ID L_PAREN parameter_list R_PAREN COLON type L_BRACKET block R_BRACKET .)


state 134

    (15) block -> statement block .

    R_BRACKET       reduce using rule 15 (block -> statement block .)


state 135

    (19) statement -> assign SEMICOLON .

    IF              reduce using rule 19 (statement -> assign SEMICOLON .)
    WHILE           reduce using rule 19 (statement -> assign SEMICOLON .)
    ID              reduce using rule 19 (statement -> assign SEMICOLON .)
    MUTABLE_VARIABLE reduce using rule 19 (statement -> assign SEMICOLON .)
    IMMUTABLE_VARIABLE reduce using rule 19 (statement -> assign SEMICOLON .)
    R_BRACKET       reduce using rule 19 (statement -> assign SEMICOLON .)


state 136

    (20) statement -> create_variable SEMICOLON .

    IF              reduce using rule 20 (statement -> create_variable SEMICOLON .)
    WHILE           reduce using rule 20 (statement -> create_variable SEMICOLON .)
    ID              reduce using rule 20 (statement -> create_variable SEMICOLON .)
    MUTABLE_VARIABLE reduce using rule 20 (statement -> create_variable SEMICOLON .)
    IMMUTABLE_VARIABLE reduce using rule 20 (statement -> create_variable SEMICOLON .)
    R_BRACKET       reduce using rule 20 (statement -> create_variable SEMICOLON .)


state 137

    (21) statement -> function_call SEMICOLON .

    IF              reduce using rule 21 (statement -> function_call SEMICOLON .)
    WHILE           reduce using rule 21 (statement -> function_call SEMICOLON .)
    ID              reduce using rule 21 (statement -> function_call SEMICOLON .)
    MUTABLE_VARIABLE reduce using rule 21 (statement -> function_call SEMICOLON .)
    IMMUTABLE_VARIABLE reduce using rule 21 (statement -> function_call SEMICOLON .)
    R_BRACKET       reduce using rule 21 (statement -> function_call SEMICOLON .)


state 138

    (22) if_statement -> IF expression . L_BRACKET block R_BRACKET else_if_statements
    (27) expression -> expression . MULTIPLY expression
    (28) expression -> expression . DIVIDE expression
    (29) expression -> expression . MOD expression
    (30) expression -> expression . POWER expression
    (31) expression -> expression . PLUS expression
    (32) expression -> expression . MINUS expression
    (33) expression -> expression . LESS expression
    (34) expression -> expression . GREATER expression
    (35) expression -> expression . GREATER_EQUAL expression
    (36) expression -> expression . LESS_EQUAL expression
    (37) expression -> expression . EQUALS expression
    (38) expression -> expression . DIFFERENT expression
    (39) expression -> expression . AND expression
    (40) expression -> expression . OR expression

    L_BRACKET       shift and go to state 140
    MULTIPLY        shift and go to state 63
    DIVIDE          shift and go to state 64
    MOD             shift and go to state 65
    POWER           shift and go to state 66
    PLUS            shift and go to state 67
    MINUS           shift and go to state 68
    LESS            shift and go to state 69
    GREATER         shift and go to state 70
    GREATER_EQUAL   shift and go to state 71
    LESS_EQUAL      shift and go to state 72
    EQUALS          shift and go to state 73
    DIFFERENT       shift and go to state 74
    AND             shift and go to state 75
    OR              shift and go to state 76


state 139

    (26) while_statement -> WHILE expression . L_BRACKET block R_BRACKET
    (27) expression -> expression . MULTIPLY expression
    (28) expression -> expression . DIVIDE expression
    (29) expression -> expression . MOD expression
    (30) expression -> expression . POWER expression
    (31) expression -> expression . PLUS expression
    (32) expression -> expression . MINUS expression
    (33) expression -> expression . LESS expression
    (34) expression -> expression . GREATER expression
    (35) expression -> expression . GREATER_EQUAL expression
    (36) expression -> expression . LESS_EQUAL expression
    (37) expression -> expression . EQUALS expression
    (38) expression -> expression . DIFFERENT expression
    (39) expression -> expression . AND expression
    (40) expression -> expression . OR expression

    L_BRACKET       shift and go to state 141
    MULTIPLY        shift and go to state 63
    DIVIDE          shift and go to state 64
    MOD             shift and go to state 65
    POWER           shift and go to state 66
    PLUS            shift and go to state 67
    MINUS           shift and go to state 68
    LESS            shift and go to state 69
    GREATER         shift and go to state 70
    GREATER_EQUAL   shift and go to state 71
    LESS_EQUAL      shift and go to state 72
    EQUALS          shift and go to state 73
    DIFFERENT       shift and go to state 74
    AND             shift and go to state 75
    OR              shift and go to state 76


state 140

    (22) if_statement -> IF expression L_BRACKET . block R_BRACKET else_if_statements
    (15) block -> . statement block
    (16) block -> . statement
    (17) statement -> . if_statement
    (18) statement -> . while_statement
    (19) statement -> . assign SEMICOLON
    (20) statement -> . create_variable SEMICOLON
    (21) statement -> . function_call SEMICOLON
    (22) if_statement -> . IF expression L_BRACKET block R_BRACKET else_if_statements
    (26) while_statement -> . WHILE expression L_BRACKET block R_BRACKET
    (11) assign -> . ID COLON_EQUALS expression
    (7) create_variable -> . MUTABLE_VARIABLE ID COLON type t
    (8) create_variable -> . IMMUTABLE_VARIABLE ID COLON type t
    (83) function_call -> . ID L_PAREN arguments_list R_PAREN

    IF              shift and go to state 131
    WHILE           shift and go to state 132
    ID              shift and go to state 123
    MUTABLE_VARIABLE shift and go to state 7
    IMMUTABLE_VARIABLE shift and go to state 9

    block                          shift and go to state 142
    statement                      shift and go to state 125
    if_statement                   shift and go to state 126
    while_statement                shift and go to state 127
    assign                         shift and go to state 128
    create_variable                shift and go to state 129
    function_call                  shift and go to state 130

state 141

    (26) while_statement -> WHILE expression L_BRACKET . block R_BRACKET
    (15) block -> . statement block
    (16) block -> . statement
    (17) statement -> . if_statement
    (18) statement -> . while_statement
    (19) statement -> . assign SEMICOLON
    (20) statement -> . create_variable SEMICOLON
    (21) statement -> . function_call SEMICOLON
    (22) if_statement -> . IF expression L_BRACKET block R_BRACKET else_if_statements
    (26) while_statement -> . WHILE expression L_BRACKET block R_BRACKET
    (11) assign -> . ID COLON_EQUALS expression
    (7) create_variable -> . MUTABLE_VARIABLE ID COLON type t
    (8) create_variable -> . IMMUTABLE_VARIABLE ID COLON type t
    (83) function_call -> . ID L_PAREN arguments_list R_PAREN

    IF              shift and go to state 131
    WHILE           shift and go to state 132
    ID              shift and go to state 123
    MUTABLE_VARIABLE shift and go to state 7
    IMMUTABLE_VARIABLE shift and go to state 9

    block                          shift and go to state 143
    statement                      shift and go to state 125
    if_statement                   shift and go to state 126
    while_statement                shift and go to state 127
    assign                         shift and go to state 128
    create_variable                shift and go to state 129
    function_call                  shift and go to state 130

state 142

    (22) if_statement -> IF expression L_BRACKET block . R_BRACKET else_if_statements

    R_BRACKET       shift and go to state 144


state 143

    (26) while_statement -> WHILE expression L_BRACKET block . R_BRACKET

    R_BRACKET       shift and go to state 145


state 144

    (22) if_statement -> IF expression L_BRACKET block R_BRACKET . else_if_statements
    (23) else_if_statements -> . ELSE IF expression L_BRACKET block R_BRACKET else_if_statements
    (24) else_if_statements -> . ELSE IF expression L_BRACKET block R_BRACKET
    (25) else_if_statements -> . ELSE L_BRACKET block R_BRACKET

    ELSE            shift and go to state 147

    else_if_statements             shift and go to state 146

state 145

    (26) while_statement -> WHILE expression L_BRACKET block R_BRACKET .

    IF              reduce using rule 26 (while_statement -> WHILE expression L_BRACKET block R_BRACKET .)
    WHILE           reduce using rule 26 (while_statement -> WHILE expression L_BRACKET block R_BRACKET .)
    ID              reduce using rule 26 (while_statement -> WHILE expression L_BRACKET block R_BRACKET .)
    MUTABLE_VARIABLE reduce using rule 26 (while_statement -> WHILE expression L_BRACKET block R_BRACKET .)
    IMMUTABLE_VARIABLE reduce using rule 26 (while_statement -> WHILE expression L_BRACKET block R_BRACKET .)
    R_BRACKET       reduce using rule 26 (while_statement -> WHILE expression L_BRACKET block R_BRACKET .)


state 146

    (22) if_statement -> IF expression L_BRACKET block R_BRACKET else_if_statements .

    IF              reduce using rule 22 (if_statement -> IF expression L_BRACKET block R_BRACKET else_if_statements .)
    WHILE           reduce using rule 22 (if_statement -> IF expression L_BRACKET block R_BRACKET else_if_statements .)
    ID              reduce using rule 22 (if_statement -> IF expression L_BRACKET block R_BRACKET else_if_statements .)
    MUTABLE_VARIABLE reduce using rule 22 (if_statement -> IF expression L_BRACKET block R_BRACKET else_if_statements .)
    IMMUTABLE_VARIABLE reduce using rule 22 (if_statement -> IF expression L_BRACKET block R_BRACKET else_if_statements .)
    R_BRACKET       reduce using rule 22 (if_statement -> IF expression L_BRACKET block R_BRACKET else_if_statements .)


state 147

    (23) else_if_statements -> ELSE . IF expression L_BRACKET block R_BRACKET else_if_statements
    (24) else_if_statements -> ELSE . IF expression L_BRACKET block R_BRACKET
    (25) else_if_statements -> ELSE . L_BRACKET block R_BRACKET

    IF              shift and go to state 148
    L_BRACKET       shift and go to state 149


state 148

    (23) else_if_statements -> ELSE IF . expression L_BRACKET block R_BRACKET else_if_statements
    (24) else_if_statements -> ELSE IF . expression L_BRACKET block R_BRACKET
    (27) expression -> . expression MULTIPLY expression
    (28) expression -> . expression DIVIDE expression
    (29) expression -> . expression MOD expression
    (30) expression -> . expression POWER expression
    (31) expression -> . expression PLUS expression
    (32) expression -> . expression MINUS expression
    (33) expression -> . expression LESS expression
    (34) expression -> . expression GREATER expression
    (35) expression -> . expression GREATER_EQUAL expression
    (36) expression -> . expression LESS_EQUAL expression
    (37) expression -> . expression EQUALS expression
    (38) expression -> . expression DIFFERENT expression
    (39) expression -> . expression AND expression
    (40) expression -> . expression OR expression
    (41) expression -> . L_PAREN expression R_PAREN
    (42) expression -> . value
    (43) expression -> . MINUS expression
    (44) expression -> . NOT expression
    (61) value -> . literal_int
    (62) value -> . literal_double
    (63) value -> . literal_string
    (64) value -> . literal_boolean
    (65) value -> . literal_char
    (66) value -> . literal_float
    (67) value -> . identifier
    (68) value -> . function_call
    (69) value -> . array
    (70) literal_int -> . INT_LITERAL
    (71) literal_double -> . DOUBLE_LITERAL
    (72) literal_string -> . STRING_LITERAL
    (73) literal_boolean -> . BOOLEAN_LITERAL
    (74) literal_char -> . CHAR_LITERAL
    (75) literal_float -> . FLOAT_LITERAL
    (76) identifier -> . ID
    (77) identifier -> . ID L_S_BRACKET expression R_S_BRACKET
    (83) function_call -> . ID L_PAREN arguments_list R_PAREN
    (78) array -> . L_S_BRACKET values_list R_S_BRACKET
    (79) array -> . L_BRACKET R_BRACKET

    L_PAREN         shift and go to state 22
    MINUS           shift and go to state 21
    NOT             shift and go to state 24
    INT_LITERAL     shift and go to state 34
    DOUBLE_LITERAL  shift and go to state 35
    STRING_LITERAL  shift and go to state 36
    BOOLEAN_LITERAL shift and go to state 37
    CHAR_LITERAL    shift and go to state 38
    FLOAT_LITERAL   shift and go to state 39
    ID              shift and go to state 19
    L_S_BRACKET     shift and go to state 40
    L_BRACKET       shift and go to state 41

    expression                     shift and go to state 150
    value                          shift and go to state 23
    literal_int                    shift and go to state 25
    literal_double                 shift and go to state 26
    literal_string                 shift and go to state 27
    literal_boolean                shift and go to state 28
    literal_char                   shift and go to state 29
    literal_float                  shift and go to state 30
    identifier                     shift and go to state 31
    function_call                  shift and go to state 32
    array                          shift and go to state 33

state 149

    (25) else_if_statements -> ELSE L_BRACKET . block R_BRACKET
    (15) block -> . statement block
    (16) block -> . statement
    (17) statement -> . if_statement
    (18) statement -> . while_statement
    (19) statement -> . assign SEMICOLON
    (20) statement -> . create_variable SEMICOLON
    (21) statement -> . function_call SEMICOLON
    (22) if_statement -> . IF expression L_BRACKET block R_BRACKET else_if_statements
    (26) while_statement -> . WHILE expression L_BRACKET block R_BRACKET
    (11) assign -> . ID COLON_EQUALS expression
    (7) create_variable -> . MUTABLE_VARIABLE ID COLON type t
    (8) create_variable -> . IMMUTABLE_VARIABLE ID COLON type t
    (83) function_call -> . ID L_PAREN arguments_list R_PAREN

    IF              shift and go to state 131
    WHILE           shift and go to state 132
    ID              shift and go to state 123
    MUTABLE_VARIABLE shift and go to state 7
    IMMUTABLE_VARIABLE shift and go to state 9

    block                          shift and go to state 151
    statement                      shift and go to state 125
    if_statement                   shift and go to state 126
    while_statement                shift and go to state 127
    assign                         shift and go to state 128
    create_variable                shift and go to state 129
    function_call                  shift and go to state 130

state 150

    (23) else_if_statements -> ELSE IF expression . L_BRACKET block R_BRACKET else_if_statements
    (24) else_if_statements -> ELSE IF expression . L_BRACKET block R_BRACKET
    (27) expression -> expression . MULTIPLY expression
    (28) expression -> expression . DIVIDE expression
    (29) expression -> expression . MOD expression
    (30) expression -> expression . POWER expression
    (31) expression -> expression . PLUS expression
    (32) expression -> expression . MINUS expression
    (33) expression -> expression . LESS expression
    (34) expression -> expression . GREATER expression
    (35) expression -> expression . GREATER_EQUAL expression
    (36) expression -> expression . LESS_EQUAL expression
    (37) expression -> expression . EQUALS expression
    (38) expression -> expression . DIFFERENT expression
    (39) expression -> expression . AND expression
    (40) expression -> expression . OR expression

    L_BRACKET       shift and go to state 152
    MULTIPLY        shift and go to state 63
    DIVIDE          shift and go to state 64
    MOD             shift and go to state 65
    POWER           shift and go to state 66
    PLUS            shift and go to state 67
    MINUS           shift and go to state 68
    LESS            shift and go to state 69
    GREATER         shift and go to state 70
    GREATER_EQUAL   shift and go to state 71
    LESS_EQUAL      shift and go to state 72
    EQUALS          shift and go to state 73
    DIFFERENT       shift and go to state 74
    AND             shift and go to state 75
    OR              shift and go to state 76


state 151

    (25) else_if_statements -> ELSE L_BRACKET block . R_BRACKET

    R_BRACKET       shift and go to state 153


state 152

    (23) else_if_statements -> ELSE IF expression L_BRACKET . block R_BRACKET else_if_statements
    (24) else_if_statements -> ELSE IF expression L_BRACKET . block R_BRACKET
    (15) block -> . statement block
    (16) block -> . statement
    (17) statement -> . if_statement
    (18) statement -> . while_statement
    (19) statement -> . assign SEMICOLON
    (20) statement -> . create_variable SEMICOLON
    (21) statement -> . function_call SEMICOLON
    (22) if_statement -> . IF expression L_BRACKET block R_BRACKET else_if_statements
    (26) while_statement -> . WHILE expression L_BRACKET block R_BRACKET
    (11) assign -> . ID COLON_EQUALS expression
    (7) create_variable -> . MUTABLE_VARIABLE ID COLON type t
    (8) create_variable -> . IMMUTABLE_VARIABLE ID COLON type t
    (83) function_call -> . ID L_PAREN arguments_list R_PAREN

    IF              shift and go to state 131
    WHILE           shift and go to state 132
    ID              shift and go to state 123
    MUTABLE_VARIABLE shift and go to state 7
    IMMUTABLE_VARIABLE shift and go to state 9

    block                          shift and go to state 154
    statement                      shift and go to state 125
    if_statement                   shift and go to state 126
    while_statement                shift and go to state 127
    assign                         shift and go to state 128
    create_variable                shift and go to state 129
    function_call                  shift and go to state 130

state 153

    (25) else_if_statements -> ELSE L_BRACKET block R_BRACKET .

    IF              reduce using rule 25 (else_if_statements -> ELSE L_BRACKET block R_BRACKET .)
    WHILE           reduce using rule 25 (else_if_statements -> ELSE L_BRACKET block R_BRACKET .)
    ID              reduce using rule 25 (else_if_statements -> ELSE L_BRACKET block R_BRACKET .)
    MUTABLE_VARIABLE reduce using rule 25 (else_if_statements -> ELSE L_BRACKET block R_BRACKET .)
    IMMUTABLE_VARIABLE reduce using rule 25 (else_if_statements -> ELSE L_BRACKET block R_BRACKET .)
    R_BRACKET       reduce using rule 25 (else_if_statements -> ELSE L_BRACKET block R_BRACKET .)


state 154

    (23) else_if_statements -> ELSE IF expression L_BRACKET block . R_BRACKET else_if_statements
    (24) else_if_statements -> ELSE IF expression L_BRACKET block . R_BRACKET

    R_BRACKET       shift and go to state 155


state 155

    (23) else_if_statements -> ELSE IF expression L_BRACKET block R_BRACKET . else_if_statements
    (24) else_if_statements -> ELSE IF expression L_BRACKET block R_BRACKET .
    (23) else_if_statements -> . ELSE IF expression L_BRACKET block R_BRACKET else_if_statements
    (24) else_if_statements -> . ELSE IF expression L_BRACKET block R_BRACKET
    (25) else_if_statements -> . ELSE L_BRACKET block R_BRACKET

    IF              reduce using rule 24 (else_if_statements -> ELSE IF expression L_BRACKET block R_BRACKET .)
    WHILE           reduce using rule 24 (else_if_statements -> ELSE IF expression L_BRACKET block R_BRACKET .)
    ID              reduce using rule 24 (else_if_statements -> ELSE IF expression L_BRACKET block R_BRACKET .)
    MUTABLE_VARIABLE reduce using rule 24 (else_if_statements -> ELSE IF expression L_BRACKET block R_BRACKET .)
    IMMUTABLE_VARIABLE reduce using rule 24 (else_if_statements -> ELSE IF expression L_BRACKET block R_BRACKET .)
    R_BRACKET       reduce using rule 24 (else_if_statements -> ELSE IF expression L_BRACKET block R_BRACKET .)
    ELSE            shift and go to state 147

    else_if_statements             shift and go to state 156

state 156

    (23) else_if_statements -> ELSE IF expression L_BRACKET block R_BRACKET else_if_statements .

    IF              reduce using rule 23 (else_if_statements -> ELSE IF expression L_BRACKET block R_BRACKET else_if_statements .)
    WHILE           reduce using rule 23 (else_if_statements -> ELSE IF expression L_BRACKET block R_BRACKET else_if_statements .)
    ID              reduce using rule 23 (else_if_statements -> ELSE IF expression L_BRACKET block R_BRACKET else_if_statements .)
    MUTABLE_VARIABLE reduce using rule 23 (else_if_statements -> ELSE IF expression L_BRACKET block R_BRACKET else_if_statements .)
    IMMUTABLE_VARIABLE reduce using rule 23 (else_if_statements -> ELSE IF expression L_BRACKET block R_BRACKET else_if_statements .)
    R_BRACKET       reduce using rule 23 (else_if_statements -> ELSE IF expression L_BRACKET block R_BRACKET else_if_statements .)

