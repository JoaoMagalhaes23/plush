Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> start
Rule 1     start -> top_level_declarations
Rule 2     top_level_declarations -> top_level_declaration top_level_declarations
Rule 3     top_level_declarations -> top_level_declaration
Rule 4     top_level_declaration -> create_variable SEMICOLON
Rule 5     top_level_declaration -> function
Rule 6     create_variable -> MUTABLE_VARIABLE ID COLON type COLON_EQUALS expression
Rule 7     create_variable -> IMMUTABLE_VARIABLE ID COLON type COLON_EQUALS expression
Rule 8     assign -> ID COLON_EQUALS expression
Rule 9     assign -> index COLON_EQUALS expression
Rule 10    function -> FUNCTION ID L_PAREN parameter_list R_PAREN COLON type L_BRACKET block R_BRACKET
Rule 11    function -> FUNCTION ID L_PAREN parameter_list R_PAREN COLON type SEMICOLON
Rule 12    parameter_list -> parameter COMMA parameter_list
Rule 13    parameter_list -> parameter
Rule 14    parameter_list -> <empty>
Rule 15    parameter -> MUTABLE_VARIABLE ID COLON type
Rule 16    parameter -> IMMUTABLE_VARIABLE ID COLON type
Rule 17    block -> statement block
Rule 18    block -> statement
Rule 19    statement -> if_statement
Rule 20    statement -> while_statement
Rule 21    statement -> assign SEMICOLON
Rule 22    statement -> create_variable SEMICOLON
Rule 23    statement -> function_call SEMICOLON
Rule 24    statement -> function
Rule 25    if_statement -> IF expression L_BRACKET block R_BRACKET
Rule 26    if_statement -> IF expression L_BRACKET block R_BRACKET else_if_statements
Rule 27    if_statement -> IF expression L_BRACKET block R_BRACKET ELSE L_BRACKET block R_BRACKET
Rule 28    else_if_statements -> ELSE IF expression L_BRACKET block R_BRACKET
Rule 29    else_if_statements -> ELSE IF expression L_BRACKET block R_BRACKET else_if_statements
Rule 30    else_if_statements -> ELSE IF expression L_BRACKET block R_BRACKET ELSE L_BRACKET block R_BRACKET
Rule 31    while_statement -> WHILE expression L_BRACKET block R_BRACKET
Rule 32    expression -> expression MULTIPLY expression
Rule 33    expression -> expression DIVIDE expression
Rule 34    expression -> expression MOD expression
Rule 35    expression -> expression POWER expression
Rule 36    expression -> expression PLUS expression
Rule 37    expression -> expression MINUS expression
Rule 38    expression -> expression LESS expression
Rule 39    expression -> expression GREATER expression
Rule 40    expression -> expression GREATER_EQUAL expression
Rule 41    expression -> expression LESS_EQUAL expression
Rule 42    expression -> expression EQUALS expression
Rule 43    expression -> expression DIFFERENT expression
Rule 44    expression -> expression AND expression
Rule 45    expression -> expression OR expression
Rule 46    expression -> L_PAREN expression R_PAREN
Rule 47    expression -> value
Rule 48    expression -> MINUS expression
Rule 49    expression -> NOT expression
Rule 50    type -> type_int
Rule 51    type -> type_string
Rule 52    type -> type_boolean
Rule 53    type -> type_char
Rule 54    type -> type_float
Rule 55    type -> type_void
Rule 56    type -> type_array
Rule 57    type_int -> INT
Rule 58    type_string -> STRING
Rule 59    type_boolean -> BOOLEAN
Rule 60    type_char -> CHAR
Rule 61    type_float -> FLOAT
Rule 62    type_void -> VOID
Rule 63    type_array -> L_S_BRACKET type R_S_BRACKET
Rule 64    value -> literal_int
Rule 65    value -> literal_string
Rule 66    value -> literal_boolean
Rule 67    value -> literal_char
Rule 68    value -> literal_float
Rule 69    value -> identifier
Rule 70    value -> function_call
Rule 71    value -> index
Rule 72    value -> array
Rule 73    literal_int -> INT_LITERAL
Rule 74    literal_string -> STRING_LITERAL
Rule 75    literal_boolean -> BOOLEAN_LITERAL
Rule 76    literal_char -> CHAR_LITERAL
Rule 77    literal_float -> FLOAT_LITERAL
Rule 78    identifier -> ID
Rule 79    index -> ID temp
Rule 80    temp -> L_S_BRACKET expression R_S_BRACKET temp
Rule 81    temp -> L_S_BRACKET expression R_S_BRACKET
Rule 82    array -> L_BRACKET array_literal R_BRACKET
Rule 83    array -> L_BRACKET R_BRACKET
Rule 84    array_literal -> expression COMMA array_literal
Rule 85    array_literal -> expression
Rule 86    function_call -> ID L_PAREN arguments_list R_PAREN
Rule 87    arguments_list -> expression COMMA arguments_list
Rule 88    arguments_list -> expression
Rule 89    arguments_list -> <empty>

Terminals, with rules where they appear

AND                  : 44
BOOLEAN              : 59
BOOLEAN_LITERAL      : 75
CHAR                 : 60
CHAR_LITERAL         : 76
COLON                : 6 7 10 11 15 16
COLON_EQUALS         : 6 7 8 9
COMMA                : 12 84 87
DIFFERENT            : 43
DIVIDE               : 33
ELSE                 : 27 28 29 30 30
EQUALS               : 42
FLOAT                : 61
FLOAT_LITERAL        : 77
FUNCTION             : 10 11
GREATER              : 39
GREATER_EQUAL        : 40
ID                   : 6 7 8 10 11 15 16 78 79 86
IF                   : 25 26 27 28 29 30
IMMUTABLE_VARIABLE   : 7 16
INT                  : 57
INT_LITERAL          : 73
LESS                 : 38
LESS_EQUAL           : 41
L_BRACKET            : 10 25 26 27 27 28 29 30 30 31 82 83
L_PAREN              : 10 11 46 86
L_S_BRACKET          : 63 80 81
MINUS                : 37 48
MOD                  : 34
MULTIPLY             : 32
MUTABLE_VARIABLE     : 6 15
NOT                  : 49
OR                   : 45
PLUS                 : 36
POWER                : 35
R_BRACKET            : 10 25 26 27 27 28 29 30 30 31 82 83
R_PAREN              : 10 11 46 86
R_S_BRACKET          : 63 80 81
SEMICOLON            : 4 11 21 22 23
STRING               : 58
STRING_LITERAL       : 74
VOID                 : 62
WHILE                : 31
error                : 

Nonterminals, with rules where they appear

arguments_list       : 86 87
array                : 72
array_literal        : 82 84
assign               : 21
block                : 10 17 25 26 27 27 28 29 30 30 31
create_variable      : 4 22
else_if_statements   : 26 29
expression           : 6 7 8 9 25 26 27 28 29 30 31 32 32 33 33 34 34 35 35 36 36 37 37 38 38 39 39 40 40 41 41 42 42 43 43 44 44 45 45 46 48 49 80 81 84 85 87 88
function             : 5 24
function_call        : 23 70
identifier           : 69
if_statement         : 19
index                : 9 71
literal_boolean      : 66
literal_char         : 67
literal_float        : 68
literal_int          : 64
literal_string       : 65
parameter            : 12 13
parameter_list       : 10 11 12
start                : 0
statement            : 17 18
temp                 : 79 80
top_level_declaration : 2 3
top_level_declarations : 1 2
type                 : 6 7 10 11 15 16 63
type_array           : 56
type_boolean         : 52
type_char            : 53
type_float           : 54
type_int             : 50
type_string          : 51
type_void            : 55
value                : 47
while_statement      : 20

Parsing method: LALR

state 0

    (0) S' -> . start
    (1) start -> . top_level_declarations
    (2) top_level_declarations -> . top_level_declaration top_level_declarations
    (3) top_level_declarations -> . top_level_declaration
    (4) top_level_declaration -> . create_variable SEMICOLON
    (5) top_level_declaration -> . function
    (6) create_variable -> . MUTABLE_VARIABLE ID COLON type COLON_EQUALS expression
    (7) create_variable -> . IMMUTABLE_VARIABLE ID COLON type COLON_EQUALS expression
    (10) function -> . FUNCTION ID L_PAREN parameter_list R_PAREN COLON type L_BRACKET block R_BRACKET
    (11) function -> . FUNCTION ID L_PAREN parameter_list R_PAREN COLON type SEMICOLON

    MUTABLE_VARIABLE shift and go to state 6
    IMMUTABLE_VARIABLE shift and go to state 7
    FUNCTION        shift and go to state 8

    start                          shift and go to state 1
    top_level_declarations         shift and go to state 2
    top_level_declaration          shift and go to state 3
    create_variable                shift and go to state 4
    function                       shift and go to state 5

state 1

    (0) S' -> start .



state 2

    (1) start -> top_level_declarations .

    $end            reduce using rule 1 (start -> top_level_declarations .)


state 3

    (2) top_level_declarations -> top_level_declaration . top_level_declarations
    (3) top_level_declarations -> top_level_declaration .
    (2) top_level_declarations -> . top_level_declaration top_level_declarations
    (3) top_level_declarations -> . top_level_declaration
    (4) top_level_declaration -> . create_variable SEMICOLON
    (5) top_level_declaration -> . function
    (6) create_variable -> . MUTABLE_VARIABLE ID COLON type COLON_EQUALS expression
    (7) create_variable -> . IMMUTABLE_VARIABLE ID COLON type COLON_EQUALS expression
    (10) function -> . FUNCTION ID L_PAREN parameter_list R_PAREN COLON type L_BRACKET block R_BRACKET
    (11) function -> . FUNCTION ID L_PAREN parameter_list R_PAREN COLON type SEMICOLON

    $end            reduce using rule 3 (top_level_declarations -> top_level_declaration .)
    MUTABLE_VARIABLE shift and go to state 6
    IMMUTABLE_VARIABLE shift and go to state 7
    FUNCTION        shift and go to state 8

    top_level_declaration          shift and go to state 3
    top_level_declarations         shift and go to state 9
    create_variable                shift and go to state 4
    function                       shift and go to state 5

state 4

    (4) top_level_declaration -> create_variable . SEMICOLON

    SEMICOLON       shift and go to state 10


state 5

    (5) top_level_declaration -> function .

    MUTABLE_VARIABLE reduce using rule 5 (top_level_declaration -> function .)
    IMMUTABLE_VARIABLE reduce using rule 5 (top_level_declaration -> function .)
    FUNCTION        reduce using rule 5 (top_level_declaration -> function .)
    $end            reduce using rule 5 (top_level_declaration -> function .)


state 6

    (6) create_variable -> MUTABLE_VARIABLE . ID COLON type COLON_EQUALS expression

    ID              shift and go to state 11


state 7

    (7) create_variable -> IMMUTABLE_VARIABLE . ID COLON type COLON_EQUALS expression

    ID              shift and go to state 12


state 8

    (10) function -> FUNCTION . ID L_PAREN parameter_list R_PAREN COLON type L_BRACKET block R_BRACKET
    (11) function -> FUNCTION . ID L_PAREN parameter_list R_PAREN COLON type SEMICOLON

    ID              shift and go to state 13


state 9

    (2) top_level_declarations -> top_level_declaration top_level_declarations .

    $end            reduce using rule 2 (top_level_declarations -> top_level_declaration top_level_declarations .)


state 10

    (4) top_level_declaration -> create_variable SEMICOLON .

    MUTABLE_VARIABLE reduce using rule 4 (top_level_declaration -> create_variable SEMICOLON .)
    IMMUTABLE_VARIABLE reduce using rule 4 (top_level_declaration -> create_variable SEMICOLON .)
    FUNCTION        reduce using rule 4 (top_level_declaration -> create_variable SEMICOLON .)
    $end            reduce using rule 4 (top_level_declaration -> create_variable SEMICOLON .)


state 11

    (6) create_variable -> MUTABLE_VARIABLE ID . COLON type COLON_EQUALS expression

    COLON           shift and go to state 14


state 12

    (7) create_variable -> IMMUTABLE_VARIABLE ID . COLON type COLON_EQUALS expression

    COLON           shift and go to state 15


state 13

    (10) function -> FUNCTION ID . L_PAREN parameter_list R_PAREN COLON type L_BRACKET block R_BRACKET
    (11) function -> FUNCTION ID . L_PAREN parameter_list R_PAREN COLON type SEMICOLON

    L_PAREN         shift and go to state 16


state 14

    (6) create_variable -> MUTABLE_VARIABLE ID COLON . type COLON_EQUALS expression
    (50) type -> . type_int
    (51) type -> . type_string
    (52) type -> . type_boolean
    (53) type -> . type_char
    (54) type -> . type_float
    (55) type -> . type_void
    (56) type -> . type_array
    (57) type_int -> . INT
    (58) type_string -> . STRING
    (59) type_boolean -> . BOOLEAN
    (60) type_char -> . CHAR
    (61) type_float -> . FLOAT
    (62) type_void -> . VOID
    (63) type_array -> . L_S_BRACKET type R_S_BRACKET

    INT             shift and go to state 25
    STRING          shift and go to state 26
    BOOLEAN         shift and go to state 27
    CHAR            shift and go to state 28
    FLOAT           shift and go to state 29
    VOID            shift and go to state 30
    L_S_BRACKET     shift and go to state 31

    type                           shift and go to state 17
    type_int                       shift and go to state 18
    type_string                    shift and go to state 19
    type_boolean                   shift and go to state 20
    type_char                      shift and go to state 21
    type_float                     shift and go to state 22
    type_void                      shift and go to state 23
    type_array                     shift and go to state 24

state 15

    (7) create_variable -> IMMUTABLE_VARIABLE ID COLON . type COLON_EQUALS expression
    (50) type -> . type_int
    (51) type -> . type_string
    (52) type -> . type_boolean
    (53) type -> . type_char
    (54) type -> . type_float
    (55) type -> . type_void
    (56) type -> . type_array
    (57) type_int -> . INT
    (58) type_string -> . STRING
    (59) type_boolean -> . BOOLEAN
    (60) type_char -> . CHAR
    (61) type_float -> . FLOAT
    (62) type_void -> . VOID
    (63) type_array -> . L_S_BRACKET type R_S_BRACKET

    INT             shift and go to state 25
    STRING          shift and go to state 26
    BOOLEAN         shift and go to state 27
    CHAR            shift and go to state 28
    FLOAT           shift and go to state 29
    VOID            shift and go to state 30
    L_S_BRACKET     shift and go to state 31

    type                           shift and go to state 32
    type_int                       shift and go to state 18
    type_string                    shift and go to state 19
    type_boolean                   shift and go to state 20
    type_char                      shift and go to state 21
    type_float                     shift and go to state 22
    type_void                      shift and go to state 23
    type_array                     shift and go to state 24

state 16

    (10) function -> FUNCTION ID L_PAREN . parameter_list R_PAREN COLON type L_BRACKET block R_BRACKET
    (11) function -> FUNCTION ID L_PAREN . parameter_list R_PAREN COLON type SEMICOLON
    (12) parameter_list -> . parameter COMMA parameter_list
    (13) parameter_list -> . parameter
    (14) parameter_list -> .
    (15) parameter -> . MUTABLE_VARIABLE ID COLON type
    (16) parameter -> . IMMUTABLE_VARIABLE ID COLON type

    R_PAREN         reduce using rule 14 (parameter_list -> .)
    MUTABLE_VARIABLE shift and go to state 35
    IMMUTABLE_VARIABLE shift and go to state 36

    parameter_list                 shift and go to state 33
    parameter                      shift and go to state 34

state 17

    (6) create_variable -> MUTABLE_VARIABLE ID COLON type . COLON_EQUALS expression

    COLON_EQUALS    shift and go to state 37


state 18

    (50) type -> type_int .

    COLON_EQUALS    reduce using rule 50 (type -> type_int .)
    R_S_BRACKET     reduce using rule 50 (type -> type_int .)
    L_BRACKET       reduce using rule 50 (type -> type_int .)
    SEMICOLON       reduce using rule 50 (type -> type_int .)
    COMMA           reduce using rule 50 (type -> type_int .)
    R_PAREN         reduce using rule 50 (type -> type_int .)


state 19

    (51) type -> type_string .

    COLON_EQUALS    reduce using rule 51 (type -> type_string .)
    R_S_BRACKET     reduce using rule 51 (type -> type_string .)
    L_BRACKET       reduce using rule 51 (type -> type_string .)
    SEMICOLON       reduce using rule 51 (type -> type_string .)
    COMMA           reduce using rule 51 (type -> type_string .)
    R_PAREN         reduce using rule 51 (type -> type_string .)


state 20

    (52) type -> type_boolean .

    COLON_EQUALS    reduce using rule 52 (type -> type_boolean .)
    R_S_BRACKET     reduce using rule 52 (type -> type_boolean .)
    L_BRACKET       reduce using rule 52 (type -> type_boolean .)
    SEMICOLON       reduce using rule 52 (type -> type_boolean .)
    COMMA           reduce using rule 52 (type -> type_boolean .)
    R_PAREN         reduce using rule 52 (type -> type_boolean .)


state 21

    (53) type -> type_char .

    COLON_EQUALS    reduce using rule 53 (type -> type_char .)
    R_S_BRACKET     reduce using rule 53 (type -> type_char .)
    L_BRACKET       reduce using rule 53 (type -> type_char .)
    SEMICOLON       reduce using rule 53 (type -> type_char .)
    COMMA           reduce using rule 53 (type -> type_char .)
    R_PAREN         reduce using rule 53 (type -> type_char .)


state 22

    (54) type -> type_float .

    COLON_EQUALS    reduce using rule 54 (type -> type_float .)
    R_S_BRACKET     reduce using rule 54 (type -> type_float .)
    L_BRACKET       reduce using rule 54 (type -> type_float .)
    SEMICOLON       reduce using rule 54 (type -> type_float .)
    COMMA           reduce using rule 54 (type -> type_float .)
    R_PAREN         reduce using rule 54 (type -> type_float .)


state 23

    (55) type -> type_void .

    COLON_EQUALS    reduce using rule 55 (type -> type_void .)
    R_S_BRACKET     reduce using rule 55 (type -> type_void .)
    L_BRACKET       reduce using rule 55 (type -> type_void .)
    SEMICOLON       reduce using rule 55 (type -> type_void .)
    COMMA           reduce using rule 55 (type -> type_void .)
    R_PAREN         reduce using rule 55 (type -> type_void .)


state 24

    (56) type -> type_array .

    COLON_EQUALS    reduce using rule 56 (type -> type_array .)
    R_S_BRACKET     reduce using rule 56 (type -> type_array .)
    L_BRACKET       reduce using rule 56 (type -> type_array .)
    SEMICOLON       reduce using rule 56 (type -> type_array .)
    COMMA           reduce using rule 56 (type -> type_array .)
    R_PAREN         reduce using rule 56 (type -> type_array .)


state 25

    (57) type_int -> INT .

    COLON_EQUALS    reduce using rule 57 (type_int -> INT .)
    R_S_BRACKET     reduce using rule 57 (type_int -> INT .)
    L_BRACKET       reduce using rule 57 (type_int -> INT .)
    SEMICOLON       reduce using rule 57 (type_int -> INT .)
    COMMA           reduce using rule 57 (type_int -> INT .)
    R_PAREN         reduce using rule 57 (type_int -> INT .)


state 26

    (58) type_string -> STRING .

    COLON_EQUALS    reduce using rule 58 (type_string -> STRING .)
    R_S_BRACKET     reduce using rule 58 (type_string -> STRING .)
    L_BRACKET       reduce using rule 58 (type_string -> STRING .)
    SEMICOLON       reduce using rule 58 (type_string -> STRING .)
    COMMA           reduce using rule 58 (type_string -> STRING .)
    R_PAREN         reduce using rule 58 (type_string -> STRING .)


state 27

    (59) type_boolean -> BOOLEAN .

    COLON_EQUALS    reduce using rule 59 (type_boolean -> BOOLEAN .)
    R_S_BRACKET     reduce using rule 59 (type_boolean -> BOOLEAN .)
    L_BRACKET       reduce using rule 59 (type_boolean -> BOOLEAN .)
    SEMICOLON       reduce using rule 59 (type_boolean -> BOOLEAN .)
    COMMA           reduce using rule 59 (type_boolean -> BOOLEAN .)
    R_PAREN         reduce using rule 59 (type_boolean -> BOOLEAN .)


state 28

    (60) type_char -> CHAR .

    COLON_EQUALS    reduce using rule 60 (type_char -> CHAR .)
    R_S_BRACKET     reduce using rule 60 (type_char -> CHAR .)
    L_BRACKET       reduce using rule 60 (type_char -> CHAR .)
    SEMICOLON       reduce using rule 60 (type_char -> CHAR .)
    COMMA           reduce using rule 60 (type_char -> CHAR .)
    R_PAREN         reduce using rule 60 (type_char -> CHAR .)


state 29

    (61) type_float -> FLOAT .

    COLON_EQUALS    reduce using rule 61 (type_float -> FLOAT .)
    R_S_BRACKET     reduce using rule 61 (type_float -> FLOAT .)
    L_BRACKET       reduce using rule 61 (type_float -> FLOAT .)
    SEMICOLON       reduce using rule 61 (type_float -> FLOAT .)
    COMMA           reduce using rule 61 (type_float -> FLOAT .)
    R_PAREN         reduce using rule 61 (type_float -> FLOAT .)


state 30

    (62) type_void -> VOID .

    COLON_EQUALS    reduce using rule 62 (type_void -> VOID .)
    R_S_BRACKET     reduce using rule 62 (type_void -> VOID .)
    L_BRACKET       reduce using rule 62 (type_void -> VOID .)
    SEMICOLON       reduce using rule 62 (type_void -> VOID .)
    COMMA           reduce using rule 62 (type_void -> VOID .)
    R_PAREN         reduce using rule 62 (type_void -> VOID .)


state 31

    (63) type_array -> L_S_BRACKET . type R_S_BRACKET
    (50) type -> . type_int
    (51) type -> . type_string
    (52) type -> . type_boolean
    (53) type -> . type_char
    (54) type -> . type_float
    (55) type -> . type_void
    (56) type -> . type_array
    (57) type_int -> . INT
    (58) type_string -> . STRING
    (59) type_boolean -> . BOOLEAN
    (60) type_char -> . CHAR
    (61) type_float -> . FLOAT
    (62) type_void -> . VOID
    (63) type_array -> . L_S_BRACKET type R_S_BRACKET

    INT             shift and go to state 25
    STRING          shift and go to state 26
    BOOLEAN         shift and go to state 27
    CHAR            shift and go to state 28
    FLOAT           shift and go to state 29
    VOID            shift and go to state 30
    L_S_BRACKET     shift and go to state 31

    type                           shift and go to state 38
    type_int                       shift and go to state 18
    type_string                    shift and go to state 19
    type_boolean                   shift and go to state 20
    type_char                      shift and go to state 21
    type_float                     shift and go to state 22
    type_void                      shift and go to state 23
    type_array                     shift and go to state 24

state 32

    (7) create_variable -> IMMUTABLE_VARIABLE ID COLON type . COLON_EQUALS expression

    COLON_EQUALS    shift and go to state 39


state 33

    (10) function -> FUNCTION ID L_PAREN parameter_list . R_PAREN COLON type L_BRACKET block R_BRACKET
    (11) function -> FUNCTION ID L_PAREN parameter_list . R_PAREN COLON type SEMICOLON

    R_PAREN         shift and go to state 40


state 34

    (12) parameter_list -> parameter . COMMA parameter_list
    (13) parameter_list -> parameter .

    COMMA           shift and go to state 41
    R_PAREN         reduce using rule 13 (parameter_list -> parameter .)


state 35

    (15) parameter -> MUTABLE_VARIABLE . ID COLON type

    ID              shift and go to state 42


state 36

    (16) parameter -> IMMUTABLE_VARIABLE . ID COLON type

    ID              shift and go to state 43


state 37

    (6) create_variable -> MUTABLE_VARIABLE ID COLON type COLON_EQUALS . expression
    (32) expression -> . expression MULTIPLY expression
    (33) expression -> . expression DIVIDE expression
    (34) expression -> . expression MOD expression
    (35) expression -> . expression POWER expression
    (36) expression -> . expression PLUS expression
    (37) expression -> . expression MINUS expression
    (38) expression -> . expression LESS expression
    (39) expression -> . expression GREATER expression
    (40) expression -> . expression GREATER_EQUAL expression
    (41) expression -> . expression LESS_EQUAL expression
    (42) expression -> . expression EQUALS expression
    (43) expression -> . expression DIFFERENT expression
    (44) expression -> . expression AND expression
    (45) expression -> . expression OR expression
    (46) expression -> . L_PAREN expression R_PAREN
    (47) expression -> . value
    (48) expression -> . MINUS expression
    (49) expression -> . NOT expression
    (64) value -> . literal_int
    (65) value -> . literal_string
    (66) value -> . literal_boolean
    (67) value -> . literal_char
    (68) value -> . literal_float
    (69) value -> . identifier
    (70) value -> . function_call
    (71) value -> . index
    (72) value -> . array
    (73) literal_int -> . INT_LITERAL
    (74) literal_string -> . STRING_LITERAL
    (75) literal_boolean -> . BOOLEAN_LITERAL
    (76) literal_char -> . CHAR_LITERAL
    (77) literal_float -> . FLOAT_LITERAL
    (78) identifier -> . ID
    (86) function_call -> . ID L_PAREN arguments_list R_PAREN
    (79) index -> . ID temp
    (82) array -> . L_BRACKET array_literal R_BRACKET
    (83) array -> . L_BRACKET R_BRACKET

    L_PAREN         shift and go to state 47
    MINUS           shift and go to state 46
    NOT             shift and go to state 49
    INT_LITERAL     shift and go to state 59
    STRING_LITERAL  shift and go to state 60
    BOOLEAN_LITERAL shift and go to state 61
    CHAR_LITERAL    shift and go to state 62
    FLOAT_LITERAL   shift and go to state 63
    ID              shift and go to state 44
    L_BRACKET       shift and go to state 64

    expression                     shift and go to state 45
    value                          shift and go to state 48
    literal_int                    shift and go to state 50
    literal_string                 shift and go to state 51
    literal_boolean                shift and go to state 52
    literal_char                   shift and go to state 53
    literal_float                  shift and go to state 54
    identifier                     shift and go to state 55
    function_call                  shift and go to state 56
    index                          shift and go to state 57
    array                          shift and go to state 58

state 38

    (63) type_array -> L_S_BRACKET type . R_S_BRACKET

    R_S_BRACKET     shift and go to state 65


state 39

    (7) create_variable -> IMMUTABLE_VARIABLE ID COLON type COLON_EQUALS . expression
    (32) expression -> . expression MULTIPLY expression
    (33) expression -> . expression DIVIDE expression
    (34) expression -> . expression MOD expression
    (35) expression -> . expression POWER expression
    (36) expression -> . expression PLUS expression
    (37) expression -> . expression MINUS expression
    (38) expression -> . expression LESS expression
    (39) expression -> . expression GREATER expression
    (40) expression -> . expression GREATER_EQUAL expression
    (41) expression -> . expression LESS_EQUAL expression
    (42) expression -> . expression EQUALS expression
    (43) expression -> . expression DIFFERENT expression
    (44) expression -> . expression AND expression
    (45) expression -> . expression OR expression
    (46) expression -> . L_PAREN expression R_PAREN
    (47) expression -> . value
    (48) expression -> . MINUS expression
    (49) expression -> . NOT expression
    (64) value -> . literal_int
    (65) value -> . literal_string
    (66) value -> . literal_boolean
    (67) value -> . literal_char
    (68) value -> . literal_float
    (69) value -> . identifier
    (70) value -> . function_call
    (71) value -> . index
    (72) value -> . array
    (73) literal_int -> . INT_LITERAL
    (74) literal_string -> . STRING_LITERAL
    (75) literal_boolean -> . BOOLEAN_LITERAL
    (76) literal_char -> . CHAR_LITERAL
    (77) literal_float -> . FLOAT_LITERAL
    (78) identifier -> . ID
    (86) function_call -> . ID L_PAREN arguments_list R_PAREN
    (79) index -> . ID temp
    (82) array -> . L_BRACKET array_literal R_BRACKET
    (83) array -> . L_BRACKET R_BRACKET

    L_PAREN         shift and go to state 47
    MINUS           shift and go to state 46
    NOT             shift and go to state 49
    INT_LITERAL     shift and go to state 59
    STRING_LITERAL  shift and go to state 60
    BOOLEAN_LITERAL shift and go to state 61
    CHAR_LITERAL    shift and go to state 62
    FLOAT_LITERAL   shift and go to state 63
    ID              shift and go to state 44
    L_BRACKET       shift and go to state 64

    expression                     shift and go to state 66
    value                          shift and go to state 48
    literal_int                    shift and go to state 50
    literal_string                 shift and go to state 51
    literal_boolean                shift and go to state 52
    literal_char                   shift and go to state 53
    literal_float                  shift and go to state 54
    identifier                     shift and go to state 55
    function_call                  shift and go to state 56
    index                          shift and go to state 57
    array                          shift and go to state 58

state 40

    (10) function -> FUNCTION ID L_PAREN parameter_list R_PAREN . COLON type L_BRACKET block R_BRACKET
    (11) function -> FUNCTION ID L_PAREN parameter_list R_PAREN . COLON type SEMICOLON

    COLON           shift and go to state 67


state 41

    (12) parameter_list -> parameter COMMA . parameter_list
    (12) parameter_list -> . parameter COMMA parameter_list
    (13) parameter_list -> . parameter
    (14) parameter_list -> .
    (15) parameter -> . MUTABLE_VARIABLE ID COLON type
    (16) parameter -> . IMMUTABLE_VARIABLE ID COLON type

    R_PAREN         reduce using rule 14 (parameter_list -> .)
    MUTABLE_VARIABLE shift and go to state 35
    IMMUTABLE_VARIABLE shift and go to state 36

    parameter                      shift and go to state 34
    parameter_list                 shift and go to state 68

state 42

    (15) parameter -> MUTABLE_VARIABLE ID . COLON type

    COLON           shift and go to state 69


state 43

    (16) parameter -> IMMUTABLE_VARIABLE ID . COLON type

    COLON           shift and go to state 70


state 44

    (78) identifier -> ID .
    (86) function_call -> ID . L_PAREN arguments_list R_PAREN
    (79) index -> ID . temp
    (80) temp -> . L_S_BRACKET expression R_S_BRACKET temp
    (81) temp -> . L_S_BRACKET expression R_S_BRACKET

    MULTIPLY        reduce using rule 78 (identifier -> ID .)
    DIVIDE          reduce using rule 78 (identifier -> ID .)
    MOD             reduce using rule 78 (identifier -> ID .)
    POWER           reduce using rule 78 (identifier -> ID .)
    PLUS            reduce using rule 78 (identifier -> ID .)
    MINUS           reduce using rule 78 (identifier -> ID .)
    LESS            reduce using rule 78 (identifier -> ID .)
    GREATER         reduce using rule 78 (identifier -> ID .)
    GREATER_EQUAL   reduce using rule 78 (identifier -> ID .)
    LESS_EQUAL      reduce using rule 78 (identifier -> ID .)
    EQUALS          reduce using rule 78 (identifier -> ID .)
    DIFFERENT       reduce using rule 78 (identifier -> ID .)
    AND             reduce using rule 78 (identifier -> ID .)
    OR              reduce using rule 78 (identifier -> ID .)
    SEMICOLON       reduce using rule 78 (identifier -> ID .)
    R_PAREN         reduce using rule 78 (identifier -> ID .)
    COMMA           reduce using rule 78 (identifier -> ID .)
    R_BRACKET       reduce using rule 78 (identifier -> ID .)
    R_S_BRACKET     reduce using rule 78 (identifier -> ID .)
    L_BRACKET       reduce using rule 78 (identifier -> ID .)
    L_PAREN         shift and go to state 71
    L_S_BRACKET     shift and go to state 73

    temp                           shift and go to state 72

state 45

    (6) create_variable -> MUTABLE_VARIABLE ID COLON type COLON_EQUALS expression .
    (32) expression -> expression . MULTIPLY expression
    (33) expression -> expression . DIVIDE expression
    (34) expression -> expression . MOD expression
    (35) expression -> expression . POWER expression
    (36) expression -> expression . PLUS expression
    (37) expression -> expression . MINUS expression
    (38) expression -> expression . LESS expression
    (39) expression -> expression . GREATER expression
    (40) expression -> expression . GREATER_EQUAL expression
    (41) expression -> expression . LESS_EQUAL expression
    (42) expression -> expression . EQUALS expression
    (43) expression -> expression . DIFFERENT expression
    (44) expression -> expression . AND expression
    (45) expression -> expression . OR expression

    SEMICOLON       reduce using rule 6 (create_variable -> MUTABLE_VARIABLE ID COLON type COLON_EQUALS expression .)
    MULTIPLY        shift and go to state 74
    DIVIDE          shift and go to state 75
    MOD             shift and go to state 76
    POWER           shift and go to state 77
    PLUS            shift and go to state 78
    MINUS           shift and go to state 79
    LESS            shift and go to state 80
    GREATER         shift and go to state 81
    GREATER_EQUAL   shift and go to state 82
    LESS_EQUAL      shift and go to state 83
    EQUALS          shift and go to state 84
    DIFFERENT       shift and go to state 85
    AND             shift and go to state 86
    OR              shift and go to state 87


state 46

    (48) expression -> MINUS . expression
    (32) expression -> . expression MULTIPLY expression
    (33) expression -> . expression DIVIDE expression
    (34) expression -> . expression MOD expression
    (35) expression -> . expression POWER expression
    (36) expression -> . expression PLUS expression
    (37) expression -> . expression MINUS expression
    (38) expression -> . expression LESS expression
    (39) expression -> . expression GREATER expression
    (40) expression -> . expression GREATER_EQUAL expression
    (41) expression -> . expression LESS_EQUAL expression
    (42) expression -> . expression EQUALS expression
    (43) expression -> . expression DIFFERENT expression
    (44) expression -> . expression AND expression
    (45) expression -> . expression OR expression
    (46) expression -> . L_PAREN expression R_PAREN
    (47) expression -> . value
    (48) expression -> . MINUS expression
    (49) expression -> . NOT expression
    (64) value -> . literal_int
    (65) value -> . literal_string
    (66) value -> . literal_boolean
    (67) value -> . literal_char
    (68) value -> . literal_float
    (69) value -> . identifier
    (70) value -> . function_call
    (71) value -> . index
    (72) value -> . array
    (73) literal_int -> . INT_LITERAL
    (74) literal_string -> . STRING_LITERAL
    (75) literal_boolean -> . BOOLEAN_LITERAL
    (76) literal_char -> . CHAR_LITERAL
    (77) literal_float -> . FLOAT_LITERAL
    (78) identifier -> . ID
    (86) function_call -> . ID L_PAREN arguments_list R_PAREN
    (79) index -> . ID temp
    (82) array -> . L_BRACKET array_literal R_BRACKET
    (83) array -> . L_BRACKET R_BRACKET

    L_PAREN         shift and go to state 47
    MINUS           shift and go to state 46
    NOT             shift and go to state 49
    INT_LITERAL     shift and go to state 59
    STRING_LITERAL  shift and go to state 60
    BOOLEAN_LITERAL shift and go to state 61
    CHAR_LITERAL    shift and go to state 62
    FLOAT_LITERAL   shift and go to state 63
    ID              shift and go to state 44
    L_BRACKET       shift and go to state 64

    expression                     shift and go to state 88
    value                          shift and go to state 48
    literal_int                    shift and go to state 50
    literal_string                 shift and go to state 51
    literal_boolean                shift and go to state 52
    literal_char                   shift and go to state 53
    literal_float                  shift and go to state 54
    identifier                     shift and go to state 55
    function_call                  shift and go to state 56
    index                          shift and go to state 57
    array                          shift and go to state 58

state 47

    (46) expression -> L_PAREN . expression R_PAREN
    (32) expression -> . expression MULTIPLY expression
    (33) expression -> . expression DIVIDE expression
    (34) expression -> . expression MOD expression
    (35) expression -> . expression POWER expression
    (36) expression -> . expression PLUS expression
    (37) expression -> . expression MINUS expression
    (38) expression -> . expression LESS expression
    (39) expression -> . expression GREATER expression
    (40) expression -> . expression GREATER_EQUAL expression
    (41) expression -> . expression LESS_EQUAL expression
    (42) expression -> . expression EQUALS expression
    (43) expression -> . expression DIFFERENT expression
    (44) expression -> . expression AND expression
    (45) expression -> . expression OR expression
    (46) expression -> . L_PAREN expression R_PAREN
    (47) expression -> . value
    (48) expression -> . MINUS expression
    (49) expression -> . NOT expression
    (64) value -> . literal_int
    (65) value -> . literal_string
    (66) value -> . literal_boolean
    (67) value -> . literal_char
    (68) value -> . literal_float
    (69) value -> . identifier
    (70) value -> . function_call
    (71) value -> . index
    (72) value -> . array
    (73) literal_int -> . INT_LITERAL
    (74) literal_string -> . STRING_LITERAL
    (75) literal_boolean -> . BOOLEAN_LITERAL
    (76) literal_char -> . CHAR_LITERAL
    (77) literal_float -> . FLOAT_LITERAL
    (78) identifier -> . ID
    (86) function_call -> . ID L_PAREN arguments_list R_PAREN
    (79) index -> . ID temp
    (82) array -> . L_BRACKET array_literal R_BRACKET
    (83) array -> . L_BRACKET R_BRACKET

    L_PAREN         shift and go to state 47
    MINUS           shift and go to state 46
    NOT             shift and go to state 49
    INT_LITERAL     shift and go to state 59
    STRING_LITERAL  shift and go to state 60
    BOOLEAN_LITERAL shift and go to state 61
    CHAR_LITERAL    shift and go to state 62
    FLOAT_LITERAL   shift and go to state 63
    ID              shift and go to state 44
    L_BRACKET       shift and go to state 64

    expression                     shift and go to state 89
    value                          shift and go to state 48
    literal_int                    shift and go to state 50
    literal_string                 shift and go to state 51
    literal_boolean                shift and go to state 52
    literal_char                   shift and go to state 53
    literal_float                  shift and go to state 54
    identifier                     shift and go to state 55
    function_call                  shift and go to state 56
    index                          shift and go to state 57
    array                          shift and go to state 58

state 48

    (47) expression -> value .

    MULTIPLY        reduce using rule 47 (expression -> value .)
    DIVIDE          reduce using rule 47 (expression -> value .)
    MOD             reduce using rule 47 (expression -> value .)
    POWER           reduce using rule 47 (expression -> value .)
    PLUS            reduce using rule 47 (expression -> value .)
    MINUS           reduce using rule 47 (expression -> value .)
    LESS            reduce using rule 47 (expression -> value .)
    GREATER         reduce using rule 47 (expression -> value .)
    GREATER_EQUAL   reduce using rule 47 (expression -> value .)
    LESS_EQUAL      reduce using rule 47 (expression -> value .)
    EQUALS          reduce using rule 47 (expression -> value .)
    DIFFERENT       reduce using rule 47 (expression -> value .)
    AND             reduce using rule 47 (expression -> value .)
    OR              reduce using rule 47 (expression -> value .)
    SEMICOLON       reduce using rule 47 (expression -> value .)
    R_PAREN         reduce using rule 47 (expression -> value .)
    COMMA           reduce using rule 47 (expression -> value .)
    R_BRACKET       reduce using rule 47 (expression -> value .)
    R_S_BRACKET     reduce using rule 47 (expression -> value .)
    L_BRACKET       reduce using rule 47 (expression -> value .)


state 49

    (49) expression -> NOT . expression
    (32) expression -> . expression MULTIPLY expression
    (33) expression -> . expression DIVIDE expression
    (34) expression -> . expression MOD expression
    (35) expression -> . expression POWER expression
    (36) expression -> . expression PLUS expression
    (37) expression -> . expression MINUS expression
    (38) expression -> . expression LESS expression
    (39) expression -> . expression GREATER expression
    (40) expression -> . expression GREATER_EQUAL expression
    (41) expression -> . expression LESS_EQUAL expression
    (42) expression -> . expression EQUALS expression
    (43) expression -> . expression DIFFERENT expression
    (44) expression -> . expression AND expression
    (45) expression -> . expression OR expression
    (46) expression -> . L_PAREN expression R_PAREN
    (47) expression -> . value
    (48) expression -> . MINUS expression
    (49) expression -> . NOT expression
    (64) value -> . literal_int
    (65) value -> . literal_string
    (66) value -> . literal_boolean
    (67) value -> . literal_char
    (68) value -> . literal_float
    (69) value -> . identifier
    (70) value -> . function_call
    (71) value -> . index
    (72) value -> . array
    (73) literal_int -> . INT_LITERAL
    (74) literal_string -> . STRING_LITERAL
    (75) literal_boolean -> . BOOLEAN_LITERAL
    (76) literal_char -> . CHAR_LITERAL
    (77) literal_float -> . FLOAT_LITERAL
    (78) identifier -> . ID
    (86) function_call -> . ID L_PAREN arguments_list R_PAREN
    (79) index -> . ID temp
    (82) array -> . L_BRACKET array_literal R_BRACKET
    (83) array -> . L_BRACKET R_BRACKET

    L_PAREN         shift and go to state 47
    MINUS           shift and go to state 46
    NOT             shift and go to state 49
    INT_LITERAL     shift and go to state 59
    STRING_LITERAL  shift and go to state 60
    BOOLEAN_LITERAL shift and go to state 61
    CHAR_LITERAL    shift and go to state 62
    FLOAT_LITERAL   shift and go to state 63
    ID              shift and go to state 44
    L_BRACKET       shift and go to state 64

    expression                     shift and go to state 90
    value                          shift and go to state 48
    literal_int                    shift and go to state 50
    literal_string                 shift and go to state 51
    literal_boolean                shift and go to state 52
    literal_char                   shift and go to state 53
    literal_float                  shift and go to state 54
    identifier                     shift and go to state 55
    function_call                  shift and go to state 56
    index                          shift and go to state 57
    array                          shift and go to state 58

state 50

    (64) value -> literal_int .

    MULTIPLY        reduce using rule 64 (value -> literal_int .)
    DIVIDE          reduce using rule 64 (value -> literal_int .)
    MOD             reduce using rule 64 (value -> literal_int .)
    POWER           reduce using rule 64 (value -> literal_int .)
    PLUS            reduce using rule 64 (value -> literal_int .)
    MINUS           reduce using rule 64 (value -> literal_int .)
    LESS            reduce using rule 64 (value -> literal_int .)
    GREATER         reduce using rule 64 (value -> literal_int .)
    GREATER_EQUAL   reduce using rule 64 (value -> literal_int .)
    LESS_EQUAL      reduce using rule 64 (value -> literal_int .)
    EQUALS          reduce using rule 64 (value -> literal_int .)
    DIFFERENT       reduce using rule 64 (value -> literal_int .)
    AND             reduce using rule 64 (value -> literal_int .)
    OR              reduce using rule 64 (value -> literal_int .)
    SEMICOLON       reduce using rule 64 (value -> literal_int .)
    R_PAREN         reduce using rule 64 (value -> literal_int .)
    COMMA           reduce using rule 64 (value -> literal_int .)
    R_BRACKET       reduce using rule 64 (value -> literal_int .)
    R_S_BRACKET     reduce using rule 64 (value -> literal_int .)
    L_BRACKET       reduce using rule 64 (value -> literal_int .)


state 51

    (65) value -> literal_string .

    MULTIPLY        reduce using rule 65 (value -> literal_string .)
    DIVIDE          reduce using rule 65 (value -> literal_string .)
    MOD             reduce using rule 65 (value -> literal_string .)
    POWER           reduce using rule 65 (value -> literal_string .)
    PLUS            reduce using rule 65 (value -> literal_string .)
    MINUS           reduce using rule 65 (value -> literal_string .)
    LESS            reduce using rule 65 (value -> literal_string .)
    GREATER         reduce using rule 65 (value -> literal_string .)
    GREATER_EQUAL   reduce using rule 65 (value -> literal_string .)
    LESS_EQUAL      reduce using rule 65 (value -> literal_string .)
    EQUALS          reduce using rule 65 (value -> literal_string .)
    DIFFERENT       reduce using rule 65 (value -> literal_string .)
    AND             reduce using rule 65 (value -> literal_string .)
    OR              reduce using rule 65 (value -> literal_string .)
    SEMICOLON       reduce using rule 65 (value -> literal_string .)
    R_PAREN         reduce using rule 65 (value -> literal_string .)
    COMMA           reduce using rule 65 (value -> literal_string .)
    R_BRACKET       reduce using rule 65 (value -> literal_string .)
    R_S_BRACKET     reduce using rule 65 (value -> literal_string .)
    L_BRACKET       reduce using rule 65 (value -> literal_string .)


state 52

    (66) value -> literal_boolean .

    MULTIPLY        reduce using rule 66 (value -> literal_boolean .)
    DIVIDE          reduce using rule 66 (value -> literal_boolean .)
    MOD             reduce using rule 66 (value -> literal_boolean .)
    POWER           reduce using rule 66 (value -> literal_boolean .)
    PLUS            reduce using rule 66 (value -> literal_boolean .)
    MINUS           reduce using rule 66 (value -> literal_boolean .)
    LESS            reduce using rule 66 (value -> literal_boolean .)
    GREATER         reduce using rule 66 (value -> literal_boolean .)
    GREATER_EQUAL   reduce using rule 66 (value -> literal_boolean .)
    LESS_EQUAL      reduce using rule 66 (value -> literal_boolean .)
    EQUALS          reduce using rule 66 (value -> literal_boolean .)
    DIFFERENT       reduce using rule 66 (value -> literal_boolean .)
    AND             reduce using rule 66 (value -> literal_boolean .)
    OR              reduce using rule 66 (value -> literal_boolean .)
    SEMICOLON       reduce using rule 66 (value -> literal_boolean .)
    R_PAREN         reduce using rule 66 (value -> literal_boolean .)
    COMMA           reduce using rule 66 (value -> literal_boolean .)
    R_BRACKET       reduce using rule 66 (value -> literal_boolean .)
    R_S_BRACKET     reduce using rule 66 (value -> literal_boolean .)
    L_BRACKET       reduce using rule 66 (value -> literal_boolean .)


state 53

    (67) value -> literal_char .

    MULTIPLY        reduce using rule 67 (value -> literal_char .)
    DIVIDE          reduce using rule 67 (value -> literal_char .)
    MOD             reduce using rule 67 (value -> literal_char .)
    POWER           reduce using rule 67 (value -> literal_char .)
    PLUS            reduce using rule 67 (value -> literal_char .)
    MINUS           reduce using rule 67 (value -> literal_char .)
    LESS            reduce using rule 67 (value -> literal_char .)
    GREATER         reduce using rule 67 (value -> literal_char .)
    GREATER_EQUAL   reduce using rule 67 (value -> literal_char .)
    LESS_EQUAL      reduce using rule 67 (value -> literal_char .)
    EQUALS          reduce using rule 67 (value -> literal_char .)
    DIFFERENT       reduce using rule 67 (value -> literal_char .)
    AND             reduce using rule 67 (value -> literal_char .)
    OR              reduce using rule 67 (value -> literal_char .)
    SEMICOLON       reduce using rule 67 (value -> literal_char .)
    R_PAREN         reduce using rule 67 (value -> literal_char .)
    COMMA           reduce using rule 67 (value -> literal_char .)
    R_BRACKET       reduce using rule 67 (value -> literal_char .)
    R_S_BRACKET     reduce using rule 67 (value -> literal_char .)
    L_BRACKET       reduce using rule 67 (value -> literal_char .)


state 54

    (68) value -> literal_float .

    MULTIPLY        reduce using rule 68 (value -> literal_float .)
    DIVIDE          reduce using rule 68 (value -> literal_float .)
    MOD             reduce using rule 68 (value -> literal_float .)
    POWER           reduce using rule 68 (value -> literal_float .)
    PLUS            reduce using rule 68 (value -> literal_float .)
    MINUS           reduce using rule 68 (value -> literal_float .)
    LESS            reduce using rule 68 (value -> literal_float .)
    GREATER         reduce using rule 68 (value -> literal_float .)
    GREATER_EQUAL   reduce using rule 68 (value -> literal_float .)
    LESS_EQUAL      reduce using rule 68 (value -> literal_float .)
    EQUALS          reduce using rule 68 (value -> literal_float .)
    DIFFERENT       reduce using rule 68 (value -> literal_float .)
    AND             reduce using rule 68 (value -> literal_float .)
    OR              reduce using rule 68 (value -> literal_float .)
    SEMICOLON       reduce using rule 68 (value -> literal_float .)
    R_PAREN         reduce using rule 68 (value -> literal_float .)
    COMMA           reduce using rule 68 (value -> literal_float .)
    R_BRACKET       reduce using rule 68 (value -> literal_float .)
    R_S_BRACKET     reduce using rule 68 (value -> literal_float .)
    L_BRACKET       reduce using rule 68 (value -> literal_float .)


state 55

    (69) value -> identifier .

    MULTIPLY        reduce using rule 69 (value -> identifier .)
    DIVIDE          reduce using rule 69 (value -> identifier .)
    MOD             reduce using rule 69 (value -> identifier .)
    POWER           reduce using rule 69 (value -> identifier .)
    PLUS            reduce using rule 69 (value -> identifier .)
    MINUS           reduce using rule 69 (value -> identifier .)
    LESS            reduce using rule 69 (value -> identifier .)
    GREATER         reduce using rule 69 (value -> identifier .)
    GREATER_EQUAL   reduce using rule 69 (value -> identifier .)
    LESS_EQUAL      reduce using rule 69 (value -> identifier .)
    EQUALS          reduce using rule 69 (value -> identifier .)
    DIFFERENT       reduce using rule 69 (value -> identifier .)
    AND             reduce using rule 69 (value -> identifier .)
    OR              reduce using rule 69 (value -> identifier .)
    SEMICOLON       reduce using rule 69 (value -> identifier .)
    R_PAREN         reduce using rule 69 (value -> identifier .)
    COMMA           reduce using rule 69 (value -> identifier .)
    R_BRACKET       reduce using rule 69 (value -> identifier .)
    R_S_BRACKET     reduce using rule 69 (value -> identifier .)
    L_BRACKET       reduce using rule 69 (value -> identifier .)


state 56

    (70) value -> function_call .

    MULTIPLY        reduce using rule 70 (value -> function_call .)
    DIVIDE          reduce using rule 70 (value -> function_call .)
    MOD             reduce using rule 70 (value -> function_call .)
    POWER           reduce using rule 70 (value -> function_call .)
    PLUS            reduce using rule 70 (value -> function_call .)
    MINUS           reduce using rule 70 (value -> function_call .)
    LESS            reduce using rule 70 (value -> function_call .)
    GREATER         reduce using rule 70 (value -> function_call .)
    GREATER_EQUAL   reduce using rule 70 (value -> function_call .)
    LESS_EQUAL      reduce using rule 70 (value -> function_call .)
    EQUALS          reduce using rule 70 (value -> function_call .)
    DIFFERENT       reduce using rule 70 (value -> function_call .)
    AND             reduce using rule 70 (value -> function_call .)
    OR              reduce using rule 70 (value -> function_call .)
    SEMICOLON       reduce using rule 70 (value -> function_call .)
    R_PAREN         reduce using rule 70 (value -> function_call .)
    COMMA           reduce using rule 70 (value -> function_call .)
    R_BRACKET       reduce using rule 70 (value -> function_call .)
    R_S_BRACKET     reduce using rule 70 (value -> function_call .)
    L_BRACKET       reduce using rule 70 (value -> function_call .)


state 57

    (71) value -> index .

    MULTIPLY        reduce using rule 71 (value -> index .)
    DIVIDE          reduce using rule 71 (value -> index .)
    MOD             reduce using rule 71 (value -> index .)
    POWER           reduce using rule 71 (value -> index .)
    PLUS            reduce using rule 71 (value -> index .)
    MINUS           reduce using rule 71 (value -> index .)
    LESS            reduce using rule 71 (value -> index .)
    GREATER         reduce using rule 71 (value -> index .)
    GREATER_EQUAL   reduce using rule 71 (value -> index .)
    LESS_EQUAL      reduce using rule 71 (value -> index .)
    EQUALS          reduce using rule 71 (value -> index .)
    DIFFERENT       reduce using rule 71 (value -> index .)
    AND             reduce using rule 71 (value -> index .)
    OR              reduce using rule 71 (value -> index .)
    SEMICOLON       reduce using rule 71 (value -> index .)
    R_PAREN         reduce using rule 71 (value -> index .)
    COMMA           reduce using rule 71 (value -> index .)
    R_BRACKET       reduce using rule 71 (value -> index .)
    R_S_BRACKET     reduce using rule 71 (value -> index .)
    L_BRACKET       reduce using rule 71 (value -> index .)


state 58

    (72) value -> array .

    MULTIPLY        reduce using rule 72 (value -> array .)
    DIVIDE          reduce using rule 72 (value -> array .)
    MOD             reduce using rule 72 (value -> array .)
    POWER           reduce using rule 72 (value -> array .)
    PLUS            reduce using rule 72 (value -> array .)
    MINUS           reduce using rule 72 (value -> array .)
    LESS            reduce using rule 72 (value -> array .)
    GREATER         reduce using rule 72 (value -> array .)
    GREATER_EQUAL   reduce using rule 72 (value -> array .)
    LESS_EQUAL      reduce using rule 72 (value -> array .)
    EQUALS          reduce using rule 72 (value -> array .)
    DIFFERENT       reduce using rule 72 (value -> array .)
    AND             reduce using rule 72 (value -> array .)
    OR              reduce using rule 72 (value -> array .)
    SEMICOLON       reduce using rule 72 (value -> array .)
    R_PAREN         reduce using rule 72 (value -> array .)
    COMMA           reduce using rule 72 (value -> array .)
    R_BRACKET       reduce using rule 72 (value -> array .)
    R_S_BRACKET     reduce using rule 72 (value -> array .)
    L_BRACKET       reduce using rule 72 (value -> array .)


state 59

    (73) literal_int -> INT_LITERAL .

    MULTIPLY        reduce using rule 73 (literal_int -> INT_LITERAL .)
    DIVIDE          reduce using rule 73 (literal_int -> INT_LITERAL .)
    MOD             reduce using rule 73 (literal_int -> INT_LITERAL .)
    POWER           reduce using rule 73 (literal_int -> INT_LITERAL .)
    PLUS            reduce using rule 73 (literal_int -> INT_LITERAL .)
    MINUS           reduce using rule 73 (literal_int -> INT_LITERAL .)
    LESS            reduce using rule 73 (literal_int -> INT_LITERAL .)
    GREATER         reduce using rule 73 (literal_int -> INT_LITERAL .)
    GREATER_EQUAL   reduce using rule 73 (literal_int -> INT_LITERAL .)
    LESS_EQUAL      reduce using rule 73 (literal_int -> INT_LITERAL .)
    EQUALS          reduce using rule 73 (literal_int -> INT_LITERAL .)
    DIFFERENT       reduce using rule 73 (literal_int -> INT_LITERAL .)
    AND             reduce using rule 73 (literal_int -> INT_LITERAL .)
    OR              reduce using rule 73 (literal_int -> INT_LITERAL .)
    SEMICOLON       reduce using rule 73 (literal_int -> INT_LITERAL .)
    R_PAREN         reduce using rule 73 (literal_int -> INT_LITERAL .)
    COMMA           reduce using rule 73 (literal_int -> INT_LITERAL .)
    R_BRACKET       reduce using rule 73 (literal_int -> INT_LITERAL .)
    R_S_BRACKET     reduce using rule 73 (literal_int -> INT_LITERAL .)
    L_BRACKET       reduce using rule 73 (literal_int -> INT_LITERAL .)


state 60

    (74) literal_string -> STRING_LITERAL .

    MULTIPLY        reduce using rule 74 (literal_string -> STRING_LITERAL .)
    DIVIDE          reduce using rule 74 (literal_string -> STRING_LITERAL .)
    MOD             reduce using rule 74 (literal_string -> STRING_LITERAL .)
    POWER           reduce using rule 74 (literal_string -> STRING_LITERAL .)
    PLUS            reduce using rule 74 (literal_string -> STRING_LITERAL .)
    MINUS           reduce using rule 74 (literal_string -> STRING_LITERAL .)
    LESS            reduce using rule 74 (literal_string -> STRING_LITERAL .)
    GREATER         reduce using rule 74 (literal_string -> STRING_LITERAL .)
    GREATER_EQUAL   reduce using rule 74 (literal_string -> STRING_LITERAL .)
    LESS_EQUAL      reduce using rule 74 (literal_string -> STRING_LITERAL .)
    EQUALS          reduce using rule 74 (literal_string -> STRING_LITERAL .)
    DIFFERENT       reduce using rule 74 (literal_string -> STRING_LITERAL .)
    AND             reduce using rule 74 (literal_string -> STRING_LITERAL .)
    OR              reduce using rule 74 (literal_string -> STRING_LITERAL .)
    SEMICOLON       reduce using rule 74 (literal_string -> STRING_LITERAL .)
    R_PAREN         reduce using rule 74 (literal_string -> STRING_LITERAL .)
    COMMA           reduce using rule 74 (literal_string -> STRING_LITERAL .)
    R_BRACKET       reduce using rule 74 (literal_string -> STRING_LITERAL .)
    R_S_BRACKET     reduce using rule 74 (literal_string -> STRING_LITERAL .)
    L_BRACKET       reduce using rule 74 (literal_string -> STRING_LITERAL .)


state 61

    (75) literal_boolean -> BOOLEAN_LITERAL .

    MULTIPLY        reduce using rule 75 (literal_boolean -> BOOLEAN_LITERAL .)
    DIVIDE          reduce using rule 75 (literal_boolean -> BOOLEAN_LITERAL .)
    MOD             reduce using rule 75 (literal_boolean -> BOOLEAN_LITERAL .)
    POWER           reduce using rule 75 (literal_boolean -> BOOLEAN_LITERAL .)
    PLUS            reduce using rule 75 (literal_boolean -> BOOLEAN_LITERAL .)
    MINUS           reduce using rule 75 (literal_boolean -> BOOLEAN_LITERAL .)
    LESS            reduce using rule 75 (literal_boolean -> BOOLEAN_LITERAL .)
    GREATER         reduce using rule 75 (literal_boolean -> BOOLEAN_LITERAL .)
    GREATER_EQUAL   reduce using rule 75 (literal_boolean -> BOOLEAN_LITERAL .)
    LESS_EQUAL      reduce using rule 75 (literal_boolean -> BOOLEAN_LITERAL .)
    EQUALS          reduce using rule 75 (literal_boolean -> BOOLEAN_LITERAL .)
    DIFFERENT       reduce using rule 75 (literal_boolean -> BOOLEAN_LITERAL .)
    AND             reduce using rule 75 (literal_boolean -> BOOLEAN_LITERAL .)
    OR              reduce using rule 75 (literal_boolean -> BOOLEAN_LITERAL .)
    SEMICOLON       reduce using rule 75 (literal_boolean -> BOOLEAN_LITERAL .)
    R_PAREN         reduce using rule 75 (literal_boolean -> BOOLEAN_LITERAL .)
    COMMA           reduce using rule 75 (literal_boolean -> BOOLEAN_LITERAL .)
    R_BRACKET       reduce using rule 75 (literal_boolean -> BOOLEAN_LITERAL .)
    R_S_BRACKET     reduce using rule 75 (literal_boolean -> BOOLEAN_LITERAL .)
    L_BRACKET       reduce using rule 75 (literal_boolean -> BOOLEAN_LITERAL .)


state 62

    (76) literal_char -> CHAR_LITERAL .

    MULTIPLY        reduce using rule 76 (literal_char -> CHAR_LITERAL .)
    DIVIDE          reduce using rule 76 (literal_char -> CHAR_LITERAL .)
    MOD             reduce using rule 76 (literal_char -> CHAR_LITERAL .)
    POWER           reduce using rule 76 (literal_char -> CHAR_LITERAL .)
    PLUS            reduce using rule 76 (literal_char -> CHAR_LITERAL .)
    MINUS           reduce using rule 76 (literal_char -> CHAR_LITERAL .)
    LESS            reduce using rule 76 (literal_char -> CHAR_LITERAL .)
    GREATER         reduce using rule 76 (literal_char -> CHAR_LITERAL .)
    GREATER_EQUAL   reduce using rule 76 (literal_char -> CHAR_LITERAL .)
    LESS_EQUAL      reduce using rule 76 (literal_char -> CHAR_LITERAL .)
    EQUALS          reduce using rule 76 (literal_char -> CHAR_LITERAL .)
    DIFFERENT       reduce using rule 76 (literal_char -> CHAR_LITERAL .)
    AND             reduce using rule 76 (literal_char -> CHAR_LITERAL .)
    OR              reduce using rule 76 (literal_char -> CHAR_LITERAL .)
    SEMICOLON       reduce using rule 76 (literal_char -> CHAR_LITERAL .)
    R_PAREN         reduce using rule 76 (literal_char -> CHAR_LITERAL .)
    COMMA           reduce using rule 76 (literal_char -> CHAR_LITERAL .)
    R_BRACKET       reduce using rule 76 (literal_char -> CHAR_LITERAL .)
    R_S_BRACKET     reduce using rule 76 (literal_char -> CHAR_LITERAL .)
    L_BRACKET       reduce using rule 76 (literal_char -> CHAR_LITERAL .)


state 63

    (77) literal_float -> FLOAT_LITERAL .

    MULTIPLY        reduce using rule 77 (literal_float -> FLOAT_LITERAL .)
    DIVIDE          reduce using rule 77 (literal_float -> FLOAT_LITERAL .)
    MOD             reduce using rule 77 (literal_float -> FLOAT_LITERAL .)
    POWER           reduce using rule 77 (literal_float -> FLOAT_LITERAL .)
    PLUS            reduce using rule 77 (literal_float -> FLOAT_LITERAL .)
    MINUS           reduce using rule 77 (literal_float -> FLOAT_LITERAL .)
    LESS            reduce using rule 77 (literal_float -> FLOAT_LITERAL .)
    GREATER         reduce using rule 77 (literal_float -> FLOAT_LITERAL .)
    GREATER_EQUAL   reduce using rule 77 (literal_float -> FLOAT_LITERAL .)
    LESS_EQUAL      reduce using rule 77 (literal_float -> FLOAT_LITERAL .)
    EQUALS          reduce using rule 77 (literal_float -> FLOAT_LITERAL .)
    DIFFERENT       reduce using rule 77 (literal_float -> FLOAT_LITERAL .)
    AND             reduce using rule 77 (literal_float -> FLOAT_LITERAL .)
    OR              reduce using rule 77 (literal_float -> FLOAT_LITERAL .)
    SEMICOLON       reduce using rule 77 (literal_float -> FLOAT_LITERAL .)
    R_PAREN         reduce using rule 77 (literal_float -> FLOAT_LITERAL .)
    COMMA           reduce using rule 77 (literal_float -> FLOAT_LITERAL .)
    R_BRACKET       reduce using rule 77 (literal_float -> FLOAT_LITERAL .)
    R_S_BRACKET     reduce using rule 77 (literal_float -> FLOAT_LITERAL .)
    L_BRACKET       reduce using rule 77 (literal_float -> FLOAT_LITERAL .)


state 64

    (82) array -> L_BRACKET . array_literal R_BRACKET
    (83) array -> L_BRACKET . R_BRACKET
    (84) array_literal -> . expression COMMA array_literal
    (85) array_literal -> . expression
    (32) expression -> . expression MULTIPLY expression
    (33) expression -> . expression DIVIDE expression
    (34) expression -> . expression MOD expression
    (35) expression -> . expression POWER expression
    (36) expression -> . expression PLUS expression
    (37) expression -> . expression MINUS expression
    (38) expression -> . expression LESS expression
    (39) expression -> . expression GREATER expression
    (40) expression -> . expression GREATER_EQUAL expression
    (41) expression -> . expression LESS_EQUAL expression
    (42) expression -> . expression EQUALS expression
    (43) expression -> . expression DIFFERENT expression
    (44) expression -> . expression AND expression
    (45) expression -> . expression OR expression
    (46) expression -> . L_PAREN expression R_PAREN
    (47) expression -> . value
    (48) expression -> . MINUS expression
    (49) expression -> . NOT expression
    (64) value -> . literal_int
    (65) value -> . literal_string
    (66) value -> . literal_boolean
    (67) value -> . literal_char
    (68) value -> . literal_float
    (69) value -> . identifier
    (70) value -> . function_call
    (71) value -> . index
    (72) value -> . array
    (73) literal_int -> . INT_LITERAL
    (74) literal_string -> . STRING_LITERAL
    (75) literal_boolean -> . BOOLEAN_LITERAL
    (76) literal_char -> . CHAR_LITERAL
    (77) literal_float -> . FLOAT_LITERAL
    (78) identifier -> . ID
    (86) function_call -> . ID L_PAREN arguments_list R_PAREN
    (79) index -> . ID temp
    (82) array -> . L_BRACKET array_literal R_BRACKET
    (83) array -> . L_BRACKET R_BRACKET

    R_BRACKET       shift and go to state 92
    L_PAREN         shift and go to state 47
    MINUS           shift and go to state 46
    NOT             shift and go to state 49
    INT_LITERAL     shift and go to state 59
    STRING_LITERAL  shift and go to state 60
    BOOLEAN_LITERAL shift and go to state 61
    CHAR_LITERAL    shift and go to state 62
    FLOAT_LITERAL   shift and go to state 63
    ID              shift and go to state 44
    L_BRACKET       shift and go to state 64

    array_literal                  shift and go to state 91
    expression                     shift and go to state 93
    value                          shift and go to state 48
    literal_int                    shift and go to state 50
    literal_string                 shift and go to state 51
    literal_boolean                shift and go to state 52
    literal_char                   shift and go to state 53
    literal_float                  shift and go to state 54
    identifier                     shift and go to state 55
    function_call                  shift and go to state 56
    index                          shift and go to state 57
    array                          shift and go to state 58

state 65

    (63) type_array -> L_S_BRACKET type R_S_BRACKET .

    COLON_EQUALS    reduce using rule 63 (type_array -> L_S_BRACKET type R_S_BRACKET .)
    R_S_BRACKET     reduce using rule 63 (type_array -> L_S_BRACKET type R_S_BRACKET .)
    L_BRACKET       reduce using rule 63 (type_array -> L_S_BRACKET type R_S_BRACKET .)
    SEMICOLON       reduce using rule 63 (type_array -> L_S_BRACKET type R_S_BRACKET .)
    COMMA           reduce using rule 63 (type_array -> L_S_BRACKET type R_S_BRACKET .)
    R_PAREN         reduce using rule 63 (type_array -> L_S_BRACKET type R_S_BRACKET .)


state 66

    (7) create_variable -> IMMUTABLE_VARIABLE ID COLON type COLON_EQUALS expression .
    (32) expression -> expression . MULTIPLY expression
    (33) expression -> expression . DIVIDE expression
    (34) expression -> expression . MOD expression
    (35) expression -> expression . POWER expression
    (36) expression -> expression . PLUS expression
    (37) expression -> expression . MINUS expression
    (38) expression -> expression . LESS expression
    (39) expression -> expression . GREATER expression
    (40) expression -> expression . GREATER_EQUAL expression
    (41) expression -> expression . LESS_EQUAL expression
    (42) expression -> expression . EQUALS expression
    (43) expression -> expression . DIFFERENT expression
    (44) expression -> expression . AND expression
    (45) expression -> expression . OR expression

    SEMICOLON       reduce using rule 7 (create_variable -> IMMUTABLE_VARIABLE ID COLON type COLON_EQUALS expression .)
    MULTIPLY        shift and go to state 74
    DIVIDE          shift and go to state 75
    MOD             shift and go to state 76
    POWER           shift and go to state 77
    PLUS            shift and go to state 78
    MINUS           shift and go to state 79
    LESS            shift and go to state 80
    GREATER         shift and go to state 81
    GREATER_EQUAL   shift and go to state 82
    LESS_EQUAL      shift and go to state 83
    EQUALS          shift and go to state 84
    DIFFERENT       shift and go to state 85
    AND             shift and go to state 86
    OR              shift and go to state 87


state 67

    (10) function -> FUNCTION ID L_PAREN parameter_list R_PAREN COLON . type L_BRACKET block R_BRACKET
    (11) function -> FUNCTION ID L_PAREN parameter_list R_PAREN COLON . type SEMICOLON
    (50) type -> . type_int
    (51) type -> . type_string
    (52) type -> . type_boolean
    (53) type -> . type_char
    (54) type -> . type_float
    (55) type -> . type_void
    (56) type -> . type_array
    (57) type_int -> . INT
    (58) type_string -> . STRING
    (59) type_boolean -> . BOOLEAN
    (60) type_char -> . CHAR
    (61) type_float -> . FLOAT
    (62) type_void -> . VOID
    (63) type_array -> . L_S_BRACKET type R_S_BRACKET

    INT             shift and go to state 25
    STRING          shift and go to state 26
    BOOLEAN         shift and go to state 27
    CHAR            shift and go to state 28
    FLOAT           shift and go to state 29
    VOID            shift and go to state 30
    L_S_BRACKET     shift and go to state 31

    type                           shift and go to state 94
    type_int                       shift and go to state 18
    type_string                    shift and go to state 19
    type_boolean                   shift and go to state 20
    type_char                      shift and go to state 21
    type_float                     shift and go to state 22
    type_void                      shift and go to state 23
    type_array                     shift and go to state 24

state 68

    (12) parameter_list -> parameter COMMA parameter_list .

    R_PAREN         reduce using rule 12 (parameter_list -> parameter COMMA parameter_list .)


state 69

    (15) parameter -> MUTABLE_VARIABLE ID COLON . type
    (50) type -> . type_int
    (51) type -> . type_string
    (52) type -> . type_boolean
    (53) type -> . type_char
    (54) type -> . type_float
    (55) type -> . type_void
    (56) type -> . type_array
    (57) type_int -> . INT
    (58) type_string -> . STRING
    (59) type_boolean -> . BOOLEAN
    (60) type_char -> . CHAR
    (61) type_float -> . FLOAT
    (62) type_void -> . VOID
    (63) type_array -> . L_S_BRACKET type R_S_BRACKET

    INT             shift and go to state 25
    STRING          shift and go to state 26
    BOOLEAN         shift and go to state 27
    CHAR            shift and go to state 28
    FLOAT           shift and go to state 29
    VOID            shift and go to state 30
    L_S_BRACKET     shift and go to state 31

    type                           shift and go to state 95
    type_int                       shift and go to state 18
    type_string                    shift and go to state 19
    type_boolean                   shift and go to state 20
    type_char                      shift and go to state 21
    type_float                     shift and go to state 22
    type_void                      shift and go to state 23
    type_array                     shift and go to state 24

state 70

    (16) parameter -> IMMUTABLE_VARIABLE ID COLON . type
    (50) type -> . type_int
    (51) type -> . type_string
    (52) type -> . type_boolean
    (53) type -> . type_char
    (54) type -> . type_float
    (55) type -> . type_void
    (56) type -> . type_array
    (57) type_int -> . INT
    (58) type_string -> . STRING
    (59) type_boolean -> . BOOLEAN
    (60) type_char -> . CHAR
    (61) type_float -> . FLOAT
    (62) type_void -> . VOID
    (63) type_array -> . L_S_BRACKET type R_S_BRACKET

    INT             shift and go to state 25
    STRING          shift and go to state 26
    BOOLEAN         shift and go to state 27
    CHAR            shift and go to state 28
    FLOAT           shift and go to state 29
    VOID            shift and go to state 30
    L_S_BRACKET     shift and go to state 31

    type                           shift and go to state 96
    type_int                       shift and go to state 18
    type_string                    shift and go to state 19
    type_boolean                   shift and go to state 20
    type_char                      shift and go to state 21
    type_float                     shift and go to state 22
    type_void                      shift and go to state 23
    type_array                     shift and go to state 24

state 71

    (86) function_call -> ID L_PAREN . arguments_list R_PAREN
    (87) arguments_list -> . expression COMMA arguments_list
    (88) arguments_list -> . expression
    (89) arguments_list -> .
    (32) expression -> . expression MULTIPLY expression
    (33) expression -> . expression DIVIDE expression
    (34) expression -> . expression MOD expression
    (35) expression -> . expression POWER expression
    (36) expression -> . expression PLUS expression
    (37) expression -> . expression MINUS expression
    (38) expression -> . expression LESS expression
    (39) expression -> . expression GREATER expression
    (40) expression -> . expression GREATER_EQUAL expression
    (41) expression -> . expression LESS_EQUAL expression
    (42) expression -> . expression EQUALS expression
    (43) expression -> . expression DIFFERENT expression
    (44) expression -> . expression AND expression
    (45) expression -> . expression OR expression
    (46) expression -> . L_PAREN expression R_PAREN
    (47) expression -> . value
    (48) expression -> . MINUS expression
    (49) expression -> . NOT expression
    (64) value -> . literal_int
    (65) value -> . literal_string
    (66) value -> . literal_boolean
    (67) value -> . literal_char
    (68) value -> . literal_float
    (69) value -> . identifier
    (70) value -> . function_call
    (71) value -> . index
    (72) value -> . array
    (73) literal_int -> . INT_LITERAL
    (74) literal_string -> . STRING_LITERAL
    (75) literal_boolean -> . BOOLEAN_LITERAL
    (76) literal_char -> . CHAR_LITERAL
    (77) literal_float -> . FLOAT_LITERAL
    (78) identifier -> . ID
    (86) function_call -> . ID L_PAREN arguments_list R_PAREN
    (79) index -> . ID temp
    (82) array -> . L_BRACKET array_literal R_BRACKET
    (83) array -> . L_BRACKET R_BRACKET

    R_PAREN         reduce using rule 89 (arguments_list -> .)
    L_PAREN         shift and go to state 47
    MINUS           shift and go to state 46
    NOT             shift and go to state 49
    INT_LITERAL     shift and go to state 59
    STRING_LITERAL  shift and go to state 60
    BOOLEAN_LITERAL shift and go to state 61
    CHAR_LITERAL    shift and go to state 62
    FLOAT_LITERAL   shift and go to state 63
    ID              shift and go to state 44
    L_BRACKET       shift and go to state 64

    arguments_list                 shift and go to state 97
    expression                     shift and go to state 98
    value                          shift and go to state 48
    literal_int                    shift and go to state 50
    literal_string                 shift and go to state 51
    literal_boolean                shift and go to state 52
    literal_char                   shift and go to state 53
    literal_float                  shift and go to state 54
    identifier                     shift and go to state 55
    function_call                  shift and go to state 56
    index                          shift and go to state 57
    array                          shift and go to state 58

state 72

    (79) index -> ID temp .

    MULTIPLY        reduce using rule 79 (index -> ID temp .)
    DIVIDE          reduce using rule 79 (index -> ID temp .)
    MOD             reduce using rule 79 (index -> ID temp .)
    POWER           reduce using rule 79 (index -> ID temp .)
    PLUS            reduce using rule 79 (index -> ID temp .)
    MINUS           reduce using rule 79 (index -> ID temp .)
    LESS            reduce using rule 79 (index -> ID temp .)
    GREATER         reduce using rule 79 (index -> ID temp .)
    GREATER_EQUAL   reduce using rule 79 (index -> ID temp .)
    LESS_EQUAL      reduce using rule 79 (index -> ID temp .)
    EQUALS          reduce using rule 79 (index -> ID temp .)
    DIFFERENT       reduce using rule 79 (index -> ID temp .)
    AND             reduce using rule 79 (index -> ID temp .)
    OR              reduce using rule 79 (index -> ID temp .)
    SEMICOLON       reduce using rule 79 (index -> ID temp .)
    R_PAREN         reduce using rule 79 (index -> ID temp .)
    COMMA           reduce using rule 79 (index -> ID temp .)
    R_BRACKET       reduce using rule 79 (index -> ID temp .)
    R_S_BRACKET     reduce using rule 79 (index -> ID temp .)
    L_BRACKET       reduce using rule 79 (index -> ID temp .)
    COLON_EQUALS    reduce using rule 79 (index -> ID temp .)


state 73

    (80) temp -> L_S_BRACKET . expression R_S_BRACKET temp
    (81) temp -> L_S_BRACKET . expression R_S_BRACKET
    (32) expression -> . expression MULTIPLY expression
    (33) expression -> . expression DIVIDE expression
    (34) expression -> . expression MOD expression
    (35) expression -> . expression POWER expression
    (36) expression -> . expression PLUS expression
    (37) expression -> . expression MINUS expression
    (38) expression -> . expression LESS expression
    (39) expression -> . expression GREATER expression
    (40) expression -> . expression GREATER_EQUAL expression
    (41) expression -> . expression LESS_EQUAL expression
    (42) expression -> . expression EQUALS expression
    (43) expression -> . expression DIFFERENT expression
    (44) expression -> . expression AND expression
    (45) expression -> . expression OR expression
    (46) expression -> . L_PAREN expression R_PAREN
    (47) expression -> . value
    (48) expression -> . MINUS expression
    (49) expression -> . NOT expression
    (64) value -> . literal_int
    (65) value -> . literal_string
    (66) value -> . literal_boolean
    (67) value -> . literal_char
    (68) value -> . literal_float
    (69) value -> . identifier
    (70) value -> . function_call
    (71) value -> . index
    (72) value -> . array
    (73) literal_int -> . INT_LITERAL
    (74) literal_string -> . STRING_LITERAL
    (75) literal_boolean -> . BOOLEAN_LITERAL
    (76) literal_char -> . CHAR_LITERAL
    (77) literal_float -> . FLOAT_LITERAL
    (78) identifier -> . ID
    (86) function_call -> . ID L_PAREN arguments_list R_PAREN
    (79) index -> . ID temp
    (82) array -> . L_BRACKET array_literal R_BRACKET
    (83) array -> . L_BRACKET R_BRACKET

    L_PAREN         shift and go to state 47
    MINUS           shift and go to state 46
    NOT             shift and go to state 49
    INT_LITERAL     shift and go to state 59
    STRING_LITERAL  shift and go to state 60
    BOOLEAN_LITERAL shift and go to state 61
    CHAR_LITERAL    shift and go to state 62
    FLOAT_LITERAL   shift and go to state 63
    ID              shift and go to state 44
    L_BRACKET       shift and go to state 64

    expression                     shift and go to state 99
    value                          shift and go to state 48
    literal_int                    shift and go to state 50
    literal_string                 shift and go to state 51
    literal_boolean                shift and go to state 52
    literal_char                   shift and go to state 53
    literal_float                  shift and go to state 54
    identifier                     shift and go to state 55
    function_call                  shift and go to state 56
    index                          shift and go to state 57
    array                          shift and go to state 58

state 74

    (32) expression -> expression MULTIPLY . expression
    (32) expression -> . expression MULTIPLY expression
    (33) expression -> . expression DIVIDE expression
    (34) expression -> . expression MOD expression
    (35) expression -> . expression POWER expression
    (36) expression -> . expression PLUS expression
    (37) expression -> . expression MINUS expression
    (38) expression -> . expression LESS expression
    (39) expression -> . expression GREATER expression
    (40) expression -> . expression GREATER_EQUAL expression
    (41) expression -> . expression LESS_EQUAL expression
    (42) expression -> . expression EQUALS expression
    (43) expression -> . expression DIFFERENT expression
    (44) expression -> . expression AND expression
    (45) expression -> . expression OR expression
    (46) expression -> . L_PAREN expression R_PAREN
    (47) expression -> . value
    (48) expression -> . MINUS expression
    (49) expression -> . NOT expression
    (64) value -> . literal_int
    (65) value -> . literal_string
    (66) value -> . literal_boolean
    (67) value -> . literal_char
    (68) value -> . literal_float
    (69) value -> . identifier
    (70) value -> . function_call
    (71) value -> . index
    (72) value -> . array
    (73) literal_int -> . INT_LITERAL
    (74) literal_string -> . STRING_LITERAL
    (75) literal_boolean -> . BOOLEAN_LITERAL
    (76) literal_char -> . CHAR_LITERAL
    (77) literal_float -> . FLOAT_LITERAL
    (78) identifier -> . ID
    (86) function_call -> . ID L_PAREN arguments_list R_PAREN
    (79) index -> . ID temp
    (82) array -> . L_BRACKET array_literal R_BRACKET
    (83) array -> . L_BRACKET R_BRACKET

    L_PAREN         shift and go to state 47
    MINUS           shift and go to state 46
    NOT             shift and go to state 49
    INT_LITERAL     shift and go to state 59
    STRING_LITERAL  shift and go to state 60
    BOOLEAN_LITERAL shift and go to state 61
    CHAR_LITERAL    shift and go to state 62
    FLOAT_LITERAL   shift and go to state 63
    ID              shift and go to state 44
    L_BRACKET       shift and go to state 64

    expression                     shift and go to state 100
    value                          shift and go to state 48
    literal_int                    shift and go to state 50
    literal_string                 shift and go to state 51
    literal_boolean                shift and go to state 52
    literal_char                   shift and go to state 53
    literal_float                  shift and go to state 54
    identifier                     shift and go to state 55
    function_call                  shift and go to state 56
    index                          shift and go to state 57
    array                          shift and go to state 58

state 75

    (33) expression -> expression DIVIDE . expression
    (32) expression -> . expression MULTIPLY expression
    (33) expression -> . expression DIVIDE expression
    (34) expression -> . expression MOD expression
    (35) expression -> . expression POWER expression
    (36) expression -> . expression PLUS expression
    (37) expression -> . expression MINUS expression
    (38) expression -> . expression LESS expression
    (39) expression -> . expression GREATER expression
    (40) expression -> . expression GREATER_EQUAL expression
    (41) expression -> . expression LESS_EQUAL expression
    (42) expression -> . expression EQUALS expression
    (43) expression -> . expression DIFFERENT expression
    (44) expression -> . expression AND expression
    (45) expression -> . expression OR expression
    (46) expression -> . L_PAREN expression R_PAREN
    (47) expression -> . value
    (48) expression -> . MINUS expression
    (49) expression -> . NOT expression
    (64) value -> . literal_int
    (65) value -> . literal_string
    (66) value -> . literal_boolean
    (67) value -> . literal_char
    (68) value -> . literal_float
    (69) value -> . identifier
    (70) value -> . function_call
    (71) value -> . index
    (72) value -> . array
    (73) literal_int -> . INT_LITERAL
    (74) literal_string -> . STRING_LITERAL
    (75) literal_boolean -> . BOOLEAN_LITERAL
    (76) literal_char -> . CHAR_LITERAL
    (77) literal_float -> . FLOAT_LITERAL
    (78) identifier -> . ID
    (86) function_call -> . ID L_PAREN arguments_list R_PAREN
    (79) index -> . ID temp
    (82) array -> . L_BRACKET array_literal R_BRACKET
    (83) array -> . L_BRACKET R_BRACKET

    L_PAREN         shift and go to state 47
    MINUS           shift and go to state 46
    NOT             shift and go to state 49
    INT_LITERAL     shift and go to state 59
    STRING_LITERAL  shift and go to state 60
    BOOLEAN_LITERAL shift and go to state 61
    CHAR_LITERAL    shift and go to state 62
    FLOAT_LITERAL   shift and go to state 63
    ID              shift and go to state 44
    L_BRACKET       shift and go to state 64

    expression                     shift and go to state 101
    value                          shift and go to state 48
    literal_int                    shift and go to state 50
    literal_string                 shift and go to state 51
    literal_boolean                shift and go to state 52
    literal_char                   shift and go to state 53
    literal_float                  shift and go to state 54
    identifier                     shift and go to state 55
    function_call                  shift and go to state 56
    index                          shift and go to state 57
    array                          shift and go to state 58

state 76

    (34) expression -> expression MOD . expression
    (32) expression -> . expression MULTIPLY expression
    (33) expression -> . expression DIVIDE expression
    (34) expression -> . expression MOD expression
    (35) expression -> . expression POWER expression
    (36) expression -> . expression PLUS expression
    (37) expression -> . expression MINUS expression
    (38) expression -> . expression LESS expression
    (39) expression -> . expression GREATER expression
    (40) expression -> . expression GREATER_EQUAL expression
    (41) expression -> . expression LESS_EQUAL expression
    (42) expression -> . expression EQUALS expression
    (43) expression -> . expression DIFFERENT expression
    (44) expression -> . expression AND expression
    (45) expression -> . expression OR expression
    (46) expression -> . L_PAREN expression R_PAREN
    (47) expression -> . value
    (48) expression -> . MINUS expression
    (49) expression -> . NOT expression
    (64) value -> . literal_int
    (65) value -> . literal_string
    (66) value -> . literal_boolean
    (67) value -> . literal_char
    (68) value -> . literal_float
    (69) value -> . identifier
    (70) value -> . function_call
    (71) value -> . index
    (72) value -> . array
    (73) literal_int -> . INT_LITERAL
    (74) literal_string -> . STRING_LITERAL
    (75) literal_boolean -> . BOOLEAN_LITERAL
    (76) literal_char -> . CHAR_LITERAL
    (77) literal_float -> . FLOAT_LITERAL
    (78) identifier -> . ID
    (86) function_call -> . ID L_PAREN arguments_list R_PAREN
    (79) index -> . ID temp
    (82) array -> . L_BRACKET array_literal R_BRACKET
    (83) array -> . L_BRACKET R_BRACKET

    L_PAREN         shift and go to state 47
    MINUS           shift and go to state 46
    NOT             shift and go to state 49
    INT_LITERAL     shift and go to state 59
    STRING_LITERAL  shift and go to state 60
    BOOLEAN_LITERAL shift and go to state 61
    CHAR_LITERAL    shift and go to state 62
    FLOAT_LITERAL   shift and go to state 63
    ID              shift and go to state 44
    L_BRACKET       shift and go to state 64

    expression                     shift and go to state 102
    value                          shift and go to state 48
    literal_int                    shift and go to state 50
    literal_string                 shift and go to state 51
    literal_boolean                shift and go to state 52
    literal_char                   shift and go to state 53
    literal_float                  shift and go to state 54
    identifier                     shift and go to state 55
    function_call                  shift and go to state 56
    index                          shift and go to state 57
    array                          shift and go to state 58

state 77

    (35) expression -> expression POWER . expression
    (32) expression -> . expression MULTIPLY expression
    (33) expression -> . expression DIVIDE expression
    (34) expression -> . expression MOD expression
    (35) expression -> . expression POWER expression
    (36) expression -> . expression PLUS expression
    (37) expression -> . expression MINUS expression
    (38) expression -> . expression LESS expression
    (39) expression -> . expression GREATER expression
    (40) expression -> . expression GREATER_EQUAL expression
    (41) expression -> . expression LESS_EQUAL expression
    (42) expression -> . expression EQUALS expression
    (43) expression -> . expression DIFFERENT expression
    (44) expression -> . expression AND expression
    (45) expression -> . expression OR expression
    (46) expression -> . L_PAREN expression R_PAREN
    (47) expression -> . value
    (48) expression -> . MINUS expression
    (49) expression -> . NOT expression
    (64) value -> . literal_int
    (65) value -> . literal_string
    (66) value -> . literal_boolean
    (67) value -> . literal_char
    (68) value -> . literal_float
    (69) value -> . identifier
    (70) value -> . function_call
    (71) value -> . index
    (72) value -> . array
    (73) literal_int -> . INT_LITERAL
    (74) literal_string -> . STRING_LITERAL
    (75) literal_boolean -> . BOOLEAN_LITERAL
    (76) literal_char -> . CHAR_LITERAL
    (77) literal_float -> . FLOAT_LITERAL
    (78) identifier -> . ID
    (86) function_call -> . ID L_PAREN arguments_list R_PAREN
    (79) index -> . ID temp
    (82) array -> . L_BRACKET array_literal R_BRACKET
    (83) array -> . L_BRACKET R_BRACKET

    L_PAREN         shift and go to state 47
    MINUS           shift and go to state 46
    NOT             shift and go to state 49
    INT_LITERAL     shift and go to state 59
    STRING_LITERAL  shift and go to state 60
    BOOLEAN_LITERAL shift and go to state 61
    CHAR_LITERAL    shift and go to state 62
    FLOAT_LITERAL   shift and go to state 63
    ID              shift and go to state 44
    L_BRACKET       shift and go to state 64

    expression                     shift and go to state 103
    value                          shift and go to state 48
    literal_int                    shift and go to state 50
    literal_string                 shift and go to state 51
    literal_boolean                shift and go to state 52
    literal_char                   shift and go to state 53
    literal_float                  shift and go to state 54
    identifier                     shift and go to state 55
    function_call                  shift and go to state 56
    index                          shift and go to state 57
    array                          shift and go to state 58

state 78

    (36) expression -> expression PLUS . expression
    (32) expression -> . expression MULTIPLY expression
    (33) expression -> . expression DIVIDE expression
    (34) expression -> . expression MOD expression
    (35) expression -> . expression POWER expression
    (36) expression -> . expression PLUS expression
    (37) expression -> . expression MINUS expression
    (38) expression -> . expression LESS expression
    (39) expression -> . expression GREATER expression
    (40) expression -> . expression GREATER_EQUAL expression
    (41) expression -> . expression LESS_EQUAL expression
    (42) expression -> . expression EQUALS expression
    (43) expression -> . expression DIFFERENT expression
    (44) expression -> . expression AND expression
    (45) expression -> . expression OR expression
    (46) expression -> . L_PAREN expression R_PAREN
    (47) expression -> . value
    (48) expression -> . MINUS expression
    (49) expression -> . NOT expression
    (64) value -> . literal_int
    (65) value -> . literal_string
    (66) value -> . literal_boolean
    (67) value -> . literal_char
    (68) value -> . literal_float
    (69) value -> . identifier
    (70) value -> . function_call
    (71) value -> . index
    (72) value -> . array
    (73) literal_int -> . INT_LITERAL
    (74) literal_string -> . STRING_LITERAL
    (75) literal_boolean -> . BOOLEAN_LITERAL
    (76) literal_char -> . CHAR_LITERAL
    (77) literal_float -> . FLOAT_LITERAL
    (78) identifier -> . ID
    (86) function_call -> . ID L_PAREN arguments_list R_PAREN
    (79) index -> . ID temp
    (82) array -> . L_BRACKET array_literal R_BRACKET
    (83) array -> . L_BRACKET R_BRACKET

    L_PAREN         shift and go to state 47
    MINUS           shift and go to state 46
    NOT             shift and go to state 49
    INT_LITERAL     shift and go to state 59
    STRING_LITERAL  shift and go to state 60
    BOOLEAN_LITERAL shift and go to state 61
    CHAR_LITERAL    shift and go to state 62
    FLOAT_LITERAL   shift and go to state 63
    ID              shift and go to state 44
    L_BRACKET       shift and go to state 64

    expression                     shift and go to state 104
    value                          shift and go to state 48
    literal_int                    shift and go to state 50
    literal_string                 shift and go to state 51
    literal_boolean                shift and go to state 52
    literal_char                   shift and go to state 53
    literal_float                  shift and go to state 54
    identifier                     shift and go to state 55
    function_call                  shift and go to state 56
    index                          shift and go to state 57
    array                          shift and go to state 58

state 79

    (37) expression -> expression MINUS . expression
    (32) expression -> . expression MULTIPLY expression
    (33) expression -> . expression DIVIDE expression
    (34) expression -> . expression MOD expression
    (35) expression -> . expression POWER expression
    (36) expression -> . expression PLUS expression
    (37) expression -> . expression MINUS expression
    (38) expression -> . expression LESS expression
    (39) expression -> . expression GREATER expression
    (40) expression -> . expression GREATER_EQUAL expression
    (41) expression -> . expression LESS_EQUAL expression
    (42) expression -> . expression EQUALS expression
    (43) expression -> . expression DIFFERENT expression
    (44) expression -> . expression AND expression
    (45) expression -> . expression OR expression
    (46) expression -> . L_PAREN expression R_PAREN
    (47) expression -> . value
    (48) expression -> . MINUS expression
    (49) expression -> . NOT expression
    (64) value -> . literal_int
    (65) value -> . literal_string
    (66) value -> . literal_boolean
    (67) value -> . literal_char
    (68) value -> . literal_float
    (69) value -> . identifier
    (70) value -> . function_call
    (71) value -> . index
    (72) value -> . array
    (73) literal_int -> . INT_LITERAL
    (74) literal_string -> . STRING_LITERAL
    (75) literal_boolean -> . BOOLEAN_LITERAL
    (76) literal_char -> . CHAR_LITERAL
    (77) literal_float -> . FLOAT_LITERAL
    (78) identifier -> . ID
    (86) function_call -> . ID L_PAREN arguments_list R_PAREN
    (79) index -> . ID temp
    (82) array -> . L_BRACKET array_literal R_BRACKET
    (83) array -> . L_BRACKET R_BRACKET

    L_PAREN         shift and go to state 47
    MINUS           shift and go to state 46
    NOT             shift and go to state 49
    INT_LITERAL     shift and go to state 59
    STRING_LITERAL  shift and go to state 60
    BOOLEAN_LITERAL shift and go to state 61
    CHAR_LITERAL    shift and go to state 62
    FLOAT_LITERAL   shift and go to state 63
    ID              shift and go to state 44
    L_BRACKET       shift and go to state 64

    expression                     shift and go to state 105
    value                          shift and go to state 48
    literal_int                    shift and go to state 50
    literal_string                 shift and go to state 51
    literal_boolean                shift and go to state 52
    literal_char                   shift and go to state 53
    literal_float                  shift and go to state 54
    identifier                     shift and go to state 55
    function_call                  shift and go to state 56
    index                          shift and go to state 57
    array                          shift and go to state 58

state 80

    (38) expression -> expression LESS . expression
    (32) expression -> . expression MULTIPLY expression
    (33) expression -> . expression DIVIDE expression
    (34) expression -> . expression MOD expression
    (35) expression -> . expression POWER expression
    (36) expression -> . expression PLUS expression
    (37) expression -> . expression MINUS expression
    (38) expression -> . expression LESS expression
    (39) expression -> . expression GREATER expression
    (40) expression -> . expression GREATER_EQUAL expression
    (41) expression -> . expression LESS_EQUAL expression
    (42) expression -> . expression EQUALS expression
    (43) expression -> . expression DIFFERENT expression
    (44) expression -> . expression AND expression
    (45) expression -> . expression OR expression
    (46) expression -> . L_PAREN expression R_PAREN
    (47) expression -> . value
    (48) expression -> . MINUS expression
    (49) expression -> . NOT expression
    (64) value -> . literal_int
    (65) value -> . literal_string
    (66) value -> . literal_boolean
    (67) value -> . literal_char
    (68) value -> . literal_float
    (69) value -> . identifier
    (70) value -> . function_call
    (71) value -> . index
    (72) value -> . array
    (73) literal_int -> . INT_LITERAL
    (74) literal_string -> . STRING_LITERAL
    (75) literal_boolean -> . BOOLEAN_LITERAL
    (76) literal_char -> . CHAR_LITERAL
    (77) literal_float -> . FLOAT_LITERAL
    (78) identifier -> . ID
    (86) function_call -> . ID L_PAREN arguments_list R_PAREN
    (79) index -> . ID temp
    (82) array -> . L_BRACKET array_literal R_BRACKET
    (83) array -> . L_BRACKET R_BRACKET

    L_PAREN         shift and go to state 47
    MINUS           shift and go to state 46
    NOT             shift and go to state 49
    INT_LITERAL     shift and go to state 59
    STRING_LITERAL  shift and go to state 60
    BOOLEAN_LITERAL shift and go to state 61
    CHAR_LITERAL    shift and go to state 62
    FLOAT_LITERAL   shift and go to state 63
    ID              shift and go to state 44
    L_BRACKET       shift and go to state 64

    expression                     shift and go to state 106
    value                          shift and go to state 48
    literal_int                    shift and go to state 50
    literal_string                 shift and go to state 51
    literal_boolean                shift and go to state 52
    literal_char                   shift and go to state 53
    literal_float                  shift and go to state 54
    identifier                     shift and go to state 55
    function_call                  shift and go to state 56
    index                          shift and go to state 57
    array                          shift and go to state 58

state 81

    (39) expression -> expression GREATER . expression
    (32) expression -> . expression MULTIPLY expression
    (33) expression -> . expression DIVIDE expression
    (34) expression -> . expression MOD expression
    (35) expression -> . expression POWER expression
    (36) expression -> . expression PLUS expression
    (37) expression -> . expression MINUS expression
    (38) expression -> . expression LESS expression
    (39) expression -> . expression GREATER expression
    (40) expression -> . expression GREATER_EQUAL expression
    (41) expression -> . expression LESS_EQUAL expression
    (42) expression -> . expression EQUALS expression
    (43) expression -> . expression DIFFERENT expression
    (44) expression -> . expression AND expression
    (45) expression -> . expression OR expression
    (46) expression -> . L_PAREN expression R_PAREN
    (47) expression -> . value
    (48) expression -> . MINUS expression
    (49) expression -> . NOT expression
    (64) value -> . literal_int
    (65) value -> . literal_string
    (66) value -> . literal_boolean
    (67) value -> . literal_char
    (68) value -> . literal_float
    (69) value -> . identifier
    (70) value -> . function_call
    (71) value -> . index
    (72) value -> . array
    (73) literal_int -> . INT_LITERAL
    (74) literal_string -> . STRING_LITERAL
    (75) literal_boolean -> . BOOLEAN_LITERAL
    (76) literal_char -> . CHAR_LITERAL
    (77) literal_float -> . FLOAT_LITERAL
    (78) identifier -> . ID
    (86) function_call -> . ID L_PAREN arguments_list R_PAREN
    (79) index -> . ID temp
    (82) array -> . L_BRACKET array_literal R_BRACKET
    (83) array -> . L_BRACKET R_BRACKET

    L_PAREN         shift and go to state 47
    MINUS           shift and go to state 46
    NOT             shift and go to state 49
    INT_LITERAL     shift and go to state 59
    STRING_LITERAL  shift and go to state 60
    BOOLEAN_LITERAL shift and go to state 61
    CHAR_LITERAL    shift and go to state 62
    FLOAT_LITERAL   shift and go to state 63
    ID              shift and go to state 44
    L_BRACKET       shift and go to state 64

    expression                     shift and go to state 107
    value                          shift and go to state 48
    literal_int                    shift and go to state 50
    literal_string                 shift and go to state 51
    literal_boolean                shift and go to state 52
    literal_char                   shift and go to state 53
    literal_float                  shift and go to state 54
    identifier                     shift and go to state 55
    function_call                  shift and go to state 56
    index                          shift and go to state 57
    array                          shift and go to state 58

state 82

    (40) expression -> expression GREATER_EQUAL . expression
    (32) expression -> . expression MULTIPLY expression
    (33) expression -> . expression DIVIDE expression
    (34) expression -> . expression MOD expression
    (35) expression -> . expression POWER expression
    (36) expression -> . expression PLUS expression
    (37) expression -> . expression MINUS expression
    (38) expression -> . expression LESS expression
    (39) expression -> . expression GREATER expression
    (40) expression -> . expression GREATER_EQUAL expression
    (41) expression -> . expression LESS_EQUAL expression
    (42) expression -> . expression EQUALS expression
    (43) expression -> . expression DIFFERENT expression
    (44) expression -> . expression AND expression
    (45) expression -> . expression OR expression
    (46) expression -> . L_PAREN expression R_PAREN
    (47) expression -> . value
    (48) expression -> . MINUS expression
    (49) expression -> . NOT expression
    (64) value -> . literal_int
    (65) value -> . literal_string
    (66) value -> . literal_boolean
    (67) value -> . literal_char
    (68) value -> . literal_float
    (69) value -> . identifier
    (70) value -> . function_call
    (71) value -> . index
    (72) value -> . array
    (73) literal_int -> . INT_LITERAL
    (74) literal_string -> . STRING_LITERAL
    (75) literal_boolean -> . BOOLEAN_LITERAL
    (76) literal_char -> . CHAR_LITERAL
    (77) literal_float -> . FLOAT_LITERAL
    (78) identifier -> . ID
    (86) function_call -> . ID L_PAREN arguments_list R_PAREN
    (79) index -> . ID temp
    (82) array -> . L_BRACKET array_literal R_BRACKET
    (83) array -> . L_BRACKET R_BRACKET

    L_PAREN         shift and go to state 47
    MINUS           shift and go to state 46
    NOT             shift and go to state 49
    INT_LITERAL     shift and go to state 59
    STRING_LITERAL  shift and go to state 60
    BOOLEAN_LITERAL shift and go to state 61
    CHAR_LITERAL    shift and go to state 62
    FLOAT_LITERAL   shift and go to state 63
    ID              shift and go to state 44
    L_BRACKET       shift and go to state 64

    expression                     shift and go to state 108
    value                          shift and go to state 48
    literal_int                    shift and go to state 50
    literal_string                 shift and go to state 51
    literal_boolean                shift and go to state 52
    literal_char                   shift and go to state 53
    literal_float                  shift and go to state 54
    identifier                     shift and go to state 55
    function_call                  shift and go to state 56
    index                          shift and go to state 57
    array                          shift and go to state 58

state 83

    (41) expression -> expression LESS_EQUAL . expression
    (32) expression -> . expression MULTIPLY expression
    (33) expression -> . expression DIVIDE expression
    (34) expression -> . expression MOD expression
    (35) expression -> . expression POWER expression
    (36) expression -> . expression PLUS expression
    (37) expression -> . expression MINUS expression
    (38) expression -> . expression LESS expression
    (39) expression -> . expression GREATER expression
    (40) expression -> . expression GREATER_EQUAL expression
    (41) expression -> . expression LESS_EQUAL expression
    (42) expression -> . expression EQUALS expression
    (43) expression -> . expression DIFFERENT expression
    (44) expression -> . expression AND expression
    (45) expression -> . expression OR expression
    (46) expression -> . L_PAREN expression R_PAREN
    (47) expression -> . value
    (48) expression -> . MINUS expression
    (49) expression -> . NOT expression
    (64) value -> . literal_int
    (65) value -> . literal_string
    (66) value -> . literal_boolean
    (67) value -> . literal_char
    (68) value -> . literal_float
    (69) value -> . identifier
    (70) value -> . function_call
    (71) value -> . index
    (72) value -> . array
    (73) literal_int -> . INT_LITERAL
    (74) literal_string -> . STRING_LITERAL
    (75) literal_boolean -> . BOOLEAN_LITERAL
    (76) literal_char -> . CHAR_LITERAL
    (77) literal_float -> . FLOAT_LITERAL
    (78) identifier -> . ID
    (86) function_call -> . ID L_PAREN arguments_list R_PAREN
    (79) index -> . ID temp
    (82) array -> . L_BRACKET array_literal R_BRACKET
    (83) array -> . L_BRACKET R_BRACKET

    L_PAREN         shift and go to state 47
    MINUS           shift and go to state 46
    NOT             shift and go to state 49
    INT_LITERAL     shift and go to state 59
    STRING_LITERAL  shift and go to state 60
    BOOLEAN_LITERAL shift and go to state 61
    CHAR_LITERAL    shift and go to state 62
    FLOAT_LITERAL   shift and go to state 63
    ID              shift and go to state 44
    L_BRACKET       shift and go to state 64

    expression                     shift and go to state 109
    value                          shift and go to state 48
    literal_int                    shift and go to state 50
    literal_string                 shift and go to state 51
    literal_boolean                shift and go to state 52
    literal_char                   shift and go to state 53
    literal_float                  shift and go to state 54
    identifier                     shift and go to state 55
    function_call                  shift and go to state 56
    index                          shift and go to state 57
    array                          shift and go to state 58

state 84

    (42) expression -> expression EQUALS . expression
    (32) expression -> . expression MULTIPLY expression
    (33) expression -> . expression DIVIDE expression
    (34) expression -> . expression MOD expression
    (35) expression -> . expression POWER expression
    (36) expression -> . expression PLUS expression
    (37) expression -> . expression MINUS expression
    (38) expression -> . expression LESS expression
    (39) expression -> . expression GREATER expression
    (40) expression -> . expression GREATER_EQUAL expression
    (41) expression -> . expression LESS_EQUAL expression
    (42) expression -> . expression EQUALS expression
    (43) expression -> . expression DIFFERENT expression
    (44) expression -> . expression AND expression
    (45) expression -> . expression OR expression
    (46) expression -> . L_PAREN expression R_PAREN
    (47) expression -> . value
    (48) expression -> . MINUS expression
    (49) expression -> . NOT expression
    (64) value -> . literal_int
    (65) value -> . literal_string
    (66) value -> . literal_boolean
    (67) value -> . literal_char
    (68) value -> . literal_float
    (69) value -> . identifier
    (70) value -> . function_call
    (71) value -> . index
    (72) value -> . array
    (73) literal_int -> . INT_LITERAL
    (74) literal_string -> . STRING_LITERAL
    (75) literal_boolean -> . BOOLEAN_LITERAL
    (76) literal_char -> . CHAR_LITERAL
    (77) literal_float -> . FLOAT_LITERAL
    (78) identifier -> . ID
    (86) function_call -> . ID L_PAREN arguments_list R_PAREN
    (79) index -> . ID temp
    (82) array -> . L_BRACKET array_literal R_BRACKET
    (83) array -> . L_BRACKET R_BRACKET

    L_PAREN         shift and go to state 47
    MINUS           shift and go to state 46
    NOT             shift and go to state 49
    INT_LITERAL     shift and go to state 59
    STRING_LITERAL  shift and go to state 60
    BOOLEAN_LITERAL shift and go to state 61
    CHAR_LITERAL    shift and go to state 62
    FLOAT_LITERAL   shift and go to state 63
    ID              shift and go to state 44
    L_BRACKET       shift and go to state 64

    expression                     shift and go to state 110
    value                          shift and go to state 48
    literal_int                    shift and go to state 50
    literal_string                 shift and go to state 51
    literal_boolean                shift and go to state 52
    literal_char                   shift and go to state 53
    literal_float                  shift and go to state 54
    identifier                     shift and go to state 55
    function_call                  shift and go to state 56
    index                          shift and go to state 57
    array                          shift and go to state 58

state 85

    (43) expression -> expression DIFFERENT . expression
    (32) expression -> . expression MULTIPLY expression
    (33) expression -> . expression DIVIDE expression
    (34) expression -> . expression MOD expression
    (35) expression -> . expression POWER expression
    (36) expression -> . expression PLUS expression
    (37) expression -> . expression MINUS expression
    (38) expression -> . expression LESS expression
    (39) expression -> . expression GREATER expression
    (40) expression -> . expression GREATER_EQUAL expression
    (41) expression -> . expression LESS_EQUAL expression
    (42) expression -> . expression EQUALS expression
    (43) expression -> . expression DIFFERENT expression
    (44) expression -> . expression AND expression
    (45) expression -> . expression OR expression
    (46) expression -> . L_PAREN expression R_PAREN
    (47) expression -> . value
    (48) expression -> . MINUS expression
    (49) expression -> . NOT expression
    (64) value -> . literal_int
    (65) value -> . literal_string
    (66) value -> . literal_boolean
    (67) value -> . literal_char
    (68) value -> . literal_float
    (69) value -> . identifier
    (70) value -> . function_call
    (71) value -> . index
    (72) value -> . array
    (73) literal_int -> . INT_LITERAL
    (74) literal_string -> . STRING_LITERAL
    (75) literal_boolean -> . BOOLEAN_LITERAL
    (76) literal_char -> . CHAR_LITERAL
    (77) literal_float -> . FLOAT_LITERAL
    (78) identifier -> . ID
    (86) function_call -> . ID L_PAREN arguments_list R_PAREN
    (79) index -> . ID temp
    (82) array -> . L_BRACKET array_literal R_BRACKET
    (83) array -> . L_BRACKET R_BRACKET

    L_PAREN         shift and go to state 47
    MINUS           shift and go to state 46
    NOT             shift and go to state 49
    INT_LITERAL     shift and go to state 59
    STRING_LITERAL  shift and go to state 60
    BOOLEAN_LITERAL shift and go to state 61
    CHAR_LITERAL    shift and go to state 62
    FLOAT_LITERAL   shift and go to state 63
    ID              shift and go to state 44
    L_BRACKET       shift and go to state 64

    expression                     shift and go to state 111
    value                          shift and go to state 48
    literal_int                    shift and go to state 50
    literal_string                 shift and go to state 51
    literal_boolean                shift and go to state 52
    literal_char                   shift and go to state 53
    literal_float                  shift and go to state 54
    identifier                     shift and go to state 55
    function_call                  shift and go to state 56
    index                          shift and go to state 57
    array                          shift and go to state 58

state 86

    (44) expression -> expression AND . expression
    (32) expression -> . expression MULTIPLY expression
    (33) expression -> . expression DIVIDE expression
    (34) expression -> . expression MOD expression
    (35) expression -> . expression POWER expression
    (36) expression -> . expression PLUS expression
    (37) expression -> . expression MINUS expression
    (38) expression -> . expression LESS expression
    (39) expression -> . expression GREATER expression
    (40) expression -> . expression GREATER_EQUAL expression
    (41) expression -> . expression LESS_EQUAL expression
    (42) expression -> . expression EQUALS expression
    (43) expression -> . expression DIFFERENT expression
    (44) expression -> . expression AND expression
    (45) expression -> . expression OR expression
    (46) expression -> . L_PAREN expression R_PAREN
    (47) expression -> . value
    (48) expression -> . MINUS expression
    (49) expression -> . NOT expression
    (64) value -> . literal_int
    (65) value -> . literal_string
    (66) value -> . literal_boolean
    (67) value -> . literal_char
    (68) value -> . literal_float
    (69) value -> . identifier
    (70) value -> . function_call
    (71) value -> . index
    (72) value -> . array
    (73) literal_int -> . INT_LITERAL
    (74) literal_string -> . STRING_LITERAL
    (75) literal_boolean -> . BOOLEAN_LITERAL
    (76) literal_char -> . CHAR_LITERAL
    (77) literal_float -> . FLOAT_LITERAL
    (78) identifier -> . ID
    (86) function_call -> . ID L_PAREN arguments_list R_PAREN
    (79) index -> . ID temp
    (82) array -> . L_BRACKET array_literal R_BRACKET
    (83) array -> . L_BRACKET R_BRACKET

    L_PAREN         shift and go to state 47
    MINUS           shift and go to state 46
    NOT             shift and go to state 49
    INT_LITERAL     shift and go to state 59
    STRING_LITERAL  shift and go to state 60
    BOOLEAN_LITERAL shift and go to state 61
    CHAR_LITERAL    shift and go to state 62
    FLOAT_LITERAL   shift and go to state 63
    ID              shift and go to state 44
    L_BRACKET       shift and go to state 64

    expression                     shift and go to state 112
    value                          shift and go to state 48
    literal_int                    shift and go to state 50
    literal_string                 shift and go to state 51
    literal_boolean                shift and go to state 52
    literal_char                   shift and go to state 53
    literal_float                  shift and go to state 54
    identifier                     shift and go to state 55
    function_call                  shift and go to state 56
    index                          shift and go to state 57
    array                          shift and go to state 58

state 87

    (45) expression -> expression OR . expression
    (32) expression -> . expression MULTIPLY expression
    (33) expression -> . expression DIVIDE expression
    (34) expression -> . expression MOD expression
    (35) expression -> . expression POWER expression
    (36) expression -> . expression PLUS expression
    (37) expression -> . expression MINUS expression
    (38) expression -> . expression LESS expression
    (39) expression -> . expression GREATER expression
    (40) expression -> . expression GREATER_EQUAL expression
    (41) expression -> . expression LESS_EQUAL expression
    (42) expression -> . expression EQUALS expression
    (43) expression -> . expression DIFFERENT expression
    (44) expression -> . expression AND expression
    (45) expression -> . expression OR expression
    (46) expression -> . L_PAREN expression R_PAREN
    (47) expression -> . value
    (48) expression -> . MINUS expression
    (49) expression -> . NOT expression
    (64) value -> . literal_int
    (65) value -> . literal_string
    (66) value -> . literal_boolean
    (67) value -> . literal_char
    (68) value -> . literal_float
    (69) value -> . identifier
    (70) value -> . function_call
    (71) value -> . index
    (72) value -> . array
    (73) literal_int -> . INT_LITERAL
    (74) literal_string -> . STRING_LITERAL
    (75) literal_boolean -> . BOOLEAN_LITERAL
    (76) literal_char -> . CHAR_LITERAL
    (77) literal_float -> . FLOAT_LITERAL
    (78) identifier -> . ID
    (86) function_call -> . ID L_PAREN arguments_list R_PAREN
    (79) index -> . ID temp
    (82) array -> . L_BRACKET array_literal R_BRACKET
    (83) array -> . L_BRACKET R_BRACKET

    L_PAREN         shift and go to state 47
    MINUS           shift and go to state 46
    NOT             shift and go to state 49
    INT_LITERAL     shift and go to state 59
    STRING_LITERAL  shift and go to state 60
    BOOLEAN_LITERAL shift and go to state 61
    CHAR_LITERAL    shift and go to state 62
    FLOAT_LITERAL   shift and go to state 63
    ID              shift and go to state 44
    L_BRACKET       shift and go to state 64

    expression                     shift and go to state 113
    value                          shift and go to state 48
    literal_int                    shift and go to state 50
    literal_string                 shift and go to state 51
    literal_boolean                shift and go to state 52
    literal_char                   shift and go to state 53
    literal_float                  shift and go to state 54
    identifier                     shift and go to state 55
    function_call                  shift and go to state 56
    index                          shift and go to state 57
    array                          shift and go to state 58

state 88

    (48) expression -> MINUS expression .
    (32) expression -> expression . MULTIPLY expression
    (33) expression -> expression . DIVIDE expression
    (34) expression -> expression . MOD expression
    (35) expression -> expression . POWER expression
    (36) expression -> expression . PLUS expression
    (37) expression -> expression . MINUS expression
    (38) expression -> expression . LESS expression
    (39) expression -> expression . GREATER expression
    (40) expression -> expression . GREATER_EQUAL expression
    (41) expression -> expression . LESS_EQUAL expression
    (42) expression -> expression . EQUALS expression
    (43) expression -> expression . DIFFERENT expression
    (44) expression -> expression . AND expression
    (45) expression -> expression . OR expression

    MULTIPLY        reduce using rule 48 (expression -> MINUS expression .)
    DIVIDE          reduce using rule 48 (expression -> MINUS expression .)
    MOD             reduce using rule 48 (expression -> MINUS expression .)
    POWER           reduce using rule 48 (expression -> MINUS expression .)
    PLUS            reduce using rule 48 (expression -> MINUS expression .)
    MINUS           reduce using rule 48 (expression -> MINUS expression .)
    LESS            reduce using rule 48 (expression -> MINUS expression .)
    GREATER         reduce using rule 48 (expression -> MINUS expression .)
    GREATER_EQUAL   reduce using rule 48 (expression -> MINUS expression .)
    LESS_EQUAL      reduce using rule 48 (expression -> MINUS expression .)
    EQUALS          reduce using rule 48 (expression -> MINUS expression .)
    DIFFERENT       reduce using rule 48 (expression -> MINUS expression .)
    AND             reduce using rule 48 (expression -> MINUS expression .)
    OR              reduce using rule 48 (expression -> MINUS expression .)
    SEMICOLON       reduce using rule 48 (expression -> MINUS expression .)
    R_PAREN         reduce using rule 48 (expression -> MINUS expression .)
    COMMA           reduce using rule 48 (expression -> MINUS expression .)
    R_BRACKET       reduce using rule 48 (expression -> MINUS expression .)
    R_S_BRACKET     reduce using rule 48 (expression -> MINUS expression .)
    L_BRACKET       reduce using rule 48 (expression -> MINUS expression .)

  ! MULTIPLY        [ shift and go to state 74 ]
  ! DIVIDE          [ shift and go to state 75 ]
  ! MOD             [ shift and go to state 76 ]
  ! POWER           [ shift and go to state 77 ]
  ! PLUS            [ shift and go to state 78 ]
  ! MINUS           [ shift and go to state 79 ]
  ! LESS            [ shift and go to state 80 ]
  ! GREATER         [ shift and go to state 81 ]
  ! GREATER_EQUAL   [ shift and go to state 82 ]
  ! LESS_EQUAL      [ shift and go to state 83 ]
  ! EQUALS          [ shift and go to state 84 ]
  ! DIFFERENT       [ shift and go to state 85 ]
  ! AND             [ shift and go to state 86 ]
  ! OR              [ shift and go to state 87 ]


state 89

    (46) expression -> L_PAREN expression . R_PAREN
    (32) expression -> expression . MULTIPLY expression
    (33) expression -> expression . DIVIDE expression
    (34) expression -> expression . MOD expression
    (35) expression -> expression . POWER expression
    (36) expression -> expression . PLUS expression
    (37) expression -> expression . MINUS expression
    (38) expression -> expression . LESS expression
    (39) expression -> expression . GREATER expression
    (40) expression -> expression . GREATER_EQUAL expression
    (41) expression -> expression . LESS_EQUAL expression
    (42) expression -> expression . EQUALS expression
    (43) expression -> expression . DIFFERENT expression
    (44) expression -> expression . AND expression
    (45) expression -> expression . OR expression

    R_PAREN         shift and go to state 114
    MULTIPLY        shift and go to state 74
    DIVIDE          shift and go to state 75
    MOD             shift and go to state 76
    POWER           shift and go to state 77
    PLUS            shift and go to state 78
    MINUS           shift and go to state 79
    LESS            shift and go to state 80
    GREATER         shift and go to state 81
    GREATER_EQUAL   shift and go to state 82
    LESS_EQUAL      shift and go to state 83
    EQUALS          shift and go to state 84
    DIFFERENT       shift and go to state 85
    AND             shift and go to state 86
    OR              shift and go to state 87


state 90

    (49) expression -> NOT expression .
    (32) expression -> expression . MULTIPLY expression
    (33) expression -> expression . DIVIDE expression
    (34) expression -> expression . MOD expression
    (35) expression -> expression . POWER expression
    (36) expression -> expression . PLUS expression
    (37) expression -> expression . MINUS expression
    (38) expression -> expression . LESS expression
    (39) expression -> expression . GREATER expression
    (40) expression -> expression . GREATER_EQUAL expression
    (41) expression -> expression . LESS_EQUAL expression
    (42) expression -> expression . EQUALS expression
    (43) expression -> expression . DIFFERENT expression
    (44) expression -> expression . AND expression
    (45) expression -> expression . OR expression

    MULTIPLY        reduce using rule 49 (expression -> NOT expression .)
    DIVIDE          reduce using rule 49 (expression -> NOT expression .)
    MOD             reduce using rule 49 (expression -> NOT expression .)
    POWER           reduce using rule 49 (expression -> NOT expression .)
    PLUS            reduce using rule 49 (expression -> NOT expression .)
    MINUS           reduce using rule 49 (expression -> NOT expression .)
    LESS            reduce using rule 49 (expression -> NOT expression .)
    GREATER         reduce using rule 49 (expression -> NOT expression .)
    GREATER_EQUAL   reduce using rule 49 (expression -> NOT expression .)
    LESS_EQUAL      reduce using rule 49 (expression -> NOT expression .)
    EQUALS          reduce using rule 49 (expression -> NOT expression .)
    DIFFERENT       reduce using rule 49 (expression -> NOT expression .)
    AND             reduce using rule 49 (expression -> NOT expression .)
    OR              reduce using rule 49 (expression -> NOT expression .)
    SEMICOLON       reduce using rule 49 (expression -> NOT expression .)
    R_PAREN         reduce using rule 49 (expression -> NOT expression .)
    COMMA           reduce using rule 49 (expression -> NOT expression .)
    R_BRACKET       reduce using rule 49 (expression -> NOT expression .)
    R_S_BRACKET     reduce using rule 49 (expression -> NOT expression .)
    L_BRACKET       reduce using rule 49 (expression -> NOT expression .)

  ! MULTIPLY        [ shift and go to state 74 ]
  ! DIVIDE          [ shift and go to state 75 ]
  ! MOD             [ shift and go to state 76 ]
  ! POWER           [ shift and go to state 77 ]
  ! PLUS            [ shift and go to state 78 ]
  ! MINUS           [ shift and go to state 79 ]
  ! LESS            [ shift and go to state 80 ]
  ! GREATER         [ shift and go to state 81 ]
  ! GREATER_EQUAL   [ shift and go to state 82 ]
  ! LESS_EQUAL      [ shift and go to state 83 ]
  ! EQUALS          [ shift and go to state 84 ]
  ! DIFFERENT       [ shift and go to state 85 ]
  ! AND             [ shift and go to state 86 ]
  ! OR              [ shift and go to state 87 ]


state 91

    (82) array -> L_BRACKET array_literal . R_BRACKET

    R_BRACKET       shift and go to state 115


state 92

    (83) array -> L_BRACKET R_BRACKET .

    MULTIPLY        reduce using rule 83 (array -> L_BRACKET R_BRACKET .)
    DIVIDE          reduce using rule 83 (array -> L_BRACKET R_BRACKET .)
    MOD             reduce using rule 83 (array -> L_BRACKET R_BRACKET .)
    POWER           reduce using rule 83 (array -> L_BRACKET R_BRACKET .)
    PLUS            reduce using rule 83 (array -> L_BRACKET R_BRACKET .)
    MINUS           reduce using rule 83 (array -> L_BRACKET R_BRACKET .)
    LESS            reduce using rule 83 (array -> L_BRACKET R_BRACKET .)
    GREATER         reduce using rule 83 (array -> L_BRACKET R_BRACKET .)
    GREATER_EQUAL   reduce using rule 83 (array -> L_BRACKET R_BRACKET .)
    LESS_EQUAL      reduce using rule 83 (array -> L_BRACKET R_BRACKET .)
    EQUALS          reduce using rule 83 (array -> L_BRACKET R_BRACKET .)
    DIFFERENT       reduce using rule 83 (array -> L_BRACKET R_BRACKET .)
    AND             reduce using rule 83 (array -> L_BRACKET R_BRACKET .)
    OR              reduce using rule 83 (array -> L_BRACKET R_BRACKET .)
    SEMICOLON       reduce using rule 83 (array -> L_BRACKET R_BRACKET .)
    R_PAREN         reduce using rule 83 (array -> L_BRACKET R_BRACKET .)
    COMMA           reduce using rule 83 (array -> L_BRACKET R_BRACKET .)
    R_BRACKET       reduce using rule 83 (array -> L_BRACKET R_BRACKET .)
    R_S_BRACKET     reduce using rule 83 (array -> L_BRACKET R_BRACKET .)
    L_BRACKET       reduce using rule 83 (array -> L_BRACKET R_BRACKET .)


state 93

    (84) array_literal -> expression . COMMA array_literal
    (85) array_literal -> expression .
    (32) expression -> expression . MULTIPLY expression
    (33) expression -> expression . DIVIDE expression
    (34) expression -> expression . MOD expression
    (35) expression -> expression . POWER expression
    (36) expression -> expression . PLUS expression
    (37) expression -> expression . MINUS expression
    (38) expression -> expression . LESS expression
    (39) expression -> expression . GREATER expression
    (40) expression -> expression . GREATER_EQUAL expression
    (41) expression -> expression . LESS_EQUAL expression
    (42) expression -> expression . EQUALS expression
    (43) expression -> expression . DIFFERENT expression
    (44) expression -> expression . AND expression
    (45) expression -> expression . OR expression

    COMMA           shift and go to state 116
    R_BRACKET       reduce using rule 85 (array_literal -> expression .)
    MULTIPLY        shift and go to state 74
    DIVIDE          shift and go to state 75
    MOD             shift and go to state 76
    POWER           shift and go to state 77
    PLUS            shift and go to state 78
    MINUS           shift and go to state 79
    LESS            shift and go to state 80
    GREATER         shift and go to state 81
    GREATER_EQUAL   shift and go to state 82
    LESS_EQUAL      shift and go to state 83
    EQUALS          shift and go to state 84
    DIFFERENT       shift and go to state 85
    AND             shift and go to state 86
    OR              shift and go to state 87


state 94

    (10) function -> FUNCTION ID L_PAREN parameter_list R_PAREN COLON type . L_BRACKET block R_BRACKET
    (11) function -> FUNCTION ID L_PAREN parameter_list R_PAREN COLON type . SEMICOLON

    L_BRACKET       shift and go to state 117
    SEMICOLON       shift and go to state 118


state 95

    (15) parameter -> MUTABLE_VARIABLE ID COLON type .

    COMMA           reduce using rule 15 (parameter -> MUTABLE_VARIABLE ID COLON type .)
    R_PAREN         reduce using rule 15 (parameter -> MUTABLE_VARIABLE ID COLON type .)


state 96

    (16) parameter -> IMMUTABLE_VARIABLE ID COLON type .

    COMMA           reduce using rule 16 (parameter -> IMMUTABLE_VARIABLE ID COLON type .)
    R_PAREN         reduce using rule 16 (parameter -> IMMUTABLE_VARIABLE ID COLON type .)


state 97

    (86) function_call -> ID L_PAREN arguments_list . R_PAREN

    R_PAREN         shift and go to state 119


state 98

    (87) arguments_list -> expression . COMMA arguments_list
    (88) arguments_list -> expression .
    (32) expression -> expression . MULTIPLY expression
    (33) expression -> expression . DIVIDE expression
    (34) expression -> expression . MOD expression
    (35) expression -> expression . POWER expression
    (36) expression -> expression . PLUS expression
    (37) expression -> expression . MINUS expression
    (38) expression -> expression . LESS expression
    (39) expression -> expression . GREATER expression
    (40) expression -> expression . GREATER_EQUAL expression
    (41) expression -> expression . LESS_EQUAL expression
    (42) expression -> expression . EQUALS expression
    (43) expression -> expression . DIFFERENT expression
    (44) expression -> expression . AND expression
    (45) expression -> expression . OR expression

    COMMA           shift and go to state 120
    R_PAREN         reduce using rule 88 (arguments_list -> expression .)
    MULTIPLY        shift and go to state 74
    DIVIDE          shift and go to state 75
    MOD             shift and go to state 76
    POWER           shift and go to state 77
    PLUS            shift and go to state 78
    MINUS           shift and go to state 79
    LESS            shift and go to state 80
    GREATER         shift and go to state 81
    GREATER_EQUAL   shift and go to state 82
    LESS_EQUAL      shift and go to state 83
    EQUALS          shift and go to state 84
    DIFFERENT       shift and go to state 85
    AND             shift and go to state 86
    OR              shift and go to state 87


state 99

    (80) temp -> L_S_BRACKET expression . R_S_BRACKET temp
    (81) temp -> L_S_BRACKET expression . R_S_BRACKET
    (32) expression -> expression . MULTIPLY expression
    (33) expression -> expression . DIVIDE expression
    (34) expression -> expression . MOD expression
    (35) expression -> expression . POWER expression
    (36) expression -> expression . PLUS expression
    (37) expression -> expression . MINUS expression
    (38) expression -> expression . LESS expression
    (39) expression -> expression . GREATER expression
    (40) expression -> expression . GREATER_EQUAL expression
    (41) expression -> expression . LESS_EQUAL expression
    (42) expression -> expression . EQUALS expression
    (43) expression -> expression . DIFFERENT expression
    (44) expression -> expression . AND expression
    (45) expression -> expression . OR expression

    R_S_BRACKET     shift and go to state 121
    MULTIPLY        shift and go to state 74
    DIVIDE          shift and go to state 75
    MOD             shift and go to state 76
    POWER           shift and go to state 77
    PLUS            shift and go to state 78
    MINUS           shift and go to state 79
    LESS            shift and go to state 80
    GREATER         shift and go to state 81
    GREATER_EQUAL   shift and go to state 82
    LESS_EQUAL      shift and go to state 83
    EQUALS          shift and go to state 84
    DIFFERENT       shift and go to state 85
    AND             shift and go to state 86
    OR              shift and go to state 87


state 100

    (32) expression -> expression MULTIPLY expression .
    (32) expression -> expression . MULTIPLY expression
    (33) expression -> expression . DIVIDE expression
    (34) expression -> expression . MOD expression
    (35) expression -> expression . POWER expression
    (36) expression -> expression . PLUS expression
    (37) expression -> expression . MINUS expression
    (38) expression -> expression . LESS expression
    (39) expression -> expression . GREATER expression
    (40) expression -> expression . GREATER_EQUAL expression
    (41) expression -> expression . LESS_EQUAL expression
    (42) expression -> expression . EQUALS expression
    (43) expression -> expression . DIFFERENT expression
    (44) expression -> expression . AND expression
    (45) expression -> expression . OR expression

    MULTIPLY        reduce using rule 32 (expression -> expression MULTIPLY expression .)
    DIVIDE          reduce using rule 32 (expression -> expression MULTIPLY expression .)
    MOD             reduce using rule 32 (expression -> expression MULTIPLY expression .)
    PLUS            reduce using rule 32 (expression -> expression MULTIPLY expression .)
    MINUS           reduce using rule 32 (expression -> expression MULTIPLY expression .)
    SEMICOLON       reduce using rule 32 (expression -> expression MULTIPLY expression .)
    R_PAREN         reduce using rule 32 (expression -> expression MULTIPLY expression .)
    COMMA           reduce using rule 32 (expression -> expression MULTIPLY expression .)
    R_BRACKET       reduce using rule 32 (expression -> expression MULTIPLY expression .)
    R_S_BRACKET     reduce using rule 32 (expression -> expression MULTIPLY expression .)
    L_BRACKET       reduce using rule 32 (expression -> expression MULTIPLY expression .)
    POWER           shift and go to state 77
    LESS            shift and go to state 80
    GREATER         shift and go to state 81
    GREATER_EQUAL   shift and go to state 82
    LESS_EQUAL      shift and go to state 83
    EQUALS          shift and go to state 84
    DIFFERENT       shift and go to state 85
    AND             shift and go to state 86
    OR              shift and go to state 87

  ! POWER           [ reduce using rule 32 (expression -> expression MULTIPLY expression .) ]
  ! LESS            [ reduce using rule 32 (expression -> expression MULTIPLY expression .) ]
  ! GREATER         [ reduce using rule 32 (expression -> expression MULTIPLY expression .) ]
  ! GREATER_EQUAL   [ reduce using rule 32 (expression -> expression MULTIPLY expression .) ]
  ! LESS_EQUAL      [ reduce using rule 32 (expression -> expression MULTIPLY expression .) ]
  ! EQUALS          [ reduce using rule 32 (expression -> expression MULTIPLY expression .) ]
  ! DIFFERENT       [ reduce using rule 32 (expression -> expression MULTIPLY expression .) ]
  ! AND             [ reduce using rule 32 (expression -> expression MULTIPLY expression .) ]
  ! OR              [ reduce using rule 32 (expression -> expression MULTIPLY expression .) ]
  ! MULTIPLY        [ shift and go to state 74 ]
  ! DIVIDE          [ shift and go to state 75 ]
  ! MOD             [ shift and go to state 76 ]
  ! PLUS            [ shift and go to state 78 ]
  ! MINUS           [ shift and go to state 79 ]


state 101

    (33) expression -> expression DIVIDE expression .
    (32) expression -> expression . MULTIPLY expression
    (33) expression -> expression . DIVIDE expression
    (34) expression -> expression . MOD expression
    (35) expression -> expression . POWER expression
    (36) expression -> expression . PLUS expression
    (37) expression -> expression . MINUS expression
    (38) expression -> expression . LESS expression
    (39) expression -> expression . GREATER expression
    (40) expression -> expression . GREATER_EQUAL expression
    (41) expression -> expression . LESS_EQUAL expression
    (42) expression -> expression . EQUALS expression
    (43) expression -> expression . DIFFERENT expression
    (44) expression -> expression . AND expression
    (45) expression -> expression . OR expression

    MULTIPLY        reduce using rule 33 (expression -> expression DIVIDE expression .)
    DIVIDE          reduce using rule 33 (expression -> expression DIVIDE expression .)
    MOD             reduce using rule 33 (expression -> expression DIVIDE expression .)
    PLUS            reduce using rule 33 (expression -> expression DIVIDE expression .)
    MINUS           reduce using rule 33 (expression -> expression DIVIDE expression .)
    SEMICOLON       reduce using rule 33 (expression -> expression DIVIDE expression .)
    R_PAREN         reduce using rule 33 (expression -> expression DIVIDE expression .)
    COMMA           reduce using rule 33 (expression -> expression DIVIDE expression .)
    R_BRACKET       reduce using rule 33 (expression -> expression DIVIDE expression .)
    R_S_BRACKET     reduce using rule 33 (expression -> expression DIVIDE expression .)
    L_BRACKET       reduce using rule 33 (expression -> expression DIVIDE expression .)
    POWER           shift and go to state 77
    LESS            shift and go to state 80
    GREATER         shift and go to state 81
    GREATER_EQUAL   shift and go to state 82
    LESS_EQUAL      shift and go to state 83
    EQUALS          shift and go to state 84
    DIFFERENT       shift and go to state 85
    AND             shift and go to state 86
    OR              shift and go to state 87

  ! POWER           [ reduce using rule 33 (expression -> expression DIVIDE expression .) ]
  ! LESS            [ reduce using rule 33 (expression -> expression DIVIDE expression .) ]
  ! GREATER         [ reduce using rule 33 (expression -> expression DIVIDE expression .) ]
  ! GREATER_EQUAL   [ reduce using rule 33 (expression -> expression DIVIDE expression .) ]
  ! LESS_EQUAL      [ reduce using rule 33 (expression -> expression DIVIDE expression .) ]
  ! EQUALS          [ reduce using rule 33 (expression -> expression DIVIDE expression .) ]
  ! DIFFERENT       [ reduce using rule 33 (expression -> expression DIVIDE expression .) ]
  ! AND             [ reduce using rule 33 (expression -> expression DIVIDE expression .) ]
  ! OR              [ reduce using rule 33 (expression -> expression DIVIDE expression .) ]
  ! MULTIPLY        [ shift and go to state 74 ]
  ! DIVIDE          [ shift and go to state 75 ]
  ! MOD             [ shift and go to state 76 ]
  ! PLUS            [ shift and go to state 78 ]
  ! MINUS           [ shift and go to state 79 ]


state 102

    (34) expression -> expression MOD expression .
    (32) expression -> expression . MULTIPLY expression
    (33) expression -> expression . DIVIDE expression
    (34) expression -> expression . MOD expression
    (35) expression -> expression . POWER expression
    (36) expression -> expression . PLUS expression
    (37) expression -> expression . MINUS expression
    (38) expression -> expression . LESS expression
    (39) expression -> expression . GREATER expression
    (40) expression -> expression . GREATER_EQUAL expression
    (41) expression -> expression . LESS_EQUAL expression
    (42) expression -> expression . EQUALS expression
    (43) expression -> expression . DIFFERENT expression
    (44) expression -> expression . AND expression
    (45) expression -> expression . OR expression

    MULTIPLY        reduce using rule 34 (expression -> expression MOD expression .)
    DIVIDE          reduce using rule 34 (expression -> expression MOD expression .)
    MOD             reduce using rule 34 (expression -> expression MOD expression .)
    PLUS            reduce using rule 34 (expression -> expression MOD expression .)
    MINUS           reduce using rule 34 (expression -> expression MOD expression .)
    SEMICOLON       reduce using rule 34 (expression -> expression MOD expression .)
    R_PAREN         reduce using rule 34 (expression -> expression MOD expression .)
    COMMA           reduce using rule 34 (expression -> expression MOD expression .)
    R_BRACKET       reduce using rule 34 (expression -> expression MOD expression .)
    R_S_BRACKET     reduce using rule 34 (expression -> expression MOD expression .)
    L_BRACKET       reduce using rule 34 (expression -> expression MOD expression .)
    POWER           shift and go to state 77
    LESS            shift and go to state 80
    GREATER         shift and go to state 81
    GREATER_EQUAL   shift and go to state 82
    LESS_EQUAL      shift and go to state 83
    EQUALS          shift and go to state 84
    DIFFERENT       shift and go to state 85
    AND             shift and go to state 86
    OR              shift and go to state 87

  ! POWER           [ reduce using rule 34 (expression -> expression MOD expression .) ]
  ! LESS            [ reduce using rule 34 (expression -> expression MOD expression .) ]
  ! GREATER         [ reduce using rule 34 (expression -> expression MOD expression .) ]
  ! GREATER_EQUAL   [ reduce using rule 34 (expression -> expression MOD expression .) ]
  ! LESS_EQUAL      [ reduce using rule 34 (expression -> expression MOD expression .) ]
  ! EQUALS          [ reduce using rule 34 (expression -> expression MOD expression .) ]
  ! DIFFERENT       [ reduce using rule 34 (expression -> expression MOD expression .) ]
  ! AND             [ reduce using rule 34 (expression -> expression MOD expression .) ]
  ! OR              [ reduce using rule 34 (expression -> expression MOD expression .) ]
  ! MULTIPLY        [ shift and go to state 74 ]
  ! DIVIDE          [ shift and go to state 75 ]
  ! MOD             [ shift and go to state 76 ]
  ! PLUS            [ shift and go to state 78 ]
  ! MINUS           [ shift and go to state 79 ]


state 103

    (35) expression -> expression POWER expression .
    (32) expression -> expression . MULTIPLY expression
    (33) expression -> expression . DIVIDE expression
    (34) expression -> expression . MOD expression
    (35) expression -> expression . POWER expression
    (36) expression -> expression . PLUS expression
    (37) expression -> expression . MINUS expression
    (38) expression -> expression . LESS expression
    (39) expression -> expression . GREATER expression
    (40) expression -> expression . GREATER_EQUAL expression
    (41) expression -> expression . LESS_EQUAL expression
    (42) expression -> expression . EQUALS expression
    (43) expression -> expression . DIFFERENT expression
    (44) expression -> expression . AND expression
    (45) expression -> expression . OR expression

    MULTIPLY        reduce using rule 35 (expression -> expression POWER expression .)
    DIVIDE          reduce using rule 35 (expression -> expression POWER expression .)
    MOD             reduce using rule 35 (expression -> expression POWER expression .)
    PLUS            reduce using rule 35 (expression -> expression POWER expression .)
    MINUS           reduce using rule 35 (expression -> expression POWER expression .)
    SEMICOLON       reduce using rule 35 (expression -> expression POWER expression .)
    R_PAREN         reduce using rule 35 (expression -> expression POWER expression .)
    COMMA           reduce using rule 35 (expression -> expression POWER expression .)
    R_BRACKET       reduce using rule 35 (expression -> expression POWER expression .)
    R_S_BRACKET     reduce using rule 35 (expression -> expression POWER expression .)
    L_BRACKET       reduce using rule 35 (expression -> expression POWER expression .)
    POWER           shift and go to state 77
    LESS            shift and go to state 80
    GREATER         shift and go to state 81
    GREATER_EQUAL   shift and go to state 82
    LESS_EQUAL      shift and go to state 83
    EQUALS          shift and go to state 84
    DIFFERENT       shift and go to state 85
    AND             shift and go to state 86
    OR              shift and go to state 87

  ! POWER           [ reduce using rule 35 (expression -> expression POWER expression .) ]
  ! LESS            [ reduce using rule 35 (expression -> expression POWER expression .) ]
  ! GREATER         [ reduce using rule 35 (expression -> expression POWER expression .) ]
  ! GREATER_EQUAL   [ reduce using rule 35 (expression -> expression POWER expression .) ]
  ! LESS_EQUAL      [ reduce using rule 35 (expression -> expression POWER expression .) ]
  ! EQUALS          [ reduce using rule 35 (expression -> expression POWER expression .) ]
  ! DIFFERENT       [ reduce using rule 35 (expression -> expression POWER expression .) ]
  ! AND             [ reduce using rule 35 (expression -> expression POWER expression .) ]
  ! OR              [ reduce using rule 35 (expression -> expression POWER expression .) ]
  ! MULTIPLY        [ shift and go to state 74 ]
  ! DIVIDE          [ shift and go to state 75 ]
  ! MOD             [ shift and go to state 76 ]
  ! PLUS            [ shift and go to state 78 ]
  ! MINUS           [ shift and go to state 79 ]


state 104

    (36) expression -> expression PLUS expression .
    (32) expression -> expression . MULTIPLY expression
    (33) expression -> expression . DIVIDE expression
    (34) expression -> expression . MOD expression
    (35) expression -> expression . POWER expression
    (36) expression -> expression . PLUS expression
    (37) expression -> expression . MINUS expression
    (38) expression -> expression . LESS expression
    (39) expression -> expression . GREATER expression
    (40) expression -> expression . GREATER_EQUAL expression
    (41) expression -> expression . LESS_EQUAL expression
    (42) expression -> expression . EQUALS expression
    (43) expression -> expression . DIFFERENT expression
    (44) expression -> expression . AND expression
    (45) expression -> expression . OR expression

    PLUS            reduce using rule 36 (expression -> expression PLUS expression .)
    MINUS           reduce using rule 36 (expression -> expression PLUS expression .)
    SEMICOLON       reduce using rule 36 (expression -> expression PLUS expression .)
    R_PAREN         reduce using rule 36 (expression -> expression PLUS expression .)
    COMMA           reduce using rule 36 (expression -> expression PLUS expression .)
    R_BRACKET       reduce using rule 36 (expression -> expression PLUS expression .)
    R_S_BRACKET     reduce using rule 36 (expression -> expression PLUS expression .)
    L_BRACKET       reduce using rule 36 (expression -> expression PLUS expression .)
    MULTIPLY        shift and go to state 74
    DIVIDE          shift and go to state 75
    MOD             shift and go to state 76
    POWER           shift and go to state 77
    LESS            shift and go to state 80
    GREATER         shift and go to state 81
    GREATER_EQUAL   shift and go to state 82
    LESS_EQUAL      shift and go to state 83
    EQUALS          shift and go to state 84
    DIFFERENT       shift and go to state 85
    AND             shift and go to state 86
    OR              shift and go to state 87

  ! MULTIPLY        [ reduce using rule 36 (expression -> expression PLUS expression .) ]
  ! DIVIDE          [ reduce using rule 36 (expression -> expression PLUS expression .) ]
  ! MOD             [ reduce using rule 36 (expression -> expression PLUS expression .) ]
  ! POWER           [ reduce using rule 36 (expression -> expression PLUS expression .) ]
  ! LESS            [ reduce using rule 36 (expression -> expression PLUS expression .) ]
  ! GREATER         [ reduce using rule 36 (expression -> expression PLUS expression .) ]
  ! GREATER_EQUAL   [ reduce using rule 36 (expression -> expression PLUS expression .) ]
  ! LESS_EQUAL      [ reduce using rule 36 (expression -> expression PLUS expression .) ]
  ! EQUALS          [ reduce using rule 36 (expression -> expression PLUS expression .) ]
  ! DIFFERENT       [ reduce using rule 36 (expression -> expression PLUS expression .) ]
  ! AND             [ reduce using rule 36 (expression -> expression PLUS expression .) ]
  ! OR              [ reduce using rule 36 (expression -> expression PLUS expression .) ]
  ! PLUS            [ shift and go to state 78 ]
  ! MINUS           [ shift and go to state 79 ]


state 105

    (37) expression -> expression MINUS expression .
    (32) expression -> expression . MULTIPLY expression
    (33) expression -> expression . DIVIDE expression
    (34) expression -> expression . MOD expression
    (35) expression -> expression . POWER expression
    (36) expression -> expression . PLUS expression
    (37) expression -> expression . MINUS expression
    (38) expression -> expression . LESS expression
    (39) expression -> expression . GREATER expression
    (40) expression -> expression . GREATER_EQUAL expression
    (41) expression -> expression . LESS_EQUAL expression
    (42) expression -> expression . EQUALS expression
    (43) expression -> expression . DIFFERENT expression
    (44) expression -> expression . AND expression
    (45) expression -> expression . OR expression

    PLUS            reduce using rule 37 (expression -> expression MINUS expression .)
    MINUS           reduce using rule 37 (expression -> expression MINUS expression .)
    SEMICOLON       reduce using rule 37 (expression -> expression MINUS expression .)
    R_PAREN         reduce using rule 37 (expression -> expression MINUS expression .)
    COMMA           reduce using rule 37 (expression -> expression MINUS expression .)
    R_BRACKET       reduce using rule 37 (expression -> expression MINUS expression .)
    R_S_BRACKET     reduce using rule 37 (expression -> expression MINUS expression .)
    L_BRACKET       reduce using rule 37 (expression -> expression MINUS expression .)
    MULTIPLY        shift and go to state 74
    DIVIDE          shift and go to state 75
    MOD             shift and go to state 76
    POWER           shift and go to state 77
    LESS            shift and go to state 80
    GREATER         shift and go to state 81
    GREATER_EQUAL   shift and go to state 82
    LESS_EQUAL      shift and go to state 83
    EQUALS          shift and go to state 84
    DIFFERENT       shift and go to state 85
    AND             shift and go to state 86
    OR              shift and go to state 87

  ! MULTIPLY        [ reduce using rule 37 (expression -> expression MINUS expression .) ]
  ! DIVIDE          [ reduce using rule 37 (expression -> expression MINUS expression .) ]
  ! MOD             [ reduce using rule 37 (expression -> expression MINUS expression .) ]
  ! POWER           [ reduce using rule 37 (expression -> expression MINUS expression .) ]
  ! LESS            [ reduce using rule 37 (expression -> expression MINUS expression .) ]
  ! GREATER         [ reduce using rule 37 (expression -> expression MINUS expression .) ]
  ! GREATER_EQUAL   [ reduce using rule 37 (expression -> expression MINUS expression .) ]
  ! LESS_EQUAL      [ reduce using rule 37 (expression -> expression MINUS expression .) ]
  ! EQUALS          [ reduce using rule 37 (expression -> expression MINUS expression .) ]
  ! DIFFERENT       [ reduce using rule 37 (expression -> expression MINUS expression .) ]
  ! AND             [ reduce using rule 37 (expression -> expression MINUS expression .) ]
  ! OR              [ reduce using rule 37 (expression -> expression MINUS expression .) ]
  ! PLUS            [ shift and go to state 78 ]
  ! MINUS           [ shift and go to state 79 ]


state 106

    (38) expression -> expression LESS expression .
    (32) expression -> expression . MULTIPLY expression
    (33) expression -> expression . DIVIDE expression
    (34) expression -> expression . MOD expression
    (35) expression -> expression . POWER expression
    (36) expression -> expression . PLUS expression
    (37) expression -> expression . MINUS expression
    (38) expression -> expression . LESS expression
    (39) expression -> expression . GREATER expression
    (40) expression -> expression . GREATER_EQUAL expression
    (41) expression -> expression . LESS_EQUAL expression
    (42) expression -> expression . EQUALS expression
    (43) expression -> expression . DIFFERENT expression
    (44) expression -> expression . AND expression
    (45) expression -> expression . OR expression

    MULTIPLY        reduce using rule 38 (expression -> expression LESS expression .)
    DIVIDE          reduce using rule 38 (expression -> expression LESS expression .)
    MOD             reduce using rule 38 (expression -> expression LESS expression .)
    POWER           reduce using rule 38 (expression -> expression LESS expression .)
    PLUS            reduce using rule 38 (expression -> expression LESS expression .)
    MINUS           reduce using rule 38 (expression -> expression LESS expression .)
    LESS            reduce using rule 38 (expression -> expression LESS expression .)
    GREATER         reduce using rule 38 (expression -> expression LESS expression .)
    GREATER_EQUAL   reduce using rule 38 (expression -> expression LESS expression .)
    LESS_EQUAL      reduce using rule 38 (expression -> expression LESS expression .)
    EQUALS          reduce using rule 38 (expression -> expression LESS expression .)
    DIFFERENT       reduce using rule 38 (expression -> expression LESS expression .)
    SEMICOLON       reduce using rule 38 (expression -> expression LESS expression .)
    R_PAREN         reduce using rule 38 (expression -> expression LESS expression .)
    COMMA           reduce using rule 38 (expression -> expression LESS expression .)
    R_BRACKET       reduce using rule 38 (expression -> expression LESS expression .)
    R_S_BRACKET     reduce using rule 38 (expression -> expression LESS expression .)
    L_BRACKET       reduce using rule 38 (expression -> expression LESS expression .)
    AND             shift and go to state 86
    OR              shift and go to state 87

  ! AND             [ reduce using rule 38 (expression -> expression LESS expression .) ]
  ! OR              [ reduce using rule 38 (expression -> expression LESS expression .) ]
  ! MULTIPLY        [ shift and go to state 74 ]
  ! DIVIDE          [ shift and go to state 75 ]
  ! MOD             [ shift and go to state 76 ]
  ! POWER           [ shift and go to state 77 ]
  ! PLUS            [ shift and go to state 78 ]
  ! MINUS           [ shift and go to state 79 ]
  ! LESS            [ shift and go to state 80 ]
  ! GREATER         [ shift and go to state 81 ]
  ! GREATER_EQUAL   [ shift and go to state 82 ]
  ! LESS_EQUAL      [ shift and go to state 83 ]
  ! EQUALS          [ shift and go to state 84 ]
  ! DIFFERENT       [ shift and go to state 85 ]


state 107

    (39) expression -> expression GREATER expression .
    (32) expression -> expression . MULTIPLY expression
    (33) expression -> expression . DIVIDE expression
    (34) expression -> expression . MOD expression
    (35) expression -> expression . POWER expression
    (36) expression -> expression . PLUS expression
    (37) expression -> expression . MINUS expression
    (38) expression -> expression . LESS expression
    (39) expression -> expression . GREATER expression
    (40) expression -> expression . GREATER_EQUAL expression
    (41) expression -> expression . LESS_EQUAL expression
    (42) expression -> expression . EQUALS expression
    (43) expression -> expression . DIFFERENT expression
    (44) expression -> expression . AND expression
    (45) expression -> expression . OR expression

    MULTIPLY        reduce using rule 39 (expression -> expression GREATER expression .)
    DIVIDE          reduce using rule 39 (expression -> expression GREATER expression .)
    MOD             reduce using rule 39 (expression -> expression GREATER expression .)
    POWER           reduce using rule 39 (expression -> expression GREATER expression .)
    PLUS            reduce using rule 39 (expression -> expression GREATER expression .)
    MINUS           reduce using rule 39 (expression -> expression GREATER expression .)
    LESS            reduce using rule 39 (expression -> expression GREATER expression .)
    GREATER         reduce using rule 39 (expression -> expression GREATER expression .)
    GREATER_EQUAL   reduce using rule 39 (expression -> expression GREATER expression .)
    LESS_EQUAL      reduce using rule 39 (expression -> expression GREATER expression .)
    EQUALS          reduce using rule 39 (expression -> expression GREATER expression .)
    DIFFERENT       reduce using rule 39 (expression -> expression GREATER expression .)
    SEMICOLON       reduce using rule 39 (expression -> expression GREATER expression .)
    R_PAREN         reduce using rule 39 (expression -> expression GREATER expression .)
    COMMA           reduce using rule 39 (expression -> expression GREATER expression .)
    R_BRACKET       reduce using rule 39 (expression -> expression GREATER expression .)
    R_S_BRACKET     reduce using rule 39 (expression -> expression GREATER expression .)
    L_BRACKET       reduce using rule 39 (expression -> expression GREATER expression .)
    AND             shift and go to state 86
    OR              shift and go to state 87

  ! AND             [ reduce using rule 39 (expression -> expression GREATER expression .) ]
  ! OR              [ reduce using rule 39 (expression -> expression GREATER expression .) ]
  ! MULTIPLY        [ shift and go to state 74 ]
  ! DIVIDE          [ shift and go to state 75 ]
  ! MOD             [ shift and go to state 76 ]
  ! POWER           [ shift and go to state 77 ]
  ! PLUS            [ shift and go to state 78 ]
  ! MINUS           [ shift and go to state 79 ]
  ! LESS            [ shift and go to state 80 ]
  ! GREATER         [ shift and go to state 81 ]
  ! GREATER_EQUAL   [ shift and go to state 82 ]
  ! LESS_EQUAL      [ shift and go to state 83 ]
  ! EQUALS          [ shift and go to state 84 ]
  ! DIFFERENT       [ shift and go to state 85 ]


state 108

    (40) expression -> expression GREATER_EQUAL expression .
    (32) expression -> expression . MULTIPLY expression
    (33) expression -> expression . DIVIDE expression
    (34) expression -> expression . MOD expression
    (35) expression -> expression . POWER expression
    (36) expression -> expression . PLUS expression
    (37) expression -> expression . MINUS expression
    (38) expression -> expression . LESS expression
    (39) expression -> expression . GREATER expression
    (40) expression -> expression . GREATER_EQUAL expression
    (41) expression -> expression . LESS_EQUAL expression
    (42) expression -> expression . EQUALS expression
    (43) expression -> expression . DIFFERENT expression
    (44) expression -> expression . AND expression
    (45) expression -> expression . OR expression

    MULTIPLY        reduce using rule 40 (expression -> expression GREATER_EQUAL expression .)
    DIVIDE          reduce using rule 40 (expression -> expression GREATER_EQUAL expression .)
    MOD             reduce using rule 40 (expression -> expression GREATER_EQUAL expression .)
    POWER           reduce using rule 40 (expression -> expression GREATER_EQUAL expression .)
    PLUS            reduce using rule 40 (expression -> expression GREATER_EQUAL expression .)
    MINUS           reduce using rule 40 (expression -> expression GREATER_EQUAL expression .)
    LESS            reduce using rule 40 (expression -> expression GREATER_EQUAL expression .)
    GREATER         reduce using rule 40 (expression -> expression GREATER_EQUAL expression .)
    GREATER_EQUAL   reduce using rule 40 (expression -> expression GREATER_EQUAL expression .)
    LESS_EQUAL      reduce using rule 40 (expression -> expression GREATER_EQUAL expression .)
    EQUALS          reduce using rule 40 (expression -> expression GREATER_EQUAL expression .)
    DIFFERENT       reduce using rule 40 (expression -> expression GREATER_EQUAL expression .)
    SEMICOLON       reduce using rule 40 (expression -> expression GREATER_EQUAL expression .)
    R_PAREN         reduce using rule 40 (expression -> expression GREATER_EQUAL expression .)
    COMMA           reduce using rule 40 (expression -> expression GREATER_EQUAL expression .)
    R_BRACKET       reduce using rule 40 (expression -> expression GREATER_EQUAL expression .)
    R_S_BRACKET     reduce using rule 40 (expression -> expression GREATER_EQUAL expression .)
    L_BRACKET       reduce using rule 40 (expression -> expression GREATER_EQUAL expression .)
    AND             shift and go to state 86
    OR              shift and go to state 87

  ! AND             [ reduce using rule 40 (expression -> expression GREATER_EQUAL expression .) ]
  ! OR              [ reduce using rule 40 (expression -> expression GREATER_EQUAL expression .) ]
  ! MULTIPLY        [ shift and go to state 74 ]
  ! DIVIDE          [ shift and go to state 75 ]
  ! MOD             [ shift and go to state 76 ]
  ! POWER           [ shift and go to state 77 ]
  ! PLUS            [ shift and go to state 78 ]
  ! MINUS           [ shift and go to state 79 ]
  ! LESS            [ shift and go to state 80 ]
  ! GREATER         [ shift and go to state 81 ]
  ! GREATER_EQUAL   [ shift and go to state 82 ]
  ! LESS_EQUAL      [ shift and go to state 83 ]
  ! EQUALS          [ shift and go to state 84 ]
  ! DIFFERENT       [ shift and go to state 85 ]


state 109

    (41) expression -> expression LESS_EQUAL expression .
    (32) expression -> expression . MULTIPLY expression
    (33) expression -> expression . DIVIDE expression
    (34) expression -> expression . MOD expression
    (35) expression -> expression . POWER expression
    (36) expression -> expression . PLUS expression
    (37) expression -> expression . MINUS expression
    (38) expression -> expression . LESS expression
    (39) expression -> expression . GREATER expression
    (40) expression -> expression . GREATER_EQUAL expression
    (41) expression -> expression . LESS_EQUAL expression
    (42) expression -> expression . EQUALS expression
    (43) expression -> expression . DIFFERENT expression
    (44) expression -> expression . AND expression
    (45) expression -> expression . OR expression

    MULTIPLY        reduce using rule 41 (expression -> expression LESS_EQUAL expression .)
    DIVIDE          reduce using rule 41 (expression -> expression LESS_EQUAL expression .)
    MOD             reduce using rule 41 (expression -> expression LESS_EQUAL expression .)
    POWER           reduce using rule 41 (expression -> expression LESS_EQUAL expression .)
    PLUS            reduce using rule 41 (expression -> expression LESS_EQUAL expression .)
    MINUS           reduce using rule 41 (expression -> expression LESS_EQUAL expression .)
    LESS            reduce using rule 41 (expression -> expression LESS_EQUAL expression .)
    GREATER         reduce using rule 41 (expression -> expression LESS_EQUAL expression .)
    GREATER_EQUAL   reduce using rule 41 (expression -> expression LESS_EQUAL expression .)
    LESS_EQUAL      reduce using rule 41 (expression -> expression LESS_EQUAL expression .)
    EQUALS          reduce using rule 41 (expression -> expression LESS_EQUAL expression .)
    DIFFERENT       reduce using rule 41 (expression -> expression LESS_EQUAL expression .)
    SEMICOLON       reduce using rule 41 (expression -> expression LESS_EQUAL expression .)
    R_PAREN         reduce using rule 41 (expression -> expression LESS_EQUAL expression .)
    COMMA           reduce using rule 41 (expression -> expression LESS_EQUAL expression .)
    R_BRACKET       reduce using rule 41 (expression -> expression LESS_EQUAL expression .)
    R_S_BRACKET     reduce using rule 41 (expression -> expression LESS_EQUAL expression .)
    L_BRACKET       reduce using rule 41 (expression -> expression LESS_EQUAL expression .)
    AND             shift and go to state 86
    OR              shift and go to state 87

  ! AND             [ reduce using rule 41 (expression -> expression LESS_EQUAL expression .) ]
  ! OR              [ reduce using rule 41 (expression -> expression LESS_EQUAL expression .) ]
  ! MULTIPLY        [ shift and go to state 74 ]
  ! DIVIDE          [ shift and go to state 75 ]
  ! MOD             [ shift and go to state 76 ]
  ! POWER           [ shift and go to state 77 ]
  ! PLUS            [ shift and go to state 78 ]
  ! MINUS           [ shift and go to state 79 ]
  ! LESS            [ shift and go to state 80 ]
  ! GREATER         [ shift and go to state 81 ]
  ! GREATER_EQUAL   [ shift and go to state 82 ]
  ! LESS_EQUAL      [ shift and go to state 83 ]
  ! EQUALS          [ shift and go to state 84 ]
  ! DIFFERENT       [ shift and go to state 85 ]


state 110

    (42) expression -> expression EQUALS expression .
    (32) expression -> expression . MULTIPLY expression
    (33) expression -> expression . DIVIDE expression
    (34) expression -> expression . MOD expression
    (35) expression -> expression . POWER expression
    (36) expression -> expression . PLUS expression
    (37) expression -> expression . MINUS expression
    (38) expression -> expression . LESS expression
    (39) expression -> expression . GREATER expression
    (40) expression -> expression . GREATER_EQUAL expression
    (41) expression -> expression . LESS_EQUAL expression
    (42) expression -> expression . EQUALS expression
    (43) expression -> expression . DIFFERENT expression
    (44) expression -> expression . AND expression
    (45) expression -> expression . OR expression

    MULTIPLY        reduce using rule 42 (expression -> expression EQUALS expression .)
    DIVIDE          reduce using rule 42 (expression -> expression EQUALS expression .)
    MOD             reduce using rule 42 (expression -> expression EQUALS expression .)
    POWER           reduce using rule 42 (expression -> expression EQUALS expression .)
    PLUS            reduce using rule 42 (expression -> expression EQUALS expression .)
    MINUS           reduce using rule 42 (expression -> expression EQUALS expression .)
    LESS            reduce using rule 42 (expression -> expression EQUALS expression .)
    GREATER         reduce using rule 42 (expression -> expression EQUALS expression .)
    GREATER_EQUAL   reduce using rule 42 (expression -> expression EQUALS expression .)
    LESS_EQUAL      reduce using rule 42 (expression -> expression EQUALS expression .)
    EQUALS          reduce using rule 42 (expression -> expression EQUALS expression .)
    DIFFERENT       reduce using rule 42 (expression -> expression EQUALS expression .)
    SEMICOLON       reduce using rule 42 (expression -> expression EQUALS expression .)
    R_PAREN         reduce using rule 42 (expression -> expression EQUALS expression .)
    COMMA           reduce using rule 42 (expression -> expression EQUALS expression .)
    R_BRACKET       reduce using rule 42 (expression -> expression EQUALS expression .)
    R_S_BRACKET     reduce using rule 42 (expression -> expression EQUALS expression .)
    L_BRACKET       reduce using rule 42 (expression -> expression EQUALS expression .)
    AND             shift and go to state 86
    OR              shift and go to state 87

  ! AND             [ reduce using rule 42 (expression -> expression EQUALS expression .) ]
  ! OR              [ reduce using rule 42 (expression -> expression EQUALS expression .) ]
  ! MULTIPLY        [ shift and go to state 74 ]
  ! DIVIDE          [ shift and go to state 75 ]
  ! MOD             [ shift and go to state 76 ]
  ! POWER           [ shift and go to state 77 ]
  ! PLUS            [ shift and go to state 78 ]
  ! MINUS           [ shift and go to state 79 ]
  ! LESS            [ shift and go to state 80 ]
  ! GREATER         [ shift and go to state 81 ]
  ! GREATER_EQUAL   [ shift and go to state 82 ]
  ! LESS_EQUAL      [ shift and go to state 83 ]
  ! EQUALS          [ shift and go to state 84 ]
  ! DIFFERENT       [ shift and go to state 85 ]


state 111

    (43) expression -> expression DIFFERENT expression .
    (32) expression -> expression . MULTIPLY expression
    (33) expression -> expression . DIVIDE expression
    (34) expression -> expression . MOD expression
    (35) expression -> expression . POWER expression
    (36) expression -> expression . PLUS expression
    (37) expression -> expression . MINUS expression
    (38) expression -> expression . LESS expression
    (39) expression -> expression . GREATER expression
    (40) expression -> expression . GREATER_EQUAL expression
    (41) expression -> expression . LESS_EQUAL expression
    (42) expression -> expression . EQUALS expression
    (43) expression -> expression . DIFFERENT expression
    (44) expression -> expression . AND expression
    (45) expression -> expression . OR expression

    MULTIPLY        reduce using rule 43 (expression -> expression DIFFERENT expression .)
    DIVIDE          reduce using rule 43 (expression -> expression DIFFERENT expression .)
    MOD             reduce using rule 43 (expression -> expression DIFFERENT expression .)
    POWER           reduce using rule 43 (expression -> expression DIFFERENT expression .)
    PLUS            reduce using rule 43 (expression -> expression DIFFERENT expression .)
    MINUS           reduce using rule 43 (expression -> expression DIFFERENT expression .)
    LESS            reduce using rule 43 (expression -> expression DIFFERENT expression .)
    GREATER         reduce using rule 43 (expression -> expression DIFFERENT expression .)
    GREATER_EQUAL   reduce using rule 43 (expression -> expression DIFFERENT expression .)
    LESS_EQUAL      reduce using rule 43 (expression -> expression DIFFERENT expression .)
    EQUALS          reduce using rule 43 (expression -> expression DIFFERENT expression .)
    DIFFERENT       reduce using rule 43 (expression -> expression DIFFERENT expression .)
    SEMICOLON       reduce using rule 43 (expression -> expression DIFFERENT expression .)
    R_PAREN         reduce using rule 43 (expression -> expression DIFFERENT expression .)
    COMMA           reduce using rule 43 (expression -> expression DIFFERENT expression .)
    R_BRACKET       reduce using rule 43 (expression -> expression DIFFERENT expression .)
    R_S_BRACKET     reduce using rule 43 (expression -> expression DIFFERENT expression .)
    L_BRACKET       reduce using rule 43 (expression -> expression DIFFERENT expression .)
    AND             shift and go to state 86
    OR              shift and go to state 87

  ! AND             [ reduce using rule 43 (expression -> expression DIFFERENT expression .) ]
  ! OR              [ reduce using rule 43 (expression -> expression DIFFERENT expression .) ]
  ! MULTIPLY        [ shift and go to state 74 ]
  ! DIVIDE          [ shift and go to state 75 ]
  ! MOD             [ shift and go to state 76 ]
  ! POWER           [ shift and go to state 77 ]
  ! PLUS            [ shift and go to state 78 ]
  ! MINUS           [ shift and go to state 79 ]
  ! LESS            [ shift and go to state 80 ]
  ! GREATER         [ shift and go to state 81 ]
  ! GREATER_EQUAL   [ shift and go to state 82 ]
  ! LESS_EQUAL      [ shift and go to state 83 ]
  ! EQUALS          [ shift and go to state 84 ]
  ! DIFFERENT       [ shift and go to state 85 ]


state 112

    (44) expression -> expression AND expression .
    (32) expression -> expression . MULTIPLY expression
    (33) expression -> expression . DIVIDE expression
    (34) expression -> expression . MOD expression
    (35) expression -> expression . POWER expression
    (36) expression -> expression . PLUS expression
    (37) expression -> expression . MINUS expression
    (38) expression -> expression . LESS expression
    (39) expression -> expression . GREATER expression
    (40) expression -> expression . GREATER_EQUAL expression
    (41) expression -> expression . LESS_EQUAL expression
    (42) expression -> expression . EQUALS expression
    (43) expression -> expression . DIFFERENT expression
    (44) expression -> expression . AND expression
    (45) expression -> expression . OR expression

    MULTIPLY        reduce using rule 44 (expression -> expression AND expression .)
    DIVIDE          reduce using rule 44 (expression -> expression AND expression .)
    MOD             reduce using rule 44 (expression -> expression AND expression .)
    POWER           reduce using rule 44 (expression -> expression AND expression .)
    PLUS            reduce using rule 44 (expression -> expression AND expression .)
    MINUS           reduce using rule 44 (expression -> expression AND expression .)
    LESS            reduce using rule 44 (expression -> expression AND expression .)
    GREATER         reduce using rule 44 (expression -> expression AND expression .)
    GREATER_EQUAL   reduce using rule 44 (expression -> expression AND expression .)
    LESS_EQUAL      reduce using rule 44 (expression -> expression AND expression .)
    EQUALS          reduce using rule 44 (expression -> expression AND expression .)
    DIFFERENT       reduce using rule 44 (expression -> expression AND expression .)
    AND             reduce using rule 44 (expression -> expression AND expression .)
    SEMICOLON       reduce using rule 44 (expression -> expression AND expression .)
    R_PAREN         reduce using rule 44 (expression -> expression AND expression .)
    COMMA           reduce using rule 44 (expression -> expression AND expression .)
    R_BRACKET       reduce using rule 44 (expression -> expression AND expression .)
    R_S_BRACKET     reduce using rule 44 (expression -> expression AND expression .)
    L_BRACKET       reduce using rule 44 (expression -> expression AND expression .)
    OR              shift and go to state 87

  ! OR              [ reduce using rule 44 (expression -> expression AND expression .) ]
  ! MULTIPLY        [ shift and go to state 74 ]
  ! DIVIDE          [ shift and go to state 75 ]
  ! MOD             [ shift and go to state 76 ]
  ! POWER           [ shift and go to state 77 ]
  ! PLUS            [ shift and go to state 78 ]
  ! MINUS           [ shift and go to state 79 ]
  ! LESS            [ shift and go to state 80 ]
  ! GREATER         [ shift and go to state 81 ]
  ! GREATER_EQUAL   [ shift and go to state 82 ]
  ! LESS_EQUAL      [ shift and go to state 83 ]
  ! EQUALS          [ shift and go to state 84 ]
  ! DIFFERENT       [ shift and go to state 85 ]
  ! AND             [ shift and go to state 86 ]


state 113

    (45) expression -> expression OR expression .
    (32) expression -> expression . MULTIPLY expression
    (33) expression -> expression . DIVIDE expression
    (34) expression -> expression . MOD expression
    (35) expression -> expression . POWER expression
    (36) expression -> expression . PLUS expression
    (37) expression -> expression . MINUS expression
    (38) expression -> expression . LESS expression
    (39) expression -> expression . GREATER expression
    (40) expression -> expression . GREATER_EQUAL expression
    (41) expression -> expression . LESS_EQUAL expression
    (42) expression -> expression . EQUALS expression
    (43) expression -> expression . DIFFERENT expression
    (44) expression -> expression . AND expression
    (45) expression -> expression . OR expression

    MULTIPLY        reduce using rule 45 (expression -> expression OR expression .)
    DIVIDE          reduce using rule 45 (expression -> expression OR expression .)
    MOD             reduce using rule 45 (expression -> expression OR expression .)
    POWER           reduce using rule 45 (expression -> expression OR expression .)
    PLUS            reduce using rule 45 (expression -> expression OR expression .)
    MINUS           reduce using rule 45 (expression -> expression OR expression .)
    LESS            reduce using rule 45 (expression -> expression OR expression .)
    GREATER         reduce using rule 45 (expression -> expression OR expression .)
    GREATER_EQUAL   reduce using rule 45 (expression -> expression OR expression .)
    LESS_EQUAL      reduce using rule 45 (expression -> expression OR expression .)
    EQUALS          reduce using rule 45 (expression -> expression OR expression .)
    DIFFERENT       reduce using rule 45 (expression -> expression OR expression .)
    AND             reduce using rule 45 (expression -> expression OR expression .)
    OR              reduce using rule 45 (expression -> expression OR expression .)
    SEMICOLON       reduce using rule 45 (expression -> expression OR expression .)
    R_PAREN         reduce using rule 45 (expression -> expression OR expression .)
    COMMA           reduce using rule 45 (expression -> expression OR expression .)
    R_BRACKET       reduce using rule 45 (expression -> expression OR expression .)
    R_S_BRACKET     reduce using rule 45 (expression -> expression OR expression .)
    L_BRACKET       reduce using rule 45 (expression -> expression OR expression .)

  ! MULTIPLY        [ shift and go to state 74 ]
  ! DIVIDE          [ shift and go to state 75 ]
  ! MOD             [ shift and go to state 76 ]
  ! POWER           [ shift and go to state 77 ]
  ! PLUS            [ shift and go to state 78 ]
  ! MINUS           [ shift and go to state 79 ]
  ! LESS            [ shift and go to state 80 ]
  ! GREATER         [ shift and go to state 81 ]
  ! GREATER_EQUAL   [ shift and go to state 82 ]
  ! LESS_EQUAL      [ shift and go to state 83 ]
  ! EQUALS          [ shift and go to state 84 ]
  ! DIFFERENT       [ shift and go to state 85 ]
  ! AND             [ shift and go to state 86 ]
  ! OR              [ shift and go to state 87 ]


state 114

    (46) expression -> L_PAREN expression R_PAREN .

    MULTIPLY        reduce using rule 46 (expression -> L_PAREN expression R_PAREN .)
    DIVIDE          reduce using rule 46 (expression -> L_PAREN expression R_PAREN .)
    MOD             reduce using rule 46 (expression -> L_PAREN expression R_PAREN .)
    POWER           reduce using rule 46 (expression -> L_PAREN expression R_PAREN .)
    PLUS            reduce using rule 46 (expression -> L_PAREN expression R_PAREN .)
    MINUS           reduce using rule 46 (expression -> L_PAREN expression R_PAREN .)
    LESS            reduce using rule 46 (expression -> L_PAREN expression R_PAREN .)
    GREATER         reduce using rule 46 (expression -> L_PAREN expression R_PAREN .)
    GREATER_EQUAL   reduce using rule 46 (expression -> L_PAREN expression R_PAREN .)
    LESS_EQUAL      reduce using rule 46 (expression -> L_PAREN expression R_PAREN .)
    EQUALS          reduce using rule 46 (expression -> L_PAREN expression R_PAREN .)
    DIFFERENT       reduce using rule 46 (expression -> L_PAREN expression R_PAREN .)
    AND             reduce using rule 46 (expression -> L_PAREN expression R_PAREN .)
    OR              reduce using rule 46 (expression -> L_PAREN expression R_PAREN .)
    SEMICOLON       reduce using rule 46 (expression -> L_PAREN expression R_PAREN .)
    R_PAREN         reduce using rule 46 (expression -> L_PAREN expression R_PAREN .)
    COMMA           reduce using rule 46 (expression -> L_PAREN expression R_PAREN .)
    R_BRACKET       reduce using rule 46 (expression -> L_PAREN expression R_PAREN .)
    R_S_BRACKET     reduce using rule 46 (expression -> L_PAREN expression R_PAREN .)
    L_BRACKET       reduce using rule 46 (expression -> L_PAREN expression R_PAREN .)


state 115

    (82) array -> L_BRACKET array_literal R_BRACKET .

    MULTIPLY        reduce using rule 82 (array -> L_BRACKET array_literal R_BRACKET .)
    DIVIDE          reduce using rule 82 (array -> L_BRACKET array_literal R_BRACKET .)
    MOD             reduce using rule 82 (array -> L_BRACKET array_literal R_BRACKET .)
    POWER           reduce using rule 82 (array -> L_BRACKET array_literal R_BRACKET .)
    PLUS            reduce using rule 82 (array -> L_BRACKET array_literal R_BRACKET .)
    MINUS           reduce using rule 82 (array -> L_BRACKET array_literal R_BRACKET .)
    LESS            reduce using rule 82 (array -> L_BRACKET array_literal R_BRACKET .)
    GREATER         reduce using rule 82 (array -> L_BRACKET array_literal R_BRACKET .)
    GREATER_EQUAL   reduce using rule 82 (array -> L_BRACKET array_literal R_BRACKET .)
    LESS_EQUAL      reduce using rule 82 (array -> L_BRACKET array_literal R_BRACKET .)
    EQUALS          reduce using rule 82 (array -> L_BRACKET array_literal R_BRACKET .)
    DIFFERENT       reduce using rule 82 (array -> L_BRACKET array_literal R_BRACKET .)
    AND             reduce using rule 82 (array -> L_BRACKET array_literal R_BRACKET .)
    OR              reduce using rule 82 (array -> L_BRACKET array_literal R_BRACKET .)
    SEMICOLON       reduce using rule 82 (array -> L_BRACKET array_literal R_BRACKET .)
    R_PAREN         reduce using rule 82 (array -> L_BRACKET array_literal R_BRACKET .)
    COMMA           reduce using rule 82 (array -> L_BRACKET array_literal R_BRACKET .)
    R_BRACKET       reduce using rule 82 (array -> L_BRACKET array_literal R_BRACKET .)
    R_S_BRACKET     reduce using rule 82 (array -> L_BRACKET array_literal R_BRACKET .)
    L_BRACKET       reduce using rule 82 (array -> L_BRACKET array_literal R_BRACKET .)


state 116

    (84) array_literal -> expression COMMA . array_literal
    (84) array_literal -> . expression COMMA array_literal
    (85) array_literal -> . expression
    (32) expression -> . expression MULTIPLY expression
    (33) expression -> . expression DIVIDE expression
    (34) expression -> . expression MOD expression
    (35) expression -> . expression POWER expression
    (36) expression -> . expression PLUS expression
    (37) expression -> . expression MINUS expression
    (38) expression -> . expression LESS expression
    (39) expression -> . expression GREATER expression
    (40) expression -> . expression GREATER_EQUAL expression
    (41) expression -> . expression LESS_EQUAL expression
    (42) expression -> . expression EQUALS expression
    (43) expression -> . expression DIFFERENT expression
    (44) expression -> . expression AND expression
    (45) expression -> . expression OR expression
    (46) expression -> . L_PAREN expression R_PAREN
    (47) expression -> . value
    (48) expression -> . MINUS expression
    (49) expression -> . NOT expression
    (64) value -> . literal_int
    (65) value -> . literal_string
    (66) value -> . literal_boolean
    (67) value -> . literal_char
    (68) value -> . literal_float
    (69) value -> . identifier
    (70) value -> . function_call
    (71) value -> . index
    (72) value -> . array
    (73) literal_int -> . INT_LITERAL
    (74) literal_string -> . STRING_LITERAL
    (75) literal_boolean -> . BOOLEAN_LITERAL
    (76) literal_char -> . CHAR_LITERAL
    (77) literal_float -> . FLOAT_LITERAL
    (78) identifier -> . ID
    (86) function_call -> . ID L_PAREN arguments_list R_PAREN
    (79) index -> . ID temp
    (82) array -> . L_BRACKET array_literal R_BRACKET
    (83) array -> . L_BRACKET R_BRACKET

    L_PAREN         shift and go to state 47
    MINUS           shift and go to state 46
    NOT             shift and go to state 49
    INT_LITERAL     shift and go to state 59
    STRING_LITERAL  shift and go to state 60
    BOOLEAN_LITERAL shift and go to state 61
    CHAR_LITERAL    shift and go to state 62
    FLOAT_LITERAL   shift and go to state 63
    ID              shift and go to state 44
    L_BRACKET       shift and go to state 64

    expression                     shift and go to state 93
    array_literal                  shift and go to state 122
    value                          shift and go to state 48
    literal_int                    shift and go to state 50
    literal_string                 shift and go to state 51
    literal_boolean                shift and go to state 52
    literal_char                   shift and go to state 53
    literal_float                  shift and go to state 54
    identifier                     shift and go to state 55
    function_call                  shift and go to state 56
    index                          shift and go to state 57
    array                          shift and go to state 58

state 117

    (10) function -> FUNCTION ID L_PAREN parameter_list R_PAREN COLON type L_BRACKET . block R_BRACKET
    (17) block -> . statement block
    (18) block -> . statement
    (19) statement -> . if_statement
    (20) statement -> . while_statement
    (21) statement -> . assign SEMICOLON
    (22) statement -> . create_variable SEMICOLON
    (23) statement -> . function_call SEMICOLON
    (24) statement -> . function
    (25) if_statement -> . IF expression L_BRACKET block R_BRACKET
    (26) if_statement -> . IF expression L_BRACKET block R_BRACKET else_if_statements
    (27) if_statement -> . IF expression L_BRACKET block R_BRACKET ELSE L_BRACKET block R_BRACKET
    (31) while_statement -> . WHILE expression L_BRACKET block R_BRACKET
    (8) assign -> . ID COLON_EQUALS expression
    (9) assign -> . index COLON_EQUALS expression
    (6) create_variable -> . MUTABLE_VARIABLE ID COLON type COLON_EQUALS expression
    (7) create_variable -> . IMMUTABLE_VARIABLE ID COLON type COLON_EQUALS expression
    (86) function_call -> . ID L_PAREN arguments_list R_PAREN
    (10) function -> . FUNCTION ID L_PAREN parameter_list R_PAREN COLON type L_BRACKET block R_BRACKET
    (11) function -> . FUNCTION ID L_PAREN parameter_list R_PAREN COLON type SEMICOLON
    (79) index -> . ID temp

    IF              shift and go to state 132
    WHILE           shift and go to state 133
    ID              shift and go to state 123
    MUTABLE_VARIABLE shift and go to state 6
    IMMUTABLE_VARIABLE shift and go to state 7
    FUNCTION        shift and go to state 8

    block                          shift and go to state 124
    statement                      shift and go to state 125
    if_statement                   shift and go to state 126
    while_statement                shift and go to state 127
    assign                         shift and go to state 128
    create_variable                shift and go to state 129
    function_call                  shift and go to state 130
    function                       shift and go to state 131
    index                          shift and go to state 134

state 118

    (11) function -> FUNCTION ID L_PAREN parameter_list R_PAREN COLON type SEMICOLON .

    MUTABLE_VARIABLE reduce using rule 11 (function -> FUNCTION ID L_PAREN parameter_list R_PAREN COLON type SEMICOLON .)
    IMMUTABLE_VARIABLE reduce using rule 11 (function -> FUNCTION ID L_PAREN parameter_list R_PAREN COLON type SEMICOLON .)
    FUNCTION        reduce using rule 11 (function -> FUNCTION ID L_PAREN parameter_list R_PAREN COLON type SEMICOLON .)
    $end            reduce using rule 11 (function -> FUNCTION ID L_PAREN parameter_list R_PAREN COLON type SEMICOLON .)
    IF              reduce using rule 11 (function -> FUNCTION ID L_PAREN parameter_list R_PAREN COLON type SEMICOLON .)
    WHILE           reduce using rule 11 (function -> FUNCTION ID L_PAREN parameter_list R_PAREN COLON type SEMICOLON .)
    ID              reduce using rule 11 (function -> FUNCTION ID L_PAREN parameter_list R_PAREN COLON type SEMICOLON .)
    R_BRACKET       reduce using rule 11 (function -> FUNCTION ID L_PAREN parameter_list R_PAREN COLON type SEMICOLON .)


state 119

    (86) function_call -> ID L_PAREN arguments_list R_PAREN .

    MULTIPLY        reduce using rule 86 (function_call -> ID L_PAREN arguments_list R_PAREN .)
    DIVIDE          reduce using rule 86 (function_call -> ID L_PAREN arguments_list R_PAREN .)
    MOD             reduce using rule 86 (function_call -> ID L_PAREN arguments_list R_PAREN .)
    POWER           reduce using rule 86 (function_call -> ID L_PAREN arguments_list R_PAREN .)
    PLUS            reduce using rule 86 (function_call -> ID L_PAREN arguments_list R_PAREN .)
    MINUS           reduce using rule 86 (function_call -> ID L_PAREN arguments_list R_PAREN .)
    LESS            reduce using rule 86 (function_call -> ID L_PAREN arguments_list R_PAREN .)
    GREATER         reduce using rule 86 (function_call -> ID L_PAREN arguments_list R_PAREN .)
    GREATER_EQUAL   reduce using rule 86 (function_call -> ID L_PAREN arguments_list R_PAREN .)
    LESS_EQUAL      reduce using rule 86 (function_call -> ID L_PAREN arguments_list R_PAREN .)
    EQUALS          reduce using rule 86 (function_call -> ID L_PAREN arguments_list R_PAREN .)
    DIFFERENT       reduce using rule 86 (function_call -> ID L_PAREN arguments_list R_PAREN .)
    AND             reduce using rule 86 (function_call -> ID L_PAREN arguments_list R_PAREN .)
    OR              reduce using rule 86 (function_call -> ID L_PAREN arguments_list R_PAREN .)
    SEMICOLON       reduce using rule 86 (function_call -> ID L_PAREN arguments_list R_PAREN .)
    R_PAREN         reduce using rule 86 (function_call -> ID L_PAREN arguments_list R_PAREN .)
    COMMA           reduce using rule 86 (function_call -> ID L_PAREN arguments_list R_PAREN .)
    R_BRACKET       reduce using rule 86 (function_call -> ID L_PAREN arguments_list R_PAREN .)
    R_S_BRACKET     reduce using rule 86 (function_call -> ID L_PAREN arguments_list R_PAREN .)
    L_BRACKET       reduce using rule 86 (function_call -> ID L_PAREN arguments_list R_PAREN .)


state 120

    (87) arguments_list -> expression COMMA . arguments_list
    (87) arguments_list -> . expression COMMA arguments_list
    (88) arguments_list -> . expression
    (89) arguments_list -> .
    (32) expression -> . expression MULTIPLY expression
    (33) expression -> . expression DIVIDE expression
    (34) expression -> . expression MOD expression
    (35) expression -> . expression POWER expression
    (36) expression -> . expression PLUS expression
    (37) expression -> . expression MINUS expression
    (38) expression -> . expression LESS expression
    (39) expression -> . expression GREATER expression
    (40) expression -> . expression GREATER_EQUAL expression
    (41) expression -> . expression LESS_EQUAL expression
    (42) expression -> . expression EQUALS expression
    (43) expression -> . expression DIFFERENT expression
    (44) expression -> . expression AND expression
    (45) expression -> . expression OR expression
    (46) expression -> . L_PAREN expression R_PAREN
    (47) expression -> . value
    (48) expression -> . MINUS expression
    (49) expression -> . NOT expression
    (64) value -> . literal_int
    (65) value -> . literal_string
    (66) value -> . literal_boolean
    (67) value -> . literal_char
    (68) value -> . literal_float
    (69) value -> . identifier
    (70) value -> . function_call
    (71) value -> . index
    (72) value -> . array
    (73) literal_int -> . INT_LITERAL
    (74) literal_string -> . STRING_LITERAL
    (75) literal_boolean -> . BOOLEAN_LITERAL
    (76) literal_char -> . CHAR_LITERAL
    (77) literal_float -> . FLOAT_LITERAL
    (78) identifier -> . ID
    (86) function_call -> . ID L_PAREN arguments_list R_PAREN
    (79) index -> . ID temp
    (82) array -> . L_BRACKET array_literal R_BRACKET
    (83) array -> . L_BRACKET R_BRACKET

    R_PAREN         reduce using rule 89 (arguments_list -> .)
    L_PAREN         shift and go to state 47
    MINUS           shift and go to state 46
    NOT             shift and go to state 49
    INT_LITERAL     shift and go to state 59
    STRING_LITERAL  shift and go to state 60
    BOOLEAN_LITERAL shift and go to state 61
    CHAR_LITERAL    shift and go to state 62
    FLOAT_LITERAL   shift and go to state 63
    ID              shift and go to state 44
    L_BRACKET       shift and go to state 64

    expression                     shift and go to state 98
    arguments_list                 shift and go to state 135
    value                          shift and go to state 48
    literal_int                    shift and go to state 50
    literal_string                 shift and go to state 51
    literal_boolean                shift and go to state 52
    literal_char                   shift and go to state 53
    literal_float                  shift and go to state 54
    identifier                     shift and go to state 55
    function_call                  shift and go to state 56
    index                          shift and go to state 57
    array                          shift and go to state 58

state 121

    (80) temp -> L_S_BRACKET expression R_S_BRACKET . temp
    (81) temp -> L_S_BRACKET expression R_S_BRACKET .
    (80) temp -> . L_S_BRACKET expression R_S_BRACKET temp
    (81) temp -> . L_S_BRACKET expression R_S_BRACKET

    MULTIPLY        reduce using rule 81 (temp -> L_S_BRACKET expression R_S_BRACKET .)
    DIVIDE          reduce using rule 81 (temp -> L_S_BRACKET expression R_S_BRACKET .)
    MOD             reduce using rule 81 (temp -> L_S_BRACKET expression R_S_BRACKET .)
    POWER           reduce using rule 81 (temp -> L_S_BRACKET expression R_S_BRACKET .)
    PLUS            reduce using rule 81 (temp -> L_S_BRACKET expression R_S_BRACKET .)
    MINUS           reduce using rule 81 (temp -> L_S_BRACKET expression R_S_BRACKET .)
    LESS            reduce using rule 81 (temp -> L_S_BRACKET expression R_S_BRACKET .)
    GREATER         reduce using rule 81 (temp -> L_S_BRACKET expression R_S_BRACKET .)
    GREATER_EQUAL   reduce using rule 81 (temp -> L_S_BRACKET expression R_S_BRACKET .)
    LESS_EQUAL      reduce using rule 81 (temp -> L_S_BRACKET expression R_S_BRACKET .)
    EQUALS          reduce using rule 81 (temp -> L_S_BRACKET expression R_S_BRACKET .)
    DIFFERENT       reduce using rule 81 (temp -> L_S_BRACKET expression R_S_BRACKET .)
    AND             reduce using rule 81 (temp -> L_S_BRACKET expression R_S_BRACKET .)
    OR              reduce using rule 81 (temp -> L_S_BRACKET expression R_S_BRACKET .)
    SEMICOLON       reduce using rule 81 (temp -> L_S_BRACKET expression R_S_BRACKET .)
    R_PAREN         reduce using rule 81 (temp -> L_S_BRACKET expression R_S_BRACKET .)
    COMMA           reduce using rule 81 (temp -> L_S_BRACKET expression R_S_BRACKET .)
    R_BRACKET       reduce using rule 81 (temp -> L_S_BRACKET expression R_S_BRACKET .)
    R_S_BRACKET     reduce using rule 81 (temp -> L_S_BRACKET expression R_S_BRACKET .)
    L_BRACKET       reduce using rule 81 (temp -> L_S_BRACKET expression R_S_BRACKET .)
    COLON_EQUALS    reduce using rule 81 (temp -> L_S_BRACKET expression R_S_BRACKET .)
    L_S_BRACKET     shift and go to state 73

    temp                           shift and go to state 136

state 122

    (84) array_literal -> expression COMMA array_literal .

    R_BRACKET       reduce using rule 84 (array_literal -> expression COMMA array_literal .)


state 123

    (8) assign -> ID . COLON_EQUALS expression
    (86) function_call -> ID . L_PAREN arguments_list R_PAREN
    (79) index -> ID . temp
    (80) temp -> . L_S_BRACKET expression R_S_BRACKET temp
    (81) temp -> . L_S_BRACKET expression R_S_BRACKET

    COLON_EQUALS    shift and go to state 137
    L_PAREN         shift and go to state 71
    L_S_BRACKET     shift and go to state 73

    temp                           shift and go to state 72

state 124

    (10) function -> FUNCTION ID L_PAREN parameter_list R_PAREN COLON type L_BRACKET block . R_BRACKET

    R_BRACKET       shift and go to state 138


state 125

    (17) block -> statement . block
    (18) block -> statement .
    (17) block -> . statement block
    (18) block -> . statement
    (19) statement -> . if_statement
    (20) statement -> . while_statement
    (21) statement -> . assign SEMICOLON
    (22) statement -> . create_variable SEMICOLON
    (23) statement -> . function_call SEMICOLON
    (24) statement -> . function
    (25) if_statement -> . IF expression L_BRACKET block R_BRACKET
    (26) if_statement -> . IF expression L_BRACKET block R_BRACKET else_if_statements
    (27) if_statement -> . IF expression L_BRACKET block R_BRACKET ELSE L_BRACKET block R_BRACKET
    (31) while_statement -> . WHILE expression L_BRACKET block R_BRACKET
    (8) assign -> . ID COLON_EQUALS expression
    (9) assign -> . index COLON_EQUALS expression
    (6) create_variable -> . MUTABLE_VARIABLE ID COLON type COLON_EQUALS expression
    (7) create_variable -> . IMMUTABLE_VARIABLE ID COLON type COLON_EQUALS expression
    (86) function_call -> . ID L_PAREN arguments_list R_PAREN
    (10) function -> . FUNCTION ID L_PAREN parameter_list R_PAREN COLON type L_BRACKET block R_BRACKET
    (11) function -> . FUNCTION ID L_PAREN parameter_list R_PAREN COLON type SEMICOLON
    (79) index -> . ID temp

    R_BRACKET       reduce using rule 18 (block -> statement .)
    IF              shift and go to state 132
    WHILE           shift and go to state 133
    ID              shift and go to state 123
    MUTABLE_VARIABLE shift and go to state 6
    IMMUTABLE_VARIABLE shift and go to state 7
    FUNCTION        shift and go to state 8

    statement                      shift and go to state 125
    block                          shift and go to state 139
    if_statement                   shift and go to state 126
    while_statement                shift and go to state 127
    assign                         shift and go to state 128
    create_variable                shift and go to state 129
    function_call                  shift and go to state 130
    function                       shift and go to state 131
    index                          shift and go to state 134

state 126

    (19) statement -> if_statement .

    IF              reduce using rule 19 (statement -> if_statement .)
    WHILE           reduce using rule 19 (statement -> if_statement .)
    ID              reduce using rule 19 (statement -> if_statement .)
    MUTABLE_VARIABLE reduce using rule 19 (statement -> if_statement .)
    IMMUTABLE_VARIABLE reduce using rule 19 (statement -> if_statement .)
    FUNCTION        reduce using rule 19 (statement -> if_statement .)
    R_BRACKET       reduce using rule 19 (statement -> if_statement .)


state 127

    (20) statement -> while_statement .

    IF              reduce using rule 20 (statement -> while_statement .)
    WHILE           reduce using rule 20 (statement -> while_statement .)
    ID              reduce using rule 20 (statement -> while_statement .)
    MUTABLE_VARIABLE reduce using rule 20 (statement -> while_statement .)
    IMMUTABLE_VARIABLE reduce using rule 20 (statement -> while_statement .)
    FUNCTION        reduce using rule 20 (statement -> while_statement .)
    R_BRACKET       reduce using rule 20 (statement -> while_statement .)


state 128

    (21) statement -> assign . SEMICOLON

    SEMICOLON       shift and go to state 140


state 129

    (22) statement -> create_variable . SEMICOLON

    SEMICOLON       shift and go to state 141


state 130

    (23) statement -> function_call . SEMICOLON

    SEMICOLON       shift and go to state 142


state 131

    (24) statement -> function .

    IF              reduce using rule 24 (statement -> function .)
    WHILE           reduce using rule 24 (statement -> function .)
    ID              reduce using rule 24 (statement -> function .)
    MUTABLE_VARIABLE reduce using rule 24 (statement -> function .)
    IMMUTABLE_VARIABLE reduce using rule 24 (statement -> function .)
    FUNCTION        reduce using rule 24 (statement -> function .)
    R_BRACKET       reduce using rule 24 (statement -> function .)


state 132

    (25) if_statement -> IF . expression L_BRACKET block R_BRACKET
    (26) if_statement -> IF . expression L_BRACKET block R_BRACKET else_if_statements
    (27) if_statement -> IF . expression L_BRACKET block R_BRACKET ELSE L_BRACKET block R_BRACKET
    (32) expression -> . expression MULTIPLY expression
    (33) expression -> . expression DIVIDE expression
    (34) expression -> . expression MOD expression
    (35) expression -> . expression POWER expression
    (36) expression -> . expression PLUS expression
    (37) expression -> . expression MINUS expression
    (38) expression -> . expression LESS expression
    (39) expression -> . expression GREATER expression
    (40) expression -> . expression GREATER_EQUAL expression
    (41) expression -> . expression LESS_EQUAL expression
    (42) expression -> . expression EQUALS expression
    (43) expression -> . expression DIFFERENT expression
    (44) expression -> . expression AND expression
    (45) expression -> . expression OR expression
    (46) expression -> . L_PAREN expression R_PAREN
    (47) expression -> . value
    (48) expression -> . MINUS expression
    (49) expression -> . NOT expression
    (64) value -> . literal_int
    (65) value -> . literal_string
    (66) value -> . literal_boolean
    (67) value -> . literal_char
    (68) value -> . literal_float
    (69) value -> . identifier
    (70) value -> . function_call
    (71) value -> . index
    (72) value -> . array
    (73) literal_int -> . INT_LITERAL
    (74) literal_string -> . STRING_LITERAL
    (75) literal_boolean -> . BOOLEAN_LITERAL
    (76) literal_char -> . CHAR_LITERAL
    (77) literal_float -> . FLOAT_LITERAL
    (78) identifier -> . ID
    (86) function_call -> . ID L_PAREN arguments_list R_PAREN
    (79) index -> . ID temp
    (82) array -> . L_BRACKET array_literal R_BRACKET
    (83) array -> . L_BRACKET R_BRACKET

    L_PAREN         shift and go to state 47
    MINUS           shift and go to state 46
    NOT             shift and go to state 49
    INT_LITERAL     shift and go to state 59
    STRING_LITERAL  shift and go to state 60
    BOOLEAN_LITERAL shift and go to state 61
    CHAR_LITERAL    shift and go to state 62
    FLOAT_LITERAL   shift and go to state 63
    ID              shift and go to state 44
    L_BRACKET       shift and go to state 64

    expression                     shift and go to state 143
    value                          shift and go to state 48
    literal_int                    shift and go to state 50
    literal_string                 shift and go to state 51
    literal_boolean                shift and go to state 52
    literal_char                   shift and go to state 53
    literal_float                  shift and go to state 54
    identifier                     shift and go to state 55
    function_call                  shift and go to state 56
    index                          shift and go to state 57
    array                          shift and go to state 58

state 133

    (31) while_statement -> WHILE . expression L_BRACKET block R_BRACKET
    (32) expression -> . expression MULTIPLY expression
    (33) expression -> . expression DIVIDE expression
    (34) expression -> . expression MOD expression
    (35) expression -> . expression POWER expression
    (36) expression -> . expression PLUS expression
    (37) expression -> . expression MINUS expression
    (38) expression -> . expression LESS expression
    (39) expression -> . expression GREATER expression
    (40) expression -> . expression GREATER_EQUAL expression
    (41) expression -> . expression LESS_EQUAL expression
    (42) expression -> . expression EQUALS expression
    (43) expression -> . expression DIFFERENT expression
    (44) expression -> . expression AND expression
    (45) expression -> . expression OR expression
    (46) expression -> . L_PAREN expression R_PAREN
    (47) expression -> . value
    (48) expression -> . MINUS expression
    (49) expression -> . NOT expression
    (64) value -> . literal_int
    (65) value -> . literal_string
    (66) value -> . literal_boolean
    (67) value -> . literal_char
    (68) value -> . literal_float
    (69) value -> . identifier
    (70) value -> . function_call
    (71) value -> . index
    (72) value -> . array
    (73) literal_int -> . INT_LITERAL
    (74) literal_string -> . STRING_LITERAL
    (75) literal_boolean -> . BOOLEAN_LITERAL
    (76) literal_char -> . CHAR_LITERAL
    (77) literal_float -> . FLOAT_LITERAL
    (78) identifier -> . ID
    (86) function_call -> . ID L_PAREN arguments_list R_PAREN
    (79) index -> . ID temp
    (82) array -> . L_BRACKET array_literal R_BRACKET
    (83) array -> . L_BRACKET R_BRACKET

    L_PAREN         shift and go to state 47
    MINUS           shift and go to state 46
    NOT             shift and go to state 49
    INT_LITERAL     shift and go to state 59
    STRING_LITERAL  shift and go to state 60
    BOOLEAN_LITERAL shift and go to state 61
    CHAR_LITERAL    shift and go to state 62
    FLOAT_LITERAL   shift and go to state 63
    ID              shift and go to state 44
    L_BRACKET       shift and go to state 64

    expression                     shift and go to state 144
    value                          shift and go to state 48
    literal_int                    shift and go to state 50
    literal_string                 shift and go to state 51
    literal_boolean                shift and go to state 52
    literal_char                   shift and go to state 53
    literal_float                  shift and go to state 54
    identifier                     shift and go to state 55
    function_call                  shift and go to state 56
    index                          shift and go to state 57
    array                          shift and go to state 58

state 134

    (9) assign -> index . COLON_EQUALS expression

    COLON_EQUALS    shift and go to state 145


state 135

    (87) arguments_list -> expression COMMA arguments_list .

    R_PAREN         reduce using rule 87 (arguments_list -> expression COMMA arguments_list .)


state 136

    (80) temp -> L_S_BRACKET expression R_S_BRACKET temp .

    MULTIPLY        reduce using rule 80 (temp -> L_S_BRACKET expression R_S_BRACKET temp .)
    DIVIDE          reduce using rule 80 (temp -> L_S_BRACKET expression R_S_BRACKET temp .)
    MOD             reduce using rule 80 (temp -> L_S_BRACKET expression R_S_BRACKET temp .)
    POWER           reduce using rule 80 (temp -> L_S_BRACKET expression R_S_BRACKET temp .)
    PLUS            reduce using rule 80 (temp -> L_S_BRACKET expression R_S_BRACKET temp .)
    MINUS           reduce using rule 80 (temp -> L_S_BRACKET expression R_S_BRACKET temp .)
    LESS            reduce using rule 80 (temp -> L_S_BRACKET expression R_S_BRACKET temp .)
    GREATER         reduce using rule 80 (temp -> L_S_BRACKET expression R_S_BRACKET temp .)
    GREATER_EQUAL   reduce using rule 80 (temp -> L_S_BRACKET expression R_S_BRACKET temp .)
    LESS_EQUAL      reduce using rule 80 (temp -> L_S_BRACKET expression R_S_BRACKET temp .)
    EQUALS          reduce using rule 80 (temp -> L_S_BRACKET expression R_S_BRACKET temp .)
    DIFFERENT       reduce using rule 80 (temp -> L_S_BRACKET expression R_S_BRACKET temp .)
    AND             reduce using rule 80 (temp -> L_S_BRACKET expression R_S_BRACKET temp .)
    OR              reduce using rule 80 (temp -> L_S_BRACKET expression R_S_BRACKET temp .)
    SEMICOLON       reduce using rule 80 (temp -> L_S_BRACKET expression R_S_BRACKET temp .)
    R_PAREN         reduce using rule 80 (temp -> L_S_BRACKET expression R_S_BRACKET temp .)
    COMMA           reduce using rule 80 (temp -> L_S_BRACKET expression R_S_BRACKET temp .)
    R_BRACKET       reduce using rule 80 (temp -> L_S_BRACKET expression R_S_BRACKET temp .)
    R_S_BRACKET     reduce using rule 80 (temp -> L_S_BRACKET expression R_S_BRACKET temp .)
    L_BRACKET       reduce using rule 80 (temp -> L_S_BRACKET expression R_S_BRACKET temp .)
    COLON_EQUALS    reduce using rule 80 (temp -> L_S_BRACKET expression R_S_BRACKET temp .)


state 137

    (8) assign -> ID COLON_EQUALS . expression
    (32) expression -> . expression MULTIPLY expression
    (33) expression -> . expression DIVIDE expression
    (34) expression -> . expression MOD expression
    (35) expression -> . expression POWER expression
    (36) expression -> . expression PLUS expression
    (37) expression -> . expression MINUS expression
    (38) expression -> . expression LESS expression
    (39) expression -> . expression GREATER expression
    (40) expression -> . expression GREATER_EQUAL expression
    (41) expression -> . expression LESS_EQUAL expression
    (42) expression -> . expression EQUALS expression
    (43) expression -> . expression DIFFERENT expression
    (44) expression -> . expression AND expression
    (45) expression -> . expression OR expression
    (46) expression -> . L_PAREN expression R_PAREN
    (47) expression -> . value
    (48) expression -> . MINUS expression
    (49) expression -> . NOT expression
    (64) value -> . literal_int
    (65) value -> . literal_string
    (66) value -> . literal_boolean
    (67) value -> . literal_char
    (68) value -> . literal_float
    (69) value -> . identifier
    (70) value -> . function_call
    (71) value -> . index
    (72) value -> . array
    (73) literal_int -> . INT_LITERAL
    (74) literal_string -> . STRING_LITERAL
    (75) literal_boolean -> . BOOLEAN_LITERAL
    (76) literal_char -> . CHAR_LITERAL
    (77) literal_float -> . FLOAT_LITERAL
    (78) identifier -> . ID
    (86) function_call -> . ID L_PAREN arguments_list R_PAREN
    (79) index -> . ID temp
    (82) array -> . L_BRACKET array_literal R_BRACKET
    (83) array -> . L_BRACKET R_BRACKET

    L_PAREN         shift and go to state 47
    MINUS           shift and go to state 46
    NOT             shift and go to state 49
    INT_LITERAL     shift and go to state 59
    STRING_LITERAL  shift and go to state 60
    BOOLEAN_LITERAL shift and go to state 61
    CHAR_LITERAL    shift and go to state 62
    FLOAT_LITERAL   shift and go to state 63
    ID              shift and go to state 44
    L_BRACKET       shift and go to state 64

    expression                     shift and go to state 146
    value                          shift and go to state 48
    literal_int                    shift and go to state 50
    literal_string                 shift and go to state 51
    literal_boolean                shift and go to state 52
    literal_char                   shift and go to state 53
    literal_float                  shift and go to state 54
    identifier                     shift and go to state 55
    function_call                  shift and go to state 56
    index                          shift and go to state 57
    array                          shift and go to state 58

state 138

    (10) function -> FUNCTION ID L_PAREN parameter_list R_PAREN COLON type L_BRACKET block R_BRACKET .

    MUTABLE_VARIABLE reduce using rule 10 (function -> FUNCTION ID L_PAREN parameter_list R_PAREN COLON type L_BRACKET block R_BRACKET .)
    IMMUTABLE_VARIABLE reduce using rule 10 (function -> FUNCTION ID L_PAREN parameter_list R_PAREN COLON type L_BRACKET block R_BRACKET .)
    FUNCTION        reduce using rule 10 (function -> FUNCTION ID L_PAREN parameter_list R_PAREN COLON type L_BRACKET block R_BRACKET .)
    $end            reduce using rule 10 (function -> FUNCTION ID L_PAREN parameter_list R_PAREN COLON type L_BRACKET block R_BRACKET .)
    IF              reduce using rule 10 (function -> FUNCTION ID L_PAREN parameter_list R_PAREN COLON type L_BRACKET block R_BRACKET .)
    WHILE           reduce using rule 10 (function -> FUNCTION ID L_PAREN parameter_list R_PAREN COLON type L_BRACKET block R_BRACKET .)
    ID              reduce using rule 10 (function -> FUNCTION ID L_PAREN parameter_list R_PAREN COLON type L_BRACKET block R_BRACKET .)
    R_BRACKET       reduce using rule 10 (function -> FUNCTION ID L_PAREN parameter_list R_PAREN COLON type L_BRACKET block R_BRACKET .)


state 139

    (17) block -> statement block .

    R_BRACKET       reduce using rule 17 (block -> statement block .)


state 140

    (21) statement -> assign SEMICOLON .

    IF              reduce using rule 21 (statement -> assign SEMICOLON .)
    WHILE           reduce using rule 21 (statement -> assign SEMICOLON .)
    ID              reduce using rule 21 (statement -> assign SEMICOLON .)
    MUTABLE_VARIABLE reduce using rule 21 (statement -> assign SEMICOLON .)
    IMMUTABLE_VARIABLE reduce using rule 21 (statement -> assign SEMICOLON .)
    FUNCTION        reduce using rule 21 (statement -> assign SEMICOLON .)
    R_BRACKET       reduce using rule 21 (statement -> assign SEMICOLON .)


state 141

    (22) statement -> create_variable SEMICOLON .

    IF              reduce using rule 22 (statement -> create_variable SEMICOLON .)
    WHILE           reduce using rule 22 (statement -> create_variable SEMICOLON .)
    ID              reduce using rule 22 (statement -> create_variable SEMICOLON .)
    MUTABLE_VARIABLE reduce using rule 22 (statement -> create_variable SEMICOLON .)
    IMMUTABLE_VARIABLE reduce using rule 22 (statement -> create_variable SEMICOLON .)
    FUNCTION        reduce using rule 22 (statement -> create_variable SEMICOLON .)
    R_BRACKET       reduce using rule 22 (statement -> create_variable SEMICOLON .)


state 142

    (23) statement -> function_call SEMICOLON .

    IF              reduce using rule 23 (statement -> function_call SEMICOLON .)
    WHILE           reduce using rule 23 (statement -> function_call SEMICOLON .)
    ID              reduce using rule 23 (statement -> function_call SEMICOLON .)
    MUTABLE_VARIABLE reduce using rule 23 (statement -> function_call SEMICOLON .)
    IMMUTABLE_VARIABLE reduce using rule 23 (statement -> function_call SEMICOLON .)
    FUNCTION        reduce using rule 23 (statement -> function_call SEMICOLON .)
    R_BRACKET       reduce using rule 23 (statement -> function_call SEMICOLON .)


state 143

    (25) if_statement -> IF expression . L_BRACKET block R_BRACKET
    (26) if_statement -> IF expression . L_BRACKET block R_BRACKET else_if_statements
    (27) if_statement -> IF expression . L_BRACKET block R_BRACKET ELSE L_BRACKET block R_BRACKET
    (32) expression -> expression . MULTIPLY expression
    (33) expression -> expression . DIVIDE expression
    (34) expression -> expression . MOD expression
    (35) expression -> expression . POWER expression
    (36) expression -> expression . PLUS expression
    (37) expression -> expression . MINUS expression
    (38) expression -> expression . LESS expression
    (39) expression -> expression . GREATER expression
    (40) expression -> expression . GREATER_EQUAL expression
    (41) expression -> expression . LESS_EQUAL expression
    (42) expression -> expression . EQUALS expression
    (43) expression -> expression . DIFFERENT expression
    (44) expression -> expression . AND expression
    (45) expression -> expression . OR expression

    L_BRACKET       shift and go to state 147
    MULTIPLY        shift and go to state 74
    DIVIDE          shift and go to state 75
    MOD             shift and go to state 76
    POWER           shift and go to state 77
    PLUS            shift and go to state 78
    MINUS           shift and go to state 79
    LESS            shift and go to state 80
    GREATER         shift and go to state 81
    GREATER_EQUAL   shift and go to state 82
    LESS_EQUAL      shift and go to state 83
    EQUALS          shift and go to state 84
    DIFFERENT       shift and go to state 85
    AND             shift and go to state 86
    OR              shift and go to state 87


state 144

    (31) while_statement -> WHILE expression . L_BRACKET block R_BRACKET
    (32) expression -> expression . MULTIPLY expression
    (33) expression -> expression . DIVIDE expression
    (34) expression -> expression . MOD expression
    (35) expression -> expression . POWER expression
    (36) expression -> expression . PLUS expression
    (37) expression -> expression . MINUS expression
    (38) expression -> expression . LESS expression
    (39) expression -> expression . GREATER expression
    (40) expression -> expression . GREATER_EQUAL expression
    (41) expression -> expression . LESS_EQUAL expression
    (42) expression -> expression . EQUALS expression
    (43) expression -> expression . DIFFERENT expression
    (44) expression -> expression . AND expression
    (45) expression -> expression . OR expression

    L_BRACKET       shift and go to state 148
    MULTIPLY        shift and go to state 74
    DIVIDE          shift and go to state 75
    MOD             shift and go to state 76
    POWER           shift and go to state 77
    PLUS            shift and go to state 78
    MINUS           shift and go to state 79
    LESS            shift and go to state 80
    GREATER         shift and go to state 81
    GREATER_EQUAL   shift and go to state 82
    LESS_EQUAL      shift and go to state 83
    EQUALS          shift and go to state 84
    DIFFERENT       shift and go to state 85
    AND             shift and go to state 86
    OR              shift and go to state 87


state 145

    (9) assign -> index COLON_EQUALS . expression
    (32) expression -> . expression MULTIPLY expression
    (33) expression -> . expression DIVIDE expression
    (34) expression -> . expression MOD expression
    (35) expression -> . expression POWER expression
    (36) expression -> . expression PLUS expression
    (37) expression -> . expression MINUS expression
    (38) expression -> . expression LESS expression
    (39) expression -> . expression GREATER expression
    (40) expression -> . expression GREATER_EQUAL expression
    (41) expression -> . expression LESS_EQUAL expression
    (42) expression -> . expression EQUALS expression
    (43) expression -> . expression DIFFERENT expression
    (44) expression -> . expression AND expression
    (45) expression -> . expression OR expression
    (46) expression -> . L_PAREN expression R_PAREN
    (47) expression -> . value
    (48) expression -> . MINUS expression
    (49) expression -> . NOT expression
    (64) value -> . literal_int
    (65) value -> . literal_string
    (66) value -> . literal_boolean
    (67) value -> . literal_char
    (68) value -> . literal_float
    (69) value -> . identifier
    (70) value -> . function_call
    (71) value -> . index
    (72) value -> . array
    (73) literal_int -> . INT_LITERAL
    (74) literal_string -> . STRING_LITERAL
    (75) literal_boolean -> . BOOLEAN_LITERAL
    (76) literal_char -> . CHAR_LITERAL
    (77) literal_float -> . FLOAT_LITERAL
    (78) identifier -> . ID
    (86) function_call -> . ID L_PAREN arguments_list R_PAREN
    (79) index -> . ID temp
    (82) array -> . L_BRACKET array_literal R_BRACKET
    (83) array -> . L_BRACKET R_BRACKET

    L_PAREN         shift and go to state 47
    MINUS           shift and go to state 46
    NOT             shift and go to state 49
    INT_LITERAL     shift and go to state 59
    STRING_LITERAL  shift and go to state 60
    BOOLEAN_LITERAL shift and go to state 61
    CHAR_LITERAL    shift and go to state 62
    FLOAT_LITERAL   shift and go to state 63
    ID              shift and go to state 44
    L_BRACKET       shift and go to state 64

    index                          shift and go to state 57
    expression                     shift and go to state 149
    value                          shift and go to state 48
    literal_int                    shift and go to state 50
    literal_string                 shift and go to state 51
    literal_boolean                shift and go to state 52
    literal_char                   shift and go to state 53
    literal_float                  shift and go to state 54
    identifier                     shift and go to state 55
    function_call                  shift and go to state 56
    array                          shift and go to state 58

state 146

    (8) assign -> ID COLON_EQUALS expression .
    (32) expression -> expression . MULTIPLY expression
    (33) expression -> expression . DIVIDE expression
    (34) expression -> expression . MOD expression
    (35) expression -> expression . POWER expression
    (36) expression -> expression . PLUS expression
    (37) expression -> expression . MINUS expression
    (38) expression -> expression . LESS expression
    (39) expression -> expression . GREATER expression
    (40) expression -> expression . GREATER_EQUAL expression
    (41) expression -> expression . LESS_EQUAL expression
    (42) expression -> expression . EQUALS expression
    (43) expression -> expression . DIFFERENT expression
    (44) expression -> expression . AND expression
    (45) expression -> expression . OR expression

    SEMICOLON       reduce using rule 8 (assign -> ID COLON_EQUALS expression .)
    MULTIPLY        shift and go to state 74
    DIVIDE          shift and go to state 75
    MOD             shift and go to state 76
    POWER           shift and go to state 77
    PLUS            shift and go to state 78
    MINUS           shift and go to state 79
    LESS            shift and go to state 80
    GREATER         shift and go to state 81
    GREATER_EQUAL   shift and go to state 82
    LESS_EQUAL      shift and go to state 83
    EQUALS          shift and go to state 84
    DIFFERENT       shift and go to state 85
    AND             shift and go to state 86
    OR              shift and go to state 87


state 147

    (25) if_statement -> IF expression L_BRACKET . block R_BRACKET
    (26) if_statement -> IF expression L_BRACKET . block R_BRACKET else_if_statements
    (27) if_statement -> IF expression L_BRACKET . block R_BRACKET ELSE L_BRACKET block R_BRACKET
    (17) block -> . statement block
    (18) block -> . statement
    (19) statement -> . if_statement
    (20) statement -> . while_statement
    (21) statement -> . assign SEMICOLON
    (22) statement -> . create_variable SEMICOLON
    (23) statement -> . function_call SEMICOLON
    (24) statement -> . function
    (25) if_statement -> . IF expression L_BRACKET block R_BRACKET
    (26) if_statement -> . IF expression L_BRACKET block R_BRACKET else_if_statements
    (27) if_statement -> . IF expression L_BRACKET block R_BRACKET ELSE L_BRACKET block R_BRACKET
    (31) while_statement -> . WHILE expression L_BRACKET block R_BRACKET
    (8) assign -> . ID COLON_EQUALS expression
    (9) assign -> . index COLON_EQUALS expression
    (6) create_variable -> . MUTABLE_VARIABLE ID COLON type COLON_EQUALS expression
    (7) create_variable -> . IMMUTABLE_VARIABLE ID COLON type COLON_EQUALS expression
    (86) function_call -> . ID L_PAREN arguments_list R_PAREN
    (10) function -> . FUNCTION ID L_PAREN parameter_list R_PAREN COLON type L_BRACKET block R_BRACKET
    (11) function -> . FUNCTION ID L_PAREN parameter_list R_PAREN COLON type SEMICOLON
    (79) index -> . ID temp

    IF              shift and go to state 132
    WHILE           shift and go to state 133
    ID              shift and go to state 123
    MUTABLE_VARIABLE shift and go to state 6
    IMMUTABLE_VARIABLE shift and go to state 7
    FUNCTION        shift and go to state 8

    block                          shift and go to state 150
    statement                      shift and go to state 125
    if_statement                   shift and go to state 126
    while_statement                shift and go to state 127
    assign                         shift and go to state 128
    create_variable                shift and go to state 129
    function_call                  shift and go to state 130
    function                       shift and go to state 131
    index                          shift and go to state 134

state 148

    (31) while_statement -> WHILE expression L_BRACKET . block R_BRACKET
    (17) block -> . statement block
    (18) block -> . statement
    (19) statement -> . if_statement
    (20) statement -> . while_statement
    (21) statement -> . assign SEMICOLON
    (22) statement -> . create_variable SEMICOLON
    (23) statement -> . function_call SEMICOLON
    (24) statement -> . function
    (25) if_statement -> . IF expression L_BRACKET block R_BRACKET
    (26) if_statement -> . IF expression L_BRACKET block R_BRACKET else_if_statements
    (27) if_statement -> . IF expression L_BRACKET block R_BRACKET ELSE L_BRACKET block R_BRACKET
    (31) while_statement -> . WHILE expression L_BRACKET block R_BRACKET
    (8) assign -> . ID COLON_EQUALS expression
    (9) assign -> . index COLON_EQUALS expression
    (6) create_variable -> . MUTABLE_VARIABLE ID COLON type COLON_EQUALS expression
    (7) create_variable -> . IMMUTABLE_VARIABLE ID COLON type COLON_EQUALS expression
    (86) function_call -> . ID L_PAREN arguments_list R_PAREN
    (10) function -> . FUNCTION ID L_PAREN parameter_list R_PAREN COLON type L_BRACKET block R_BRACKET
    (11) function -> . FUNCTION ID L_PAREN parameter_list R_PAREN COLON type SEMICOLON
    (79) index -> . ID temp

    IF              shift and go to state 132
    WHILE           shift and go to state 133
    ID              shift and go to state 123
    MUTABLE_VARIABLE shift and go to state 6
    IMMUTABLE_VARIABLE shift and go to state 7
    FUNCTION        shift and go to state 8

    block                          shift and go to state 151
    statement                      shift and go to state 125
    if_statement                   shift and go to state 126
    while_statement                shift and go to state 127
    assign                         shift and go to state 128
    create_variable                shift and go to state 129
    function_call                  shift and go to state 130
    function                       shift and go to state 131
    index                          shift and go to state 134

state 149

    (9) assign -> index COLON_EQUALS expression .
    (32) expression -> expression . MULTIPLY expression
    (33) expression -> expression . DIVIDE expression
    (34) expression -> expression . MOD expression
    (35) expression -> expression . POWER expression
    (36) expression -> expression . PLUS expression
    (37) expression -> expression . MINUS expression
    (38) expression -> expression . LESS expression
    (39) expression -> expression . GREATER expression
    (40) expression -> expression . GREATER_EQUAL expression
    (41) expression -> expression . LESS_EQUAL expression
    (42) expression -> expression . EQUALS expression
    (43) expression -> expression . DIFFERENT expression
    (44) expression -> expression . AND expression
    (45) expression -> expression . OR expression

    SEMICOLON       reduce using rule 9 (assign -> index COLON_EQUALS expression .)
    MULTIPLY        shift and go to state 74
    DIVIDE          shift and go to state 75
    MOD             shift and go to state 76
    POWER           shift and go to state 77
    PLUS            shift and go to state 78
    MINUS           shift and go to state 79
    LESS            shift and go to state 80
    GREATER         shift and go to state 81
    GREATER_EQUAL   shift and go to state 82
    LESS_EQUAL      shift and go to state 83
    EQUALS          shift and go to state 84
    DIFFERENT       shift and go to state 85
    AND             shift and go to state 86
    OR              shift and go to state 87


state 150

    (25) if_statement -> IF expression L_BRACKET block . R_BRACKET
    (26) if_statement -> IF expression L_BRACKET block . R_BRACKET else_if_statements
    (27) if_statement -> IF expression L_BRACKET block . R_BRACKET ELSE L_BRACKET block R_BRACKET

    R_BRACKET       shift and go to state 152


state 151

    (31) while_statement -> WHILE expression L_BRACKET block . R_BRACKET

    R_BRACKET       shift and go to state 153


state 152

    (25) if_statement -> IF expression L_BRACKET block R_BRACKET .
    (26) if_statement -> IF expression L_BRACKET block R_BRACKET . else_if_statements
    (27) if_statement -> IF expression L_BRACKET block R_BRACKET . ELSE L_BRACKET block R_BRACKET
    (28) else_if_statements -> . ELSE IF expression L_BRACKET block R_BRACKET
    (29) else_if_statements -> . ELSE IF expression L_BRACKET block R_BRACKET else_if_statements
    (30) else_if_statements -> . ELSE IF expression L_BRACKET block R_BRACKET ELSE L_BRACKET block R_BRACKET

    IF              reduce using rule 25 (if_statement -> IF expression L_BRACKET block R_BRACKET .)
    WHILE           reduce using rule 25 (if_statement -> IF expression L_BRACKET block R_BRACKET .)
    ID              reduce using rule 25 (if_statement -> IF expression L_BRACKET block R_BRACKET .)
    MUTABLE_VARIABLE reduce using rule 25 (if_statement -> IF expression L_BRACKET block R_BRACKET .)
    IMMUTABLE_VARIABLE reduce using rule 25 (if_statement -> IF expression L_BRACKET block R_BRACKET .)
    FUNCTION        reduce using rule 25 (if_statement -> IF expression L_BRACKET block R_BRACKET .)
    R_BRACKET       reduce using rule 25 (if_statement -> IF expression L_BRACKET block R_BRACKET .)
    ELSE            shift and go to state 155

    else_if_statements             shift and go to state 154

state 153

    (31) while_statement -> WHILE expression L_BRACKET block R_BRACKET .

    IF              reduce using rule 31 (while_statement -> WHILE expression L_BRACKET block R_BRACKET .)
    WHILE           reduce using rule 31 (while_statement -> WHILE expression L_BRACKET block R_BRACKET .)
    ID              reduce using rule 31 (while_statement -> WHILE expression L_BRACKET block R_BRACKET .)
    MUTABLE_VARIABLE reduce using rule 31 (while_statement -> WHILE expression L_BRACKET block R_BRACKET .)
    IMMUTABLE_VARIABLE reduce using rule 31 (while_statement -> WHILE expression L_BRACKET block R_BRACKET .)
    FUNCTION        reduce using rule 31 (while_statement -> WHILE expression L_BRACKET block R_BRACKET .)
    R_BRACKET       reduce using rule 31 (while_statement -> WHILE expression L_BRACKET block R_BRACKET .)


state 154

    (26) if_statement -> IF expression L_BRACKET block R_BRACKET else_if_statements .

    IF              reduce using rule 26 (if_statement -> IF expression L_BRACKET block R_BRACKET else_if_statements .)
    WHILE           reduce using rule 26 (if_statement -> IF expression L_BRACKET block R_BRACKET else_if_statements .)
    ID              reduce using rule 26 (if_statement -> IF expression L_BRACKET block R_BRACKET else_if_statements .)
    MUTABLE_VARIABLE reduce using rule 26 (if_statement -> IF expression L_BRACKET block R_BRACKET else_if_statements .)
    IMMUTABLE_VARIABLE reduce using rule 26 (if_statement -> IF expression L_BRACKET block R_BRACKET else_if_statements .)
    FUNCTION        reduce using rule 26 (if_statement -> IF expression L_BRACKET block R_BRACKET else_if_statements .)
    R_BRACKET       reduce using rule 26 (if_statement -> IF expression L_BRACKET block R_BRACKET else_if_statements .)


state 155

    (27) if_statement -> IF expression L_BRACKET block R_BRACKET ELSE . L_BRACKET block R_BRACKET
    (28) else_if_statements -> ELSE . IF expression L_BRACKET block R_BRACKET
    (29) else_if_statements -> ELSE . IF expression L_BRACKET block R_BRACKET else_if_statements
    (30) else_if_statements -> ELSE . IF expression L_BRACKET block R_BRACKET ELSE L_BRACKET block R_BRACKET

    L_BRACKET       shift and go to state 157
    IF              shift and go to state 156


state 156

    (28) else_if_statements -> ELSE IF . expression L_BRACKET block R_BRACKET
    (29) else_if_statements -> ELSE IF . expression L_BRACKET block R_BRACKET else_if_statements
    (30) else_if_statements -> ELSE IF . expression L_BRACKET block R_BRACKET ELSE L_BRACKET block R_BRACKET
    (32) expression -> . expression MULTIPLY expression
    (33) expression -> . expression DIVIDE expression
    (34) expression -> . expression MOD expression
    (35) expression -> . expression POWER expression
    (36) expression -> . expression PLUS expression
    (37) expression -> . expression MINUS expression
    (38) expression -> . expression LESS expression
    (39) expression -> . expression GREATER expression
    (40) expression -> . expression GREATER_EQUAL expression
    (41) expression -> . expression LESS_EQUAL expression
    (42) expression -> . expression EQUALS expression
    (43) expression -> . expression DIFFERENT expression
    (44) expression -> . expression AND expression
    (45) expression -> . expression OR expression
    (46) expression -> . L_PAREN expression R_PAREN
    (47) expression -> . value
    (48) expression -> . MINUS expression
    (49) expression -> . NOT expression
    (64) value -> . literal_int
    (65) value -> . literal_string
    (66) value -> . literal_boolean
    (67) value -> . literal_char
    (68) value -> . literal_float
    (69) value -> . identifier
    (70) value -> . function_call
    (71) value -> . index
    (72) value -> . array
    (73) literal_int -> . INT_LITERAL
    (74) literal_string -> . STRING_LITERAL
    (75) literal_boolean -> . BOOLEAN_LITERAL
    (76) literal_char -> . CHAR_LITERAL
    (77) literal_float -> . FLOAT_LITERAL
    (78) identifier -> . ID
    (86) function_call -> . ID L_PAREN arguments_list R_PAREN
    (79) index -> . ID temp
    (82) array -> . L_BRACKET array_literal R_BRACKET
    (83) array -> . L_BRACKET R_BRACKET

    L_PAREN         shift and go to state 47
    MINUS           shift and go to state 46
    NOT             shift and go to state 49
    INT_LITERAL     shift and go to state 59
    STRING_LITERAL  shift and go to state 60
    BOOLEAN_LITERAL shift and go to state 61
    CHAR_LITERAL    shift and go to state 62
    FLOAT_LITERAL   shift and go to state 63
    ID              shift and go to state 44
    L_BRACKET       shift and go to state 64

    expression                     shift and go to state 158
    value                          shift and go to state 48
    literal_int                    shift and go to state 50
    literal_string                 shift and go to state 51
    literal_boolean                shift and go to state 52
    literal_char                   shift and go to state 53
    literal_float                  shift and go to state 54
    identifier                     shift and go to state 55
    function_call                  shift and go to state 56
    index                          shift and go to state 57
    array                          shift and go to state 58

state 157

    (27) if_statement -> IF expression L_BRACKET block R_BRACKET ELSE L_BRACKET . block R_BRACKET
    (17) block -> . statement block
    (18) block -> . statement
    (19) statement -> . if_statement
    (20) statement -> . while_statement
    (21) statement -> . assign SEMICOLON
    (22) statement -> . create_variable SEMICOLON
    (23) statement -> . function_call SEMICOLON
    (24) statement -> . function
    (25) if_statement -> . IF expression L_BRACKET block R_BRACKET
    (26) if_statement -> . IF expression L_BRACKET block R_BRACKET else_if_statements
    (27) if_statement -> . IF expression L_BRACKET block R_BRACKET ELSE L_BRACKET block R_BRACKET
    (31) while_statement -> . WHILE expression L_BRACKET block R_BRACKET
    (8) assign -> . ID COLON_EQUALS expression
    (9) assign -> . index COLON_EQUALS expression
    (6) create_variable -> . MUTABLE_VARIABLE ID COLON type COLON_EQUALS expression
    (7) create_variable -> . IMMUTABLE_VARIABLE ID COLON type COLON_EQUALS expression
    (86) function_call -> . ID L_PAREN arguments_list R_PAREN
    (10) function -> . FUNCTION ID L_PAREN parameter_list R_PAREN COLON type L_BRACKET block R_BRACKET
    (11) function -> . FUNCTION ID L_PAREN parameter_list R_PAREN COLON type SEMICOLON
    (79) index -> . ID temp

    IF              shift and go to state 132
    WHILE           shift and go to state 133
    ID              shift and go to state 123
    MUTABLE_VARIABLE shift and go to state 6
    IMMUTABLE_VARIABLE shift and go to state 7
    FUNCTION        shift and go to state 8

    block                          shift and go to state 159
    statement                      shift and go to state 125
    if_statement                   shift and go to state 126
    while_statement                shift and go to state 127
    assign                         shift and go to state 128
    create_variable                shift and go to state 129
    function_call                  shift and go to state 130
    function                       shift and go to state 131
    index                          shift and go to state 134

state 158

    (28) else_if_statements -> ELSE IF expression . L_BRACKET block R_BRACKET
    (29) else_if_statements -> ELSE IF expression . L_BRACKET block R_BRACKET else_if_statements
    (30) else_if_statements -> ELSE IF expression . L_BRACKET block R_BRACKET ELSE L_BRACKET block R_BRACKET
    (32) expression -> expression . MULTIPLY expression
    (33) expression -> expression . DIVIDE expression
    (34) expression -> expression . MOD expression
    (35) expression -> expression . POWER expression
    (36) expression -> expression . PLUS expression
    (37) expression -> expression . MINUS expression
    (38) expression -> expression . LESS expression
    (39) expression -> expression . GREATER expression
    (40) expression -> expression . GREATER_EQUAL expression
    (41) expression -> expression . LESS_EQUAL expression
    (42) expression -> expression . EQUALS expression
    (43) expression -> expression . DIFFERENT expression
    (44) expression -> expression . AND expression
    (45) expression -> expression . OR expression

    L_BRACKET       shift and go to state 160
    MULTIPLY        shift and go to state 74
    DIVIDE          shift and go to state 75
    MOD             shift and go to state 76
    POWER           shift and go to state 77
    PLUS            shift and go to state 78
    MINUS           shift and go to state 79
    LESS            shift and go to state 80
    GREATER         shift and go to state 81
    GREATER_EQUAL   shift and go to state 82
    LESS_EQUAL      shift and go to state 83
    EQUALS          shift and go to state 84
    DIFFERENT       shift and go to state 85
    AND             shift and go to state 86
    OR              shift and go to state 87


state 159

    (27) if_statement -> IF expression L_BRACKET block R_BRACKET ELSE L_BRACKET block . R_BRACKET

    R_BRACKET       shift and go to state 161


state 160

    (28) else_if_statements -> ELSE IF expression L_BRACKET . block R_BRACKET
    (29) else_if_statements -> ELSE IF expression L_BRACKET . block R_BRACKET else_if_statements
    (30) else_if_statements -> ELSE IF expression L_BRACKET . block R_BRACKET ELSE L_BRACKET block R_BRACKET
    (17) block -> . statement block
    (18) block -> . statement
    (19) statement -> . if_statement
    (20) statement -> . while_statement
    (21) statement -> . assign SEMICOLON
    (22) statement -> . create_variable SEMICOLON
    (23) statement -> . function_call SEMICOLON
    (24) statement -> . function
    (25) if_statement -> . IF expression L_BRACKET block R_BRACKET
    (26) if_statement -> . IF expression L_BRACKET block R_BRACKET else_if_statements
    (27) if_statement -> . IF expression L_BRACKET block R_BRACKET ELSE L_BRACKET block R_BRACKET
    (31) while_statement -> . WHILE expression L_BRACKET block R_BRACKET
    (8) assign -> . ID COLON_EQUALS expression
    (9) assign -> . index COLON_EQUALS expression
    (6) create_variable -> . MUTABLE_VARIABLE ID COLON type COLON_EQUALS expression
    (7) create_variable -> . IMMUTABLE_VARIABLE ID COLON type COLON_EQUALS expression
    (86) function_call -> . ID L_PAREN arguments_list R_PAREN
    (10) function -> . FUNCTION ID L_PAREN parameter_list R_PAREN COLON type L_BRACKET block R_BRACKET
    (11) function -> . FUNCTION ID L_PAREN parameter_list R_PAREN COLON type SEMICOLON
    (79) index -> . ID temp

    IF              shift and go to state 132
    WHILE           shift and go to state 133
    ID              shift and go to state 123
    MUTABLE_VARIABLE shift and go to state 6
    IMMUTABLE_VARIABLE shift and go to state 7
    FUNCTION        shift and go to state 8

    block                          shift and go to state 162
    statement                      shift and go to state 125
    if_statement                   shift and go to state 126
    while_statement                shift and go to state 127
    assign                         shift and go to state 128
    create_variable                shift and go to state 129
    function_call                  shift and go to state 130
    function                       shift and go to state 131
    index                          shift and go to state 134

state 161

    (27) if_statement -> IF expression L_BRACKET block R_BRACKET ELSE L_BRACKET block R_BRACKET .

    IF              reduce using rule 27 (if_statement -> IF expression L_BRACKET block R_BRACKET ELSE L_BRACKET block R_BRACKET .)
    WHILE           reduce using rule 27 (if_statement -> IF expression L_BRACKET block R_BRACKET ELSE L_BRACKET block R_BRACKET .)
    ID              reduce using rule 27 (if_statement -> IF expression L_BRACKET block R_BRACKET ELSE L_BRACKET block R_BRACKET .)
    MUTABLE_VARIABLE reduce using rule 27 (if_statement -> IF expression L_BRACKET block R_BRACKET ELSE L_BRACKET block R_BRACKET .)
    IMMUTABLE_VARIABLE reduce using rule 27 (if_statement -> IF expression L_BRACKET block R_BRACKET ELSE L_BRACKET block R_BRACKET .)
    FUNCTION        reduce using rule 27 (if_statement -> IF expression L_BRACKET block R_BRACKET ELSE L_BRACKET block R_BRACKET .)
    R_BRACKET       reduce using rule 27 (if_statement -> IF expression L_BRACKET block R_BRACKET ELSE L_BRACKET block R_BRACKET .)


state 162

    (28) else_if_statements -> ELSE IF expression L_BRACKET block . R_BRACKET
    (29) else_if_statements -> ELSE IF expression L_BRACKET block . R_BRACKET else_if_statements
    (30) else_if_statements -> ELSE IF expression L_BRACKET block . R_BRACKET ELSE L_BRACKET block R_BRACKET

    R_BRACKET       shift and go to state 163


state 163

    (28) else_if_statements -> ELSE IF expression L_BRACKET block R_BRACKET .
    (29) else_if_statements -> ELSE IF expression L_BRACKET block R_BRACKET . else_if_statements
    (30) else_if_statements -> ELSE IF expression L_BRACKET block R_BRACKET . ELSE L_BRACKET block R_BRACKET
    (28) else_if_statements -> . ELSE IF expression L_BRACKET block R_BRACKET
    (29) else_if_statements -> . ELSE IF expression L_BRACKET block R_BRACKET else_if_statements
    (30) else_if_statements -> . ELSE IF expression L_BRACKET block R_BRACKET ELSE L_BRACKET block R_BRACKET

    IF              reduce using rule 28 (else_if_statements -> ELSE IF expression L_BRACKET block R_BRACKET .)
    WHILE           reduce using rule 28 (else_if_statements -> ELSE IF expression L_BRACKET block R_BRACKET .)
    ID              reduce using rule 28 (else_if_statements -> ELSE IF expression L_BRACKET block R_BRACKET .)
    MUTABLE_VARIABLE reduce using rule 28 (else_if_statements -> ELSE IF expression L_BRACKET block R_BRACKET .)
    IMMUTABLE_VARIABLE reduce using rule 28 (else_if_statements -> ELSE IF expression L_BRACKET block R_BRACKET .)
    FUNCTION        reduce using rule 28 (else_if_statements -> ELSE IF expression L_BRACKET block R_BRACKET .)
    R_BRACKET       reduce using rule 28 (else_if_statements -> ELSE IF expression L_BRACKET block R_BRACKET .)
    ELSE            shift and go to state 164

    else_if_statements             shift and go to state 165

state 164

    (30) else_if_statements -> ELSE IF expression L_BRACKET block R_BRACKET ELSE . L_BRACKET block R_BRACKET
    (28) else_if_statements -> ELSE . IF expression L_BRACKET block R_BRACKET
    (29) else_if_statements -> ELSE . IF expression L_BRACKET block R_BRACKET else_if_statements
    (30) else_if_statements -> ELSE . IF expression L_BRACKET block R_BRACKET ELSE L_BRACKET block R_BRACKET

    L_BRACKET       shift and go to state 166
    IF              shift and go to state 156


state 165

    (29) else_if_statements -> ELSE IF expression L_BRACKET block R_BRACKET else_if_statements .

    IF              reduce using rule 29 (else_if_statements -> ELSE IF expression L_BRACKET block R_BRACKET else_if_statements .)
    WHILE           reduce using rule 29 (else_if_statements -> ELSE IF expression L_BRACKET block R_BRACKET else_if_statements .)
    ID              reduce using rule 29 (else_if_statements -> ELSE IF expression L_BRACKET block R_BRACKET else_if_statements .)
    MUTABLE_VARIABLE reduce using rule 29 (else_if_statements -> ELSE IF expression L_BRACKET block R_BRACKET else_if_statements .)
    IMMUTABLE_VARIABLE reduce using rule 29 (else_if_statements -> ELSE IF expression L_BRACKET block R_BRACKET else_if_statements .)
    FUNCTION        reduce using rule 29 (else_if_statements -> ELSE IF expression L_BRACKET block R_BRACKET else_if_statements .)
    R_BRACKET       reduce using rule 29 (else_if_statements -> ELSE IF expression L_BRACKET block R_BRACKET else_if_statements .)


state 166

    (30) else_if_statements -> ELSE IF expression L_BRACKET block R_BRACKET ELSE L_BRACKET . block R_BRACKET
    (17) block -> . statement block
    (18) block -> . statement
    (19) statement -> . if_statement
    (20) statement -> . while_statement
    (21) statement -> . assign SEMICOLON
    (22) statement -> . create_variable SEMICOLON
    (23) statement -> . function_call SEMICOLON
    (24) statement -> . function
    (25) if_statement -> . IF expression L_BRACKET block R_BRACKET
    (26) if_statement -> . IF expression L_BRACKET block R_BRACKET else_if_statements
    (27) if_statement -> . IF expression L_BRACKET block R_BRACKET ELSE L_BRACKET block R_BRACKET
    (31) while_statement -> . WHILE expression L_BRACKET block R_BRACKET
    (8) assign -> . ID COLON_EQUALS expression
    (9) assign -> . index COLON_EQUALS expression
    (6) create_variable -> . MUTABLE_VARIABLE ID COLON type COLON_EQUALS expression
    (7) create_variable -> . IMMUTABLE_VARIABLE ID COLON type COLON_EQUALS expression
    (86) function_call -> . ID L_PAREN arguments_list R_PAREN
    (10) function -> . FUNCTION ID L_PAREN parameter_list R_PAREN COLON type L_BRACKET block R_BRACKET
    (11) function -> . FUNCTION ID L_PAREN parameter_list R_PAREN COLON type SEMICOLON
    (79) index -> . ID temp

    IF              shift and go to state 132
    WHILE           shift and go to state 133
    ID              shift and go to state 123
    MUTABLE_VARIABLE shift and go to state 6
    IMMUTABLE_VARIABLE shift and go to state 7
    FUNCTION        shift and go to state 8

    block                          shift and go to state 167
    statement                      shift and go to state 125
    if_statement                   shift and go to state 126
    while_statement                shift and go to state 127
    assign                         shift and go to state 128
    create_variable                shift and go to state 129
    function_call                  shift and go to state 130
    function                       shift and go to state 131
    index                          shift and go to state 134

state 167

    (30) else_if_statements -> ELSE IF expression L_BRACKET block R_BRACKET ELSE L_BRACKET block . R_BRACKET

    R_BRACKET       shift and go to state 168


state 168

    (30) else_if_statements -> ELSE IF expression L_BRACKET block R_BRACKET ELSE L_BRACKET block R_BRACKET .

    IF              reduce using rule 30 (else_if_statements -> ELSE IF expression L_BRACKET block R_BRACKET ELSE L_BRACKET block R_BRACKET .)
    WHILE           reduce using rule 30 (else_if_statements -> ELSE IF expression L_BRACKET block R_BRACKET ELSE L_BRACKET block R_BRACKET .)
    ID              reduce using rule 30 (else_if_statements -> ELSE IF expression L_BRACKET block R_BRACKET ELSE L_BRACKET block R_BRACKET .)
    MUTABLE_VARIABLE reduce using rule 30 (else_if_statements -> ELSE IF expression L_BRACKET block R_BRACKET ELSE L_BRACKET block R_BRACKET .)
    IMMUTABLE_VARIABLE reduce using rule 30 (else_if_statements -> ELSE IF expression L_BRACKET block R_BRACKET ELSE L_BRACKET block R_BRACKET .)
    FUNCTION        reduce using rule 30 (else_if_statements -> ELSE IF expression L_BRACKET block R_BRACKET ELSE L_BRACKET block R_BRACKET .)
    R_BRACKET       reduce using rule 30 (else_if_statements -> ELSE IF expression L_BRACKET block R_BRACKET ELSE L_BRACKET block R_BRACKET .)

